{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus-dark/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cactus-dark/LICENSE","hash":"4d5f5f360a18c68f0fd1897bdb1eb1210c2893e3","modified":1524640001274},{"_id":"themes/cactus-dark/README.md","hash":"f9665d6818f0f6b29bf11089507b9e8a5a1571da","modified":1524640001275},{"_id":"themes/cactus-dark/_config.yml","hash":"068e43199e3f4683355605740787d72e4bede808","modified":1524640001275},{"_id":"source/_posts/.RHA-MA750i-vs-SE215.md.swp","hash":"28b10345951e1b0e09a8aeee39457ae88f0976e3","modified":1526615849333},{"_id":"source/_posts/.RHA-MA750i-vs-SE215.md.un~","hash":"88c98c6d390392c8eeb2bb6731fb0aff0cc3bb76","modified":1526375897802},{"_id":"source/_posts/.compiling-a-single-module-linux-kernel.md.un~","hash":"dd5010134c6ead145e4e17b12b35d5b3db6f354e","modified":1527933965342},{"_id":"source/_posts/.ezjail-and-network-interfaces.md.un~","hash":"9a4782cb20d10e5582c88f483419a08492aa18de","modified":1527934016878},{"_id":"source/_posts/4chan-parallel-image-downloader.md","hash":"ef3f926668465ca574628a9c3e325240bf2b5711","modified":1524640001273},{"_id":"source/_posts/compiling-a-single-module-linux-kernel.md","hash":"cb50fdc8a4ede25b10ccffcc3df5afef42cb95de","modified":1527933965335},{"_id":"source/_posts/iOS-openvpn-connect-read-length-inconsistency.md","hash":"c14a7959ad94e79197ea454539602891e682c31f","modified":1524640001273},{"_id":"source/_posts/notes-on-flashing-the-esp8266-esp-01s.md","hash":"dc2d23ceaf4babde0143b67f705077cfc059d729","modified":1524640001273},{"_id":"source/_posts/ros-kinetic-macos-may17.md","hash":"7dac24e44922a672e8950617c746e10d8a804c33","modified":1524640001274},{"_id":"source/_posts/sane-sshd-ipfw-defaults.md","hash":"bbb9fa8af43adf096208d8babae03c14cbba5f93","modified":1524640001274},{"_id":"source/_posts/say-no-to-catkin-make.md","hash":"b680e0f9e5c3ed960710a0e42de33647ec49b5e6","modified":1524640001274},{"_id":"source/_posts/whatsapp-chat-backup-getting-stuck.md","hash":"6251a6e99d629ef96cb666d3ae15aa06b68b1bfb","modified":1524640001274},{"_id":"themes/cactus-dark/layout/archive.ejs","hash":"f9c0434f023bdf2858aa8447137463c3224814be","modified":1524640001277},{"_id":"themes/cactus-dark/layout/index.ejs","hash":"c452d363f2c630c55f65bc9ef94ceae36c9c0017","modified":1524640001277},{"_id":"themes/cactus-dark/layout/layout.ejs","hash":"d34f468113a3e3377409fa21f88fef3462a57f00","modified":1524640001277},{"_id":"themes/cactus-dark/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1524640001277},{"_id":"themes/cactus-dark/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1524640001277},{"_id":"themes/cactus-dark/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1524640001278},{"_id":"themes/cactus-dark/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1524640001278},{"_id":"source/_posts/ezjail-and-network-interfaces.md","hash":"fda8397a9c9a90b5a09bec30146756ed9fb53d90","modified":1527934016875},{"_id":"themes/cactus-dark/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1524640001275},{"_id":"themes/cactus-dark/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1524640001275},{"_id":"themes/cactus-dark/layout/_partial/head.ejs","hash":"5b6f73a4fb96edde3005f90063509bf851714f72","modified":1524640001275},{"_id":"themes/cactus-dark/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/scripts.ejs","hash":"264e49c76744a2ce5be4cd69910cab8e0f517eda","modified":1524640001277},{"_id":"themes/cactus-dark/source/css/_extend.styl","hash":"faca25132d55e8989d1c1d638e55d1e97de3c561","modified":1524640001278},{"_id":"themes/cactus-dark/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1524640001284},{"_id":"themes/cactus-dark/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1524640001286},{"_id":"themes/cactus-dark/source/css/_variables.styl","hash":"80345f77f0e601669047cbb3c44491720c3b5c13","modified":1524640001286},{"_id":"themes/cactus-dark/source/css/style.styl","hash":"fbe1574bfa9b830345f95c50de1e4e2af0eed9c2","modified":1524640001286},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1524640001287},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1524640001287},{"_id":"themes/cactus-dark/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1524640001287},{"_id":"themes/cactus-dark/source/images/logo.png","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1524640001287},{"_id":"themes/cactus-dark/source/js/main.js","hash":"84de9c1a8a4a82b9446163c47b89937f44a7dee0","modified":1524640001288},{"_id":"themes/cactus-dark/source/css/_partial/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524640001285},{"_id":"themes/cactus-dark/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1524640001276},{"_id":"themes/cactus-dark/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1524640001277},{"_id":"themes/cactus-dark/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1524640001278},{"_id":"themes/cactus-dark/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1524640001278},{"_id":"themes/cactus-dark/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1524640001279},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1524640001279},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1524640001279},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1524640001279},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1524640001279},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1524640001280},{"_id":"themes/cactus-dark/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1524640001281},{"_id":"themes/cactus-dark/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1524640001281},{"_id":"themes/cactus-dark/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1524640001281},{"_id":"themes/cactus-dark/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1524640001281},{"_id":"themes/cactus-dark/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1524640001281},{"_id":"themes/cactus-dark/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1524640001282},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1524640001282},{"_id":"themes/cactus-dark/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1524640001282},{"_id":"themes/cactus-dark/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1524640001282},{"_id":"themes/cactus-dark/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1524640001282},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1524640001282},{"_id":"themes/cactus-dark/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1524640001283},{"_id":"themes/cactus-dark/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1524640001283},{"_id":"themes/cactus-dark/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1524640001283},{"_id":"themes/cactus-dark/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1524640001283},{"_id":"themes/cactus-dark/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1524640001283},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1524640001283},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1524640001284},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1524640001284},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1524640001284},{"_id":"themes/cactus-dark/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1524640001284},{"_id":"themes/cactus-dark/source/css/_partial/article.styl","hash":"202b775a966d7bc35bf5adc693b62463dec106bb","modified":1524640001285},{"_id":"themes/cactus-dark/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1524640001285},{"_id":"themes/cactus-dark/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1524640001285},{"_id":"themes/cactus-dark/source/css/_partial/header.styl","hash":"63707d9103a283147ca222fd6f8ff9bffbffe427","modified":1524640001285},{"_id":"themes/cactus-dark/source/css/_partial/index.styl","hash":"cf43702450ea1e5617541501886982a394cff8ec","modified":1524640001285},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1524640001294},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1524640001294},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1524640001306},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524640001294},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_desktop.styl","hash":"969d849434d3fc519629e5de001d9a091e7584ec","modified":1524640001286},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_mobile.styl","hash":"5911f4674eb90339c3d2db810f9c22a7fb65584e","modified":1524640001286},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1524640001288},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1524640001288},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1524640001290},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1524640001290},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1524640001293},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1524640001293},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1524640001293},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1524640001292},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1524640001298},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1524640001301},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1524640001305},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1524640001296},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1524640001297},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1524640001299},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1524640001300},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1524640001300},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1524640001303},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1524640001303},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1524640001304},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1524640001306},{"_id":"public/2017/10/29/iOS-openvpn-connect-read-length-inconsistency/index.html","hash":"7b00f3dd71b3fe9b13504fd9ae3587a64e13189d","modified":1527952434538},{"_id":"public/2017/10/29/whatsapp-chat-backup-getting-stuck/index.html","hash":"711f859536ef1ab1a3d7871238a5840df0b98b42","modified":1527952434549},{"_id":"public/2017/07/04/notes-on-flashing-the-esp8266-esp-01s/index.html","hash":"74f78817576d0dc60241e50a95ec558869712ce8","modified":1527952434550},{"_id":"public/2017/05/09/ros-kinetic-macos-may17/index.html","hash":"92a506391feeea2938bfd15eb0809693cd65a48c","modified":1527952434550},{"_id":"public/2017/01/19/say-no-to-catkin-make/index.html","hash":"c07d0f0d7493d8f4e53cd74875e5fcf8648ca1a4","modified":1527952434550},{"_id":"public/archives/index.html","hash":"f2dffd8d358e293bb256f83155ea13486ac59476","modified":1527952434550},{"_id":"public/2017/01/16/4chan-parallel-image-downloader/index.html","hash":"628f268081561ecf285c5f2a8e0734b2f7a026ce","modified":1527952434551},{"_id":"public/archives/2017/index.html","hash":"302a9e15623c5df6d25c127e98b516e1916ed5ed","modified":1527952434551},{"_id":"public/archives/2017/01/index.html","hash":"d0a41ee0de00d1aff6009703831a5d8a138f21f7","modified":1527952434551},{"_id":"public/archives/2017/03/index.html","hash":"f964368265c3991970eadbb7e7115b2d0d482be8","modified":1527952434551},{"_id":"public/archives/2017/05/index.html","hash":"e9f5b576c792d41fcadc765e42c9e846c0b4f2a5","modified":1527952434551},{"_id":"public/archives/2017/07/index.html","hash":"cf43f7fac8cb9d63007a6df445f4440d6f924aff","modified":1527952434551},{"_id":"public/archives/2017/10/index.html","hash":"b7674d497786317bbcbb762a65f464a84beb48f1","modified":1527952434551},{"_id":"public/2017/03/09/sane-sshd-ipfw-defaults/index.html","hash":"1fa6c7251995879a9f359076a4fe9dd127a02be2","modified":1527952434551},{"_id":"public/tags/shell-scripting/index.html","hash":"fa8a03d180acd22aae1e8312318c16785e650545","modified":1527952434562},{"_id":"public/tags/ios-openvpn/index.html","hash":"c99d05ce8565649361cc5cbdcca5c1449522e8dd","modified":1527952434579},{"_id":"public/tags/esp8266/index.html","hash":"8cc0dbeaa951b736fa448cd56c783d0d8289a25c","modified":1527952434580},{"_id":"public/tags/freebsd/index.html","hash":"9083e022a1397b0d859e079d11b2d43a0b4d5ec0","modified":1527952434580},{"_id":"public/tags/ios/index.html","hash":"c06475bff8a5daf1570b68aa81c3dd74410d6668","modified":1527952434580},{"_id":"public/index.html","hash":"c53ccc2c4c9a6bae8610ed1db0a4effc73cb7dbf","modified":1527952434580},{"_id":"public/tags/ros/index.html","hash":"2cb04dbf384b3e6911296c9179718a437ba93c90","modified":1527952434580},{"_id":"public/2018/06/02/compiling-a-single-module-linux-kernel/index.html","hash":"bc5feffb078a639702d00f1685e8be3af49c07fa","modified":1527952434582},{"_id":"public/archives/2018/index.html","hash":"e9a5cffc89b6ce834d91ef018e08135c647fc92a","modified":1527952434582},{"_id":"public/2018/06/02/ezjail-and-network-interfaces/index.html","hash":"d001cc4cc622f2912a2120cce7de84606e346fee","modified":1527952434582},{"_id":"public/archives/2018/06/index.html","hash":"f0ff6d034f84cf90d7180a7f685703e8ac94b7f2","modified":1527952434582},{"_id":"public/tags/kernel/index.html","hash":"6e75599c91584195defa38cc281b29759518ee3e","modified":1527952434582},{"_id":"public/tags/ezjail/index.html","hash":"07254793e68dde4ba9d648a61d539d9a6e3d1125","modified":1527952434582},{"_id":"public/tags/linux/index.html","hash":"a71dff198392cfb353b27c1cafe6e77c889299f1","modified":1527952434582},{"_id":"public/tags/networking/index.html","hash":"39af5c9168cfd9130033c30beed9890b65b40369","modified":1527952434582}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Simple shell function to download images from 4chan threads in parallel","date":"2017-01-15T21:17:51.000Z","author":"alex","_content":"\nThis is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.\n\nIt uses `xargs` to dispatch downloads to threads and uses only commonly used unix tools. If we replace the `\\d` regex with `[0-9]` it'll work with plain `grep` without relying on PCRE.\n\n```sh\nfunction 4get() {\n  curl -k -s $1 | egrep -o \\\n    \"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\" | \\\n    sed 's/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/' | uniq | \\\n    xargs -n 1 -P 12 curl -# -O\n}\n```\n\nThe script can also be found on [gist](https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb).\n","source":"_posts/4chan-parallel-image-downloader.md","raw":"---\ntitle: Simple shell function to download images from 4chan threads in parallel\ndate: 2017-01-16 05:17:51\nauthor: alex\ntags: shell, scripting\n---\n\nThis is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.\n\nIt uses `xargs` to dispatch downloads to threads and uses only commonly used unix tools. If we replace the `\\d` regex with `[0-9]` it'll work with plain `grep` without relying on PCRE.\n\n```sh\nfunction 4get() {\n  curl -k -s $1 | egrep -o \\\n    \"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\" | \\\n    sed 's/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/' | uniq | \\\n    xargs -n 1 -P 12 curl -# -O\n}\n```\n\nThe script can also be found on [gist](https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb).\n","slug":"4chan-parallel-image-downloader","published":1,"updated":"2018-04-25T07:06:41.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88ujm0000mz5n8vdp0uym","content":"<p>This is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.</p>\n<p>It uses <code>xargs</code> to dispatch downloads to threads and uses only commonly used unix tools. If we replace the <code>\\d</code> regex with <code>[0-9]</code> it’ll work with plain <code>grep</code> without relying on PCRE.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">4get</span></span>() &#123;</span><br><span class=\"line\">  curl -k -s <span class=\"variable\">$1</span> | egrep -o \\</span><br><span class=\"line\">    <span class=\"string\">\"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\"</span> | \\</span><br><span class=\"line\">    sed <span class=\"string\">'s/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/'</span> | uniq | \\</span><br><span class=\"line\">    xargs -n 1 -P 12 curl -<span class=\"comment\"># -O</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The script can also be found on <a href=\"https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.</p>\n<p>It uses <code>xargs</code> to dispatch downloads to threads and uses only commonly used unix tools. If we replace the <code>\\d</code> regex with <code>[0-9]</code> it’ll work with plain <code>grep</code> without relying on PCRE.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">4get</span></span>() &#123;</span><br><span class=\"line\">  curl -k -s <span class=\"variable\">$1</span> | egrep -o \\</span><br><span class=\"line\">    <span class=\"string\">\"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\"</span> | \\</span><br><span class=\"line\">    sed <span class=\"string\">'s/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/'</span> | uniq | \\</span><br><span class=\"line\">    xargs -n 1 -P 12 curl -<span class=\"comment\"># -O</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The script can also be found on <a href=\"https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n"},{"title":"Compiling a single linux kernel module with matching vermagic","date":"2018-06-02T09:46:46.000Z","_content":"\nI recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.\n\nI set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot'd image (plus since it was totally in memory, if\nanything went wrong it'd be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are \n\n```\nlibncurses-dev\nlibssl\nbuild-essentials\nbc\n```\nAfter booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\n\nThis would install `/usr/src/linux-headers-version` (replace version) with the\nkernel source. Then we need to scp the `Makefile` found in the directory to the\nsame directory on our build box.\n\nWe can then enable `UFS_FS_WRITE=y` in the kernel config. Then call\n\n```\nmake oldconfig\nmake prepare\nmake modules_prepare\nmake M=fs/ufs/ modules\n```\n\nThen the resulting `ufs.ko` can be scp'd back to the server to be loaded. The\nvermagic will match if the same `Makefile` was used across both kernel\ncompilations.\n","source":"_posts/compiling-a-single-module-linux-kernel.md","raw":"---\ntitle: Compiling a single linux kernel module with matching vermagic\ndate: 2018-06-02 17:46:46\ntags: \n  - linux\n  - kernel\n---\n\nI recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.\n\nI set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot'd image (plus since it was totally in memory, if\nanything went wrong it'd be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are \n\n```\nlibncurses-dev\nlibssl\nbuild-essentials\nbc\n```\nAfter booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\n\nThis would install `/usr/src/linux-headers-version` (replace version) with the\nkernel source. Then we need to scp the `Makefile` found in the directory to the\nsame directory on our build box.\n\nWe can then enable `UFS_FS_WRITE=y` in the kernel config. Then call\n\n```\nmake oldconfig\nmake prepare\nmake modules_prepare\nmake M=fs/ufs/ modules\n```\n\nThen the resulting `ufs.ko` can be scp'd back to the server to be loaded. The\nvermagic will match if the same `Makefile` was used across both kernel\ncompilations.\n","slug":"compiling-a-single-module-linux-kernel","published":1,"updated":"2018-06-02T10:06:05.335Z","_id":"cjhx88ujr0001mz5ncoaz352p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.</p>\n<p>I set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot’d image (plus since it was totally in memory, if\nanything went wrong it’d be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libncurses-dev</span><br><span class=\"line\">libssl</span><br><span class=\"line\">build-essentials</span><br><span class=\"line\">bc</span><br></pre></td></tr></table></figure>\n<p>After booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>This would install <code>/usr/src/linux-headers-version</code> (replace version) with the\nkernel source. Then we need to scp the <code>Makefile</code> found in the directory to the\nsame directory on our build box.</p>\n<p>We can then enable <code>UFS_FS_WRITE=y</code> in the kernel config. Then call</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make oldconfig</span><br><span class=\"line\">make prepare</span><br><span class=\"line\">make modules_prepare</span><br><span class=\"line\">make M=fs/ufs/ modules</span><br></pre></td></tr></table></figure>\n<p>Then the resulting <code>ufs.ko</code> can be scp’d back to the server to be loaded. The\nvermagic will match if the same <code>Makefile</code> was used across both kernel\ncompilations.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.</p>\n<p>I set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot’d image (plus since it was totally in memory, if\nanything went wrong it’d be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libncurses-dev</span><br><span class=\"line\">libssl</span><br><span class=\"line\">build-essentials</span><br><span class=\"line\">bc</span><br></pre></td></tr></table></figure>\n<p>After booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>This would install <code>/usr/src/linux-headers-version</code> (replace version) with the\nkernel source. Then we need to scp the <code>Makefile</code> found in the directory to the\nsame directory on our build box.</p>\n<p>We can then enable <code>UFS_FS_WRITE=y</code> in the kernel config. Then call</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make oldconfig</span><br><span class=\"line\">make prepare</span><br><span class=\"line\">make modules_prepare</span><br><span class=\"line\">make M=fs/ufs/ modules</span><br></pre></td></tr></table></figure>\n<p>Then the resulting <code>ufs.ko</code> can be scp’d back to the server to be loaded. The\nvermagic will match if the same <code>Makefile</code> was used across both kernel\ncompilations.</p>\n"},{"title":"iOS OpenVPN Connect Error - read length inconsistency","date":"2017-10-29T11:46:31.000Z","_content":"\nIf you've had the same error as what's described \n[here](https://forums.openvpn.net/viewtopic.php?t=18197), then it just means\nthat you have to insert the given key files inline into the configuration.\n\nThe error usually gets cut off as well in portrait mode so it looks like this:\n\n```\nProfile error : read length inconsistency: /var/mobile..\n```\n\nUsually with Tunnelblick you just bundle the `ca.crt`, `client.key` and\n`client.crt` into a folder and rename it as `server_name.tblk` but that will not\nwork for OpenVPN connect.\n\nInstead do this\n\n```\n#ca ca.crt\n<ca>\n-----BEGIN CERTIFICATE-----\n.\n.\n</ca>\n```\n\nAnd so on.\n\n\n","source":"_posts/iOS-openvpn-connect-read-length-inconsistency.md","raw":"---\ntitle: iOS OpenVPN Connect Error - read length inconsistency\ndate: 2017-10-29 19:46:31\ntags: ios, openvpn\n---\n\nIf you've had the same error as what's described \n[here](https://forums.openvpn.net/viewtopic.php?t=18197), then it just means\nthat you have to insert the given key files inline into the configuration.\n\nThe error usually gets cut off as well in portrait mode so it looks like this:\n\n```\nProfile error : read length inconsistency: /var/mobile..\n```\n\nUsually with Tunnelblick you just bundle the `ca.crt`, `client.key` and\n`client.crt` into a folder and rename it as `server_name.tblk` but that will not\nwork for OpenVPN connect.\n\nInstead do this\n\n```\n#ca ca.crt\n<ca>\n-----BEGIN CERTIFICATE-----\n.\n.\n</ca>\n```\n\nAnd so on.\n\n\n","slug":"iOS-openvpn-connect-read-length-inconsistency","published":1,"updated":"2018-04-25T07:06:41.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88ujw0003mz5nsp5310l5","content":"<p>If you’ve had the same error as what’s described \n<a href=\"https://forums.openvpn.net/viewtopic.php?t=18197\" target=\"_blank\" rel=\"noopener\">here</a>, then it just means\nthat you have to insert the given key files inline into the configuration.</p>\n<p>The error usually gets cut off as well in portrait mode so it looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Profile error : read length inconsistency: /var/mobile..</span><br></pre></td></tr></table></figure>\n<p>Usually with Tunnelblick you just bundle the <code>ca.crt</code>, <code>client.key</code> and\n<code>client.crt</code> into a folder and rename it as <code>server_name.tblk</code> but that will not\nwork for OpenVPN connect.</p>\n<p>Instead do this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ca ca.crt</span><br><span class=\"line\">&lt;ca&gt;</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&lt;/ca&gt;</span><br></pre></td></tr></table></figure>\n<p>And so on.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you’ve had the same error as what’s described \n<a href=\"https://forums.openvpn.net/viewtopic.php?t=18197\" target=\"_blank\" rel=\"noopener\">here</a>, then it just means\nthat you have to insert the given key files inline into the configuration.</p>\n<p>The error usually gets cut off as well in portrait mode so it looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Profile error : read length inconsistency: /var/mobile..</span><br></pre></td></tr></table></figure>\n<p>Usually with Tunnelblick you just bundle the <code>ca.crt</code>, <code>client.key</code> and\n<code>client.crt</code> into a folder and rename it as <code>server_name.tblk</code> but that will not\nwork for OpenVPN connect.</p>\n<p>Instead do this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ca ca.crt</span><br><span class=\"line\">&lt;ca&gt;</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&lt;/ca&gt;</span><br></pre></td></tr></table></figure>\n<p>And so on.</p>\n"},{"title":"Notes on flashing the ESP8266 wifi module (ESP-01S)","date":"2017-07-03T22:10:36.000Z","_content":"\nWriting this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout\n\n```\nTXD <-> TX (I suspect wrong labelling)\nRXD <-> RX\nVCC <-> 3v3\nGND <-> GND\n        IO0 pulled low\n        IO2 pulled high\n```\n\nKeep the reset pin connected to a wire for easy resetting. \n\nInstall `esptool.py` via `pip install esptool` and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.\n\n```\nesptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac\n```\n\nI flashed v2.1.0 of the NON OS SDK which can be obtained\n[here](https://github.com/espressif/ESP8266_NONOS_SDK/releases). \n\nFlash details\n\n```\nboot_v1.7.bin @ 0x0\nat\\512+512\\user1.1024.new.2.bin @ 0x01\nesp_init_data_default.bin 0xfc000\nblank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000\n```\n\nSPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.\n\nThe firmware sets default baudrate to `1152000`. This was confusing for me because I'm\nused to working with serial devices and I just assumed it was `115200` (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing\n\n```\nAT #for testing\nAT+GMR #for testing\nAT+UART_DEF=9600,8,1,0,0\n```\n\nNow you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so\n\n```\nAT^M^J\n```\n\n\n","source":"_posts/notes-on-flashing-the-esp8266-esp-01s.md","raw":"---\ntitle: Notes on flashing the ESP8266 wifi module (ESP-01S)\ndate: 2017-07-04 06:10:36\ntags: esp8266\n---\n\nWriting this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout\n\n```\nTXD <-> TX (I suspect wrong labelling)\nRXD <-> RX\nVCC <-> 3v3\nGND <-> GND\n        IO0 pulled low\n        IO2 pulled high\n```\n\nKeep the reset pin connected to a wire for easy resetting. \n\nInstall `esptool.py` via `pip install esptool` and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.\n\n```\nesptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac\n```\n\nI flashed v2.1.0 of the NON OS SDK which can be obtained\n[here](https://github.com/espressif/ESP8266_NONOS_SDK/releases). \n\nFlash details\n\n```\nboot_v1.7.bin @ 0x0\nat\\512+512\\user1.1024.new.2.bin @ 0x01\nesp_init_data_default.bin 0xfc000\nblank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000\n```\n\nSPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.\n\nThe firmware sets default baudrate to `1152000`. This was confusing for me because I'm\nused to working with serial devices and I just assumed it was `115200` (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing\n\n```\nAT #for testing\nAT+GMR #for testing\nAT+UART_DEF=9600,8,1,0,0\n```\n\nNow you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so\n\n```\nAT^M^J\n```\n\n\n","slug":"notes-on-flashing-the-esp8266-esp-01s","published":1,"updated":"2018-04-25T07:06:41.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88ujx0004mz5nmsj762n2","content":"<p>Writing this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TXD &lt;-&gt; TX (I suspect wrong labelling)</span><br><span class=\"line\">RXD &lt;-&gt; RX</span><br><span class=\"line\">VCC &lt;-&gt; 3v3</span><br><span class=\"line\">GND &lt;-&gt; GND</span><br><span class=\"line\">        IO0 pulled low</span><br><span class=\"line\">        IO2 pulled high</span><br></pre></td></tr></table></figure>\n<p>Keep the reset pin connected to a wire for easy resetting. </p>\n<p>Install <code>esptool.py</code> via <code>pip install esptool</code> and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac</span><br></pre></td></tr></table></figure>\n<p>I flashed v2.1.0 of the NON OS SDK which can be obtained\n<a href=\"https://github.com/espressif/ESP8266_NONOS_SDK/releases\" target=\"_blank\" rel=\"noopener\">here</a>. </p>\n<p>Flash details</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boot_v1.7.bin @ 0x0</span><br><span class=\"line\">at\\512+512\\user1.1024.new.2.bin @ 0x01</span><br><span class=\"line\">esp_init_data_default.bin 0xfc000</span><br><span class=\"line\">blank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000</span><br></pre></td></tr></table></figure>\n<p>SPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.</p>\n<p>The firmware sets default baudrate to <code>1152000</code>. This was confusing for me because I’m\nused to working with serial devices and I just assumed it was <code>115200</code> (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT #for testing</span><br><span class=\"line\">AT+GMR #for testing</span><br><span class=\"line\">AT+UART_DEF=9600,8,1,0,0</span><br></pre></td></tr></table></figure>\n<p>Now you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT^M^J</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Writing this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TXD &lt;-&gt; TX (I suspect wrong labelling)</span><br><span class=\"line\">RXD &lt;-&gt; RX</span><br><span class=\"line\">VCC &lt;-&gt; 3v3</span><br><span class=\"line\">GND &lt;-&gt; GND</span><br><span class=\"line\">        IO0 pulled low</span><br><span class=\"line\">        IO2 pulled high</span><br></pre></td></tr></table></figure>\n<p>Keep the reset pin connected to a wire for easy resetting. </p>\n<p>Install <code>esptool.py</code> via <code>pip install esptool</code> and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac</span><br></pre></td></tr></table></figure>\n<p>I flashed v2.1.0 of the NON OS SDK which can be obtained\n<a href=\"https://github.com/espressif/ESP8266_NONOS_SDK/releases\" target=\"_blank\" rel=\"noopener\">here</a>. </p>\n<p>Flash details</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boot_v1.7.bin @ 0x0</span><br><span class=\"line\">at\\512+512\\user1.1024.new.2.bin @ 0x01</span><br><span class=\"line\">esp_init_data_default.bin 0xfc000</span><br><span class=\"line\">blank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000</span><br></pre></td></tr></table></figure>\n<p>SPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.</p>\n<p>The firmware sets default baudrate to <code>1152000</code>. This was confusing for me because I’m\nused to working with serial devices and I just assumed it was <code>115200</code> (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT #for testing</span><br><span class=\"line\">AT+GMR #for testing</span><br><span class=\"line\">AT+UART_DEF=9600,8,1,0,0</span><br></pre></td></tr></table></figure>\n<p>Now you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT^M^J</span><br></pre></td></tr></table></figure>\n"},{"title":"ROS Kinetic Installation on MacOS (Homebrew, as of May '17)","date":"2017-05-09T07:05:20.000Z","_content":"\nEvery now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an `eselect`esque way (it's a tool found on Gentoo Linux for\nmanaging versions via symlinks).\n\n```\nsudo mkdir /opt/kinetic\nsudo mkdir /opt/jade\nsudo chown -R `whoami`:staff /opt/kinetic /opt/jade\nln -s /opt/kinetic/install /opt/ros/kinetic # or jade\n```\n\nOpenCV3\n-------\n\nHomebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with `--HEAD`:\n\n```\nbrew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\\n  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD\n```\n\nNote: takes around 20 minutes to compile.\n\nAFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n`cv_bridge` do \n\n```\nbrew ln opencv3 --force\n```\n\nThis may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.\n\nQt\n--\n\n```\necho 'export PATH=\"/usr/local/opt/qt/bin:$PATH\"' >> ~/.zshrc\n```\n\nOther than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it's ever been really.\n\n","source":"_posts/ros-kinetic-macos-may17.md","raw":"---\ntitle: ROS Kinetic Installation on MacOS (Homebrew, as of May '17)\ndate: 2017-05-09 15:05:20\ntags: ros\n---\n\nEvery now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an `eselect`esque way (it's a tool found on Gentoo Linux for\nmanaging versions via symlinks).\n\n```\nsudo mkdir /opt/kinetic\nsudo mkdir /opt/jade\nsudo chown -R `whoami`:staff /opt/kinetic /opt/jade\nln -s /opt/kinetic/install /opt/ros/kinetic # or jade\n```\n\nOpenCV3\n-------\n\nHomebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with `--HEAD`:\n\n```\nbrew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\\n  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD\n```\n\nNote: takes around 20 minutes to compile.\n\nAFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n`cv_bridge` do \n\n```\nbrew ln opencv3 --force\n```\n\nThis may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.\n\nQt\n--\n\n```\necho 'export PATH=\"/usr/local/opt/qt/bin:$PATH\"' >> ~/.zshrc\n```\n\nOther than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it's ever been really.\n\n","slug":"ros-kinetic-macos-may17","published":1,"updated":"2018-04-25T07:06:41.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88ujz0005mz5ni42t7gp4","content":"<p>Every now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an <code>eselect</code>esque way (it’s a tool found on Gentoo Linux for\nmanaging versions via symlinks).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /opt/kinetic</span><br><span class=\"line\">sudo mkdir /opt/jade</span><br><span class=\"line\">sudo chown -R `whoami`:staff /opt/kinetic /opt/jade</span><br><span class=\"line\">ln -s /opt/kinetic/install /opt/ros/kinetic # or jade</span><br></pre></td></tr></table></figure>\n<h2 id=\"OpenCV3\"><a href=\"#OpenCV3\" class=\"headerlink\" title=\"OpenCV3\"></a>OpenCV3</h2><p>Homebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with <code>--HEAD</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\</span><br><span class=\"line\">  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD</span><br></pre></td></tr></table></figure>\n<p>Note: takes around 20 minutes to compile.</p>\n<p>AFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n<code>cv_bridge</code> do </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew ln opencv3 --force</span><br></pre></td></tr></table></figure>\n<p>This may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.</p>\n<h2 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>Other than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it’s ever been really.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Every now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an <code>eselect</code>esque way (it’s a tool found on Gentoo Linux for\nmanaging versions via symlinks).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /opt/kinetic</span><br><span class=\"line\">sudo mkdir /opt/jade</span><br><span class=\"line\">sudo chown -R `whoami`:staff /opt/kinetic /opt/jade</span><br><span class=\"line\">ln -s /opt/kinetic/install /opt/ros/kinetic # or jade</span><br></pre></td></tr></table></figure>\n<h2 id=\"OpenCV3\"><a href=\"#OpenCV3\" class=\"headerlink\" title=\"OpenCV3\"></a>OpenCV3</h2><p>Homebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with <code>--HEAD</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\</span><br><span class=\"line\">  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD</span><br></pre></td></tr></table></figure>\n<p>Note: takes around 20 minutes to compile.</p>\n<p>AFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n<code>cv_bridge</code> do </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew ln opencv3 --force</span><br></pre></td></tr></table></figure>\n<p>This may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.</p>\n<h2 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>Other than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it’s ever been really.</p>\n"},{"title":"Bootstrap sane defaults for sshd and ipfw","date":"2017-03-09T09:34:54.000Z","author":"alex","_content":"\nI often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here's a short script\nthat sets up `sshd` as well as initializes the `ipfw` firewall.\n\nFor AWS instances we're better off using VPC with sane security groups to do our\nfirewalling for us.\n\nIt can be run using\n\n```sh\nssh user@host 'sh -s' < script\n```\n\nIt disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. \n\n```sh\n#!/bin/sh\n\nhead -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - > /dev/null 2>&1\n\nif [ $? != 0 ];\nthen\n  echo \"invalid public key found in authorized_keys, exiting..\"\n  exit\nfi\n\ncp /etc/ssh/sshd_config ~/sshd_config.bak\n\nsudo tee /etc/ssh/sshd_config <<EOF\nPort 22\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 2m\nStrictModes yes\nMaxAuthTries 6\nMaxSessions 10\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\nPasswordAuthentication no\nPermitEmptyPasswords no\nSubsystem       sftp    /usr/libexec/sftp-server\nPermitRootLogin no\nEOF\n\nsudo tee -a /etc/rc.conf <<EOF\nfirewall_enable=\"YES\"\nfirewall_quiet=\"YES\"\nfirewall_type=\"workstation\"\nfirewall_myservices=\"22/tcp\"\nfirewall_allowservices=\"any\"\nfirewall_logdeny=\"YES\"\nEOF\n\nsudo service sshd restart\nsudo service ipfw start\n```\n\nA maintained version of this script can be found on\n[gist](https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5).\n\nThe blog syntax highlighter seems to remove newlines from the source.\n","source":"_posts/sane-sshd-ipfw-defaults.md","raw":"---\ntitle: Bootstrap sane defaults for sshd and ipfw\ndate: 2017-03-09 17:34:54\ntags: freebsd\nauthor: alex\n---\n\nI often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here's a short script\nthat sets up `sshd` as well as initializes the `ipfw` firewall.\n\nFor AWS instances we're better off using VPC with sane security groups to do our\nfirewalling for us.\n\nIt can be run using\n\n```sh\nssh user@host 'sh -s' < script\n```\n\nIt disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. \n\n```sh\n#!/bin/sh\n\nhead -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - > /dev/null 2>&1\n\nif [ $? != 0 ];\nthen\n  echo \"invalid public key found in authorized_keys, exiting..\"\n  exit\nfi\n\ncp /etc/ssh/sshd_config ~/sshd_config.bak\n\nsudo tee /etc/ssh/sshd_config <<EOF\nPort 22\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 2m\nStrictModes yes\nMaxAuthTries 6\nMaxSessions 10\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\nPasswordAuthentication no\nPermitEmptyPasswords no\nSubsystem       sftp    /usr/libexec/sftp-server\nPermitRootLogin no\nEOF\n\nsudo tee -a /etc/rc.conf <<EOF\nfirewall_enable=\"YES\"\nfirewall_quiet=\"YES\"\nfirewall_type=\"workstation\"\nfirewall_myservices=\"22/tcp\"\nfirewall_allowservices=\"any\"\nfirewall_logdeny=\"YES\"\nEOF\n\nsudo service sshd restart\nsudo service ipfw start\n```\n\nA maintained version of this script can be found on\n[gist](https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5).\n\nThe blog syntax highlighter seems to remove newlines from the source.\n","slug":"sane-sshd-ipfw-defaults","published":1,"updated":"2018-04-25T07:06:41.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88uk10008mz5nnbivh5n0","content":"<p>I often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here’s a short script\nthat sets up <code>sshd</code> as well as initializes the <code>ipfw</code> firewall.</p>\n<p>For AWS instances we’re better off using VPC with sane security groups to do our\nfirewalling for us.</p>\n<p>It can be run using</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host <span class=\"string\">'sh -s'</span> &lt; script</span><br></pre></td></tr></table></figure>\n<p>It disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">head -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid public key found in authorized_keys, exiting..\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">cp /etc/ssh/sshd_config ~/sshd_config.bak</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/ssh/sshd_config &lt;&lt;EOF</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">SyslogFacility AUTH</span><br><span class=\"line\">LogLevel INFO</span><br><span class=\"line\">LoginGraceTime 2m</span><br><span class=\"line\">StrictModes yes</span><br><span class=\"line\">MaxAuthTries 6</span><br><span class=\"line\">MaxSessions 10</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">PermitEmptyPasswords no</span><br><span class=\"line\">Subsystem       sftp    /usr/libexec/sftp-server</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee -a /etc/rc.conf &lt;&lt;EOF</span><br><span class=\"line\">firewall_enable=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_quiet=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_type=<span class=\"string\">\"workstation\"</span></span><br><span class=\"line\">firewall_myservices=<span class=\"string\">\"22/tcp\"</span></span><br><span class=\"line\">firewall_allowservices=<span class=\"string\">\"any\"</span></span><br><span class=\"line\">firewall_logdeny=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sshd restart</span><br><span class=\"line\">sudo service ipfw start</span><br></pre></td></tr></table></figure>\n<p>A maintained version of this script can be found on\n<a href=\"https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n<p>The blog syntax highlighter seems to remove newlines from the source.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here’s a short script\nthat sets up <code>sshd</code> as well as initializes the <code>ipfw</code> firewall.</p>\n<p>For AWS instances we’re better off using VPC with sane security groups to do our\nfirewalling for us.</p>\n<p>It can be run using</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host <span class=\"string\">'sh -s'</span> &lt; script</span><br></pre></td></tr></table></figure>\n<p>It disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">head -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid public key found in authorized_keys, exiting..\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">cp /etc/ssh/sshd_config ~/sshd_config.bak</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/ssh/sshd_config &lt;&lt;EOF</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">SyslogFacility AUTH</span><br><span class=\"line\">LogLevel INFO</span><br><span class=\"line\">LoginGraceTime 2m</span><br><span class=\"line\">StrictModes yes</span><br><span class=\"line\">MaxAuthTries 6</span><br><span class=\"line\">MaxSessions 10</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">PermitEmptyPasswords no</span><br><span class=\"line\">Subsystem       sftp    /usr/libexec/sftp-server</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee -a /etc/rc.conf &lt;&lt;EOF</span><br><span class=\"line\">firewall_enable=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_quiet=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_type=<span class=\"string\">\"workstation\"</span></span><br><span class=\"line\">firewall_myservices=<span class=\"string\">\"22/tcp\"</span></span><br><span class=\"line\">firewall_allowservices=<span class=\"string\">\"any\"</span></span><br><span class=\"line\">firewall_logdeny=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sshd restart</span><br><span class=\"line\">sudo service ipfw start</span><br></pre></td></tr></table></figure>\n<p>A maintained version of this script can be found on\n<a href=\"https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n<p>The blog syntax highlighter seems to remove newlines from the source.</p>\n"},{"title":"Say no to catkin_make","date":"2017-01-19T09:03:20.000Z","author":"alex","_content":"`catkin` is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain `catkin_make` to build their workspaces but that is\npretty basic. Please use `catkin`, it is much more powerful and convienient.\n\nFor one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you're building individual packages it can sometimes be useful as it'll\ndetect if your dependencies are out of date and compile them too.\n\nInstall catkin with\n\n```\npip install catkin catkin_tools\n```\n\nTo initialize a workspace (that already has a `src` folder)\n\n```sh\ncatkin init\ncatkin build\n```\n\nThen you can easily set cmake parameters\n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release\n```\n\nor \n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DPYTHON_LIBRARY=$(python -c \"import sys; print sys.prefix\")/lib/libpython2.7.dylib \\\n  -DPYTHON_INCLUDE_DIR=$(python -c \"import sys; print sys.prefix\")/include/python2.7 \\\n  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON\n```\n\nIf you're using homebrewed libraries on MacOS.\n\nTo build a particular package\n\n```sh\ncatkin build pkg\n```\n\nOr blacklist/whitelist with \n\n```sh\ncatkin config (--blacklist|--whitelist) pkg\n```\n\nIf you are building an individual package you can force it to\nbuild only that package by \n\n```sh\ncatkin build pkg --no-deps\n```\n\nVerbosity and job control\n\n```sh\ncatkin build -v -jN\n```\n\n","source":"_posts/say-no-to-catkin-make.md","raw":"---\ntitle: Say no to catkin_make\ndate: 2017-01-19 17:03:20\ntags: ros\nauthor: alex\n---\n`catkin` is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain `catkin_make` to build their workspaces but that is\npretty basic. Please use `catkin`, it is much more powerful and convienient.\n\nFor one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you're building individual packages it can sometimes be useful as it'll\ndetect if your dependencies are out of date and compile them too.\n\nInstall catkin with\n\n```\npip install catkin catkin_tools\n```\n\nTo initialize a workspace (that already has a `src` folder)\n\n```sh\ncatkin init\ncatkin build\n```\n\nThen you can easily set cmake parameters\n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release\n```\n\nor \n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DPYTHON_LIBRARY=$(python -c \"import sys; print sys.prefix\")/lib/libpython2.7.dylib \\\n  -DPYTHON_INCLUDE_DIR=$(python -c \"import sys; print sys.prefix\")/include/python2.7 \\\n  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON\n```\n\nIf you're using homebrewed libraries on MacOS.\n\nTo build a particular package\n\n```sh\ncatkin build pkg\n```\n\nOr blacklist/whitelist with \n\n```sh\ncatkin config (--blacklist|--whitelist) pkg\n```\n\nIf you are building an individual package you can force it to\nbuild only that package by \n\n```sh\ncatkin build pkg --no-deps\n```\n\nVerbosity and job control\n\n```sh\ncatkin build -v -jN\n```\n\n","slug":"say-no-to-catkin-make","published":1,"updated":"2018-04-25T07:06:41.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88uk30009mz5nh4xg55iv","content":"<p><code>catkin</code> is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain <code>catkin_make</code> to build their workspaces but that is\npretty basic. Please use <code>catkin</code>, it is much more powerful and convienient.</p>\n<p>For one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you’re building individual packages it can sometimes be useful as it’ll\ndetect if your dependencies are out of date and compile them too.</p>\n<p>Install catkin with</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install catkin catkin_tools</span><br></pre></td></tr></table></figure>\n<p>To initialize a workspace (that already has a <code>src</code> folder)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin init</span><br><span class=\"line\">catkin build</span><br></pre></td></tr></table></figure>\n<p>Then you can easily set cmake parameters</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release \\</span><br><span class=\"line\">  -DPYTHON_LIBRARY=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/lib/libpython2.7.dylib \\</span><br><span class=\"line\">  -DPYTHON_INCLUDE_DIR=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/include/python2.7 \\</span><br><span class=\"line\">  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON</span><br></pre></td></tr></table></figure>\n<p>If you’re using homebrewed libraries on MacOS.</p>\n<p>To build a particular package</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg</span><br></pre></td></tr></table></figure>\n<p>Or blacklist/whitelist with </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config (--blacklist|--whitelist) pkg</span><br></pre></td></tr></table></figure>\n<p>If you are building an individual package you can force it to\nbuild only that package by </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg --no-deps</span><br></pre></td></tr></table></figure>\n<p>Verbosity and job control</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build -v -jN</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>catkin</code> is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain <code>catkin_make</code> to build their workspaces but that is\npretty basic. Please use <code>catkin</code>, it is much more powerful and convienient.</p>\n<p>For one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you’re building individual packages it can sometimes be useful as it’ll\ndetect if your dependencies are out of date and compile them too.</p>\n<p>Install catkin with</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install catkin catkin_tools</span><br></pre></td></tr></table></figure>\n<p>To initialize a workspace (that already has a <code>src</code> folder)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin init</span><br><span class=\"line\">catkin build</span><br></pre></td></tr></table></figure>\n<p>Then you can easily set cmake parameters</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release \\</span><br><span class=\"line\">  -DPYTHON_LIBRARY=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/lib/libpython2.7.dylib \\</span><br><span class=\"line\">  -DPYTHON_INCLUDE_DIR=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/include/python2.7 \\</span><br><span class=\"line\">  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON</span><br></pre></td></tr></table></figure>\n<p>If you’re using homebrewed libraries on MacOS.</p>\n<p>To build a particular package</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg</span><br></pre></td></tr></table></figure>\n<p>Or blacklist/whitelist with </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config (--blacklist|--whitelist) pkg</span><br></pre></td></tr></table></figure>\n<p>If you are building an individual package you can force it to\nbuild only that package by </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg --no-deps</span><br></pre></td></tr></table></figure>\n<p>Verbosity and job control</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build -v -jN</span><br></pre></td></tr></table></figure>\n"},{"title":"WhatsApp chat backup getting stuck/no progress","date":"2017-10-29T11:57:45.000Z","_content":"\nSometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.\n\nInstead, head on over to `Settings > iCloud > iCloud Drive` and turn that off.\nIt'll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.\n\nJust turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.\n","source":"_posts/whatsapp-chat-backup-getting-stuck.md","raw":"---\ntitle: WhatsApp chat backup getting stuck/no progress\ndate: 2017-10-29 19:57:45\ntags: ios\n---\n\nSometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.\n\nInstead, head on over to `Settings > iCloud > iCloud Drive` and turn that off.\nIt'll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.\n\nJust turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.\n","slug":"whatsapp-chat-backup-getting-stuck","published":1,"updated":"2018-04-25T07:06:41.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhx88uk5000bmz5n839gbu22","content":"<p>Sometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.</p>\n<p>Instead, head on over to <code>Settings &gt; iCloud &gt; iCloud Drive</code> and turn that off.\nIt’ll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.</p>\n<p>Just turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.</p>\n<p>Instead, head on over to <code>Settings &gt; iCloud &gt; iCloud Drive</code> and turn that off.\nIt’ll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.</p>\n<p>Just turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.</p>\n"},{"title":"ezjail and Network Interfaces","date":"2018-06-02T09:31:06.000Z","_content":"\nI was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the [handbook](https://www.freebsd.org/doc/handbook/jails-ezjail.html) we can create jails by doing\n\n```sh\nezjail-admin create dnsjail 'lo1|127.0.1.1,em0|192.168.1.50'\n```\n\nAfter changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part `em0`, which is often your\nexternal interface, `ezjail-admin restart jail` will tear down your default\nroute and all connectivity to the interface. `ezjail` adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.\n\nI've been meaning to add a warning to the handbook when I get some time.\n\nTo prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) `ezjail_enable=\"YES\"` in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon't have serial console setup on the server you are out of luck without\nrescuing via netboot.\n\nAs it turns out, online.net's FreeBSD rescue images that they provide for rescue\ndon't boot either and you're forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.\n\nTo get around it, I had to first get the source for the running kernel by doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\nand then by copying over the `Makefile` from `/usr/src/linux-*` to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.\n\nMore information on compiling singular kernel modules can be found here.\n","source":"_posts/ezjail-and-network-interfaces.md","raw":"---\ntitle: ezjail and Network Interfaces\ndate: 2018-06-02 17:31:06\ntags: \n  - ezjail\n  - freebsd\n  - networking\n---\n\nI was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the [handbook](https://www.freebsd.org/doc/handbook/jails-ezjail.html) we can create jails by doing\n\n```sh\nezjail-admin create dnsjail 'lo1|127.0.1.1,em0|192.168.1.50'\n```\n\nAfter changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part `em0`, which is often your\nexternal interface, `ezjail-admin restart jail` will tear down your default\nroute and all connectivity to the interface. `ezjail` adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.\n\nI've been meaning to add a warning to the handbook when I get some time.\n\nTo prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) `ezjail_enable=\"YES\"` in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon't have serial console setup on the server you are out of luck without\nrescuing via netboot.\n\nAs it turns out, online.net's FreeBSD rescue images that they provide for rescue\ndon't boot either and you're forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.\n\nTo get around it, I had to first get the source for the running kernel by doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\nand then by copying over the `Makefile` from `/usr/src/linux-*` to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.\n\nMore information on compiling singular kernel modules can be found here.\n","slug":"ezjail-and-network-interfaces","published":1,"updated":"2018-06-02T10:06:56.875Z","_id":"cjhx88uk6000dmz5n6rrou941","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the <a href=\"https://www.freebsd.org/doc/handbook/jails-ezjail.html\" target=\"_blank\" rel=\"noopener\">handbook</a> we can create jails by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ezjail-admin create dnsjail <span class=\"string\">'lo1|127.0.1.1,em0|192.168.1.50'</span></span><br></pre></td></tr></table></figure>\n<p>After changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part <code>em0</code>, which is often your\nexternal interface, <code>ezjail-admin restart jail</code> will tear down your default\nroute and all connectivity to the interface. <code>ezjail</code> adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.</p>\n<p>I’ve been meaning to add a warning to the handbook when I get some time.</p>\n<p>To prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) <code>ezjail_enable=&quot;YES&quot;</code> in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon’t have serial console setup on the server you are out of luck without\nrescuing via netboot.</p>\n<p>As it turns out, online.net’s FreeBSD rescue images that they provide for rescue\ndon’t boot either and you’re forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.</p>\n<p>To get around it, I had to first get the source for the running kernel by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>and then by copying over the <code>Makefile</code> from <code>/usr/src/linux-*</code> to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.</p>\n<p>More information on compiling singular kernel modules can be found here.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the <a href=\"https://www.freebsd.org/doc/handbook/jails-ezjail.html\" target=\"_blank\" rel=\"noopener\">handbook</a> we can create jails by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ezjail-admin create dnsjail <span class=\"string\">'lo1|127.0.1.1,em0|192.168.1.50'</span></span><br></pre></td></tr></table></figure>\n<p>After changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part <code>em0</code>, which is often your\nexternal interface, <code>ezjail-admin restart jail</code> will tear down your default\nroute and all connectivity to the interface. <code>ezjail</code> adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.</p>\n<p>I’ve been meaning to add a warning to the handbook when I get some time.</p>\n<p>To prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) <code>ezjail_enable=&quot;YES&quot;</code> in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon’t have serial console setup on the server you are out of luck without\nrescuing via netboot.</p>\n<p>As it turns out, online.net’s FreeBSD rescue images that they provide for rescue\ndon’t boot either and you’re forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.</p>\n<p>To get around it, I had to first get the source for the running kernel by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>and then by copying over the <code>Makefile</code> from <code>/usr/src/linux-*</code> to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.</p>\n<p>More information on compiling singular kernel modules can be found here.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjhx88ujm0000mz5n8vdp0uym","tag_id":"cjhx88uju0002mz5n9zygsozh","_id":"cjhx88uk00007mz5nqrbs54ms"},{"post_id":"cjhx88ujw0003mz5nsp5310l5","tag_id":"cjhx88uk4000amz5nilris61b","_id":"cjhx88uk8000fmz5nv3i6avno"},{"post_id":"cjhx88ujx0004mz5nmsj762n2","tag_id":"cjhx88uk7000emz5n2a7oa63j","_id":"cjhx88uk9000hmz5n17u1rozj"},{"post_id":"cjhx88ujz0005mz5ni42t7gp4","tag_id":"cjhx88uk9000gmz5nf5ye4tk2","_id":"cjhx88uka000jmz5neehgc689"},{"post_id":"cjhx88uk10008mz5nnbivh5n0","tag_id":"cjhx88uk9000imz5n4w8grm4d","_id":"cjhx88ukb000lmz5nge6j4tx5"},{"post_id":"cjhx88uk30009mz5nh4xg55iv","tag_id":"cjhx88uk9000gmz5nf5ye4tk2","_id":"cjhx88ukc000nmz5nnwrdbbhg"},{"post_id":"cjhx88uk5000bmz5n839gbu22","tag_id":"cjhx88ukc000mmz5nl0vq4y5g","_id":"cjhx88ukd000pmz5nqfww2ppi"},{"post_id":"cjhx88ujr0001mz5ncoaz352p","tag_id":"cjhx8fmqr00000n5njd48el5f","_id":"cjhx8fmqz00020n5nrjh4wohd"},{"post_id":"cjhx88ujr0001mz5ncoaz352p","tag_id":"cjhx8fmqz00010n5n4gxvrnin","_id":"cjhx8fmr000030n5nnxg0vsbh"},{"post_id":"cjhx88uk6000dmz5n6rrou941","tag_id":"cjhx8grqt0000445nya1kqz1w","_id":"cjhx8grqy0002445ny824qept"},{"post_id":"cjhx88uk6000dmz5n6rrou941","tag_id":"cjhx88uk9000imz5n4w8grm4d","_id":"cjhx8grqy0003445nljmvmejb"},{"post_id":"cjhx88uk6000dmz5n6rrou941","tag_id":"cjhx8grqy0001445nj7ivxbm3","_id":"cjhx8grqz0004445n0lqp2rh4"}],"Tag":[{"name":"shell, scripting","_id":"cjhx88uju0002mz5n9zygsozh"},{"name":"linux, kernel, vermagic","_id":"cjhx88uk00006mz5nysbamu3e"},{"name":"ios, openvpn","_id":"cjhx88uk4000amz5nilris61b"},{"name":"esp8266","_id":"cjhx88uk7000emz5n2a7oa63j"},{"name":"ros","_id":"cjhx88uk9000gmz5nf5ye4tk2"},{"name":"freebsd","_id":"cjhx88uk9000imz5n4w8grm4d"},{"name":"ios","_id":"cjhx88ukc000mmz5nl0vq4y5g"},{"name":"ezjail, freebsd","_id":"cjhx88ukd000omz5ntafz5k27"},{"name":"linux kernel vermagic","_id":"cjhx8e3900000x95nj58uci1w"},{"name":"linux","_id":"cjhx8fmqr00000n5njd48el5f"},{"name":"kernel","_id":"cjhx8fmqz00010n5n4gxvrnin"},{"name":"ezjail","_id":"cjhx8grqt0000445nya1kqz1w"},{"name":"networking","_id":"cjhx8grqy0001445nj7ivxbm3"}]}}