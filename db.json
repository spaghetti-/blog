{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus-dark/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cactus-dark/LICENSE","hash":"4d5f5f360a18c68f0fd1897bdb1eb1210c2893e3","modified":1500194150000},{"_id":"themes/cactus-dark/README.md","hash":"f9665d6818f0f6b29bf11089507b9e8a5a1571da","modified":1500194150000},{"_id":"themes/cactus-dark/_config.yml","hash":"068e43199e3f4683355605740787d72e4bede808","modified":1500194150000},{"_id":"source/_posts/4chan-parallel-image-downloader.md","hash":"ef3f926668465ca574628a9c3e325240bf2b5711","modified":1500194150000},{"_id":"source/_posts/finding-duplicate-records-across-databases.md","hash":"0675ea3ff5a9033b181900b61d8e11d7c5248b48","modified":1500194150000},{"_id":"source/_posts/iOS-openvpn-connect-read-length-inconsistency.md","hash":"c14a7959ad94e79197ea454539602891e682c31f","modified":1509278107000},{"_id":"source/_posts/notes-on-flashing-the-esp8266-esp-01s.md","hash":"dc2d23ceaf4babde0143b67f705077cfc059d729","modified":1500194150000},{"_id":"source/_posts/ros-kinetic-macos-may17.md","hash":"7dac24e44922a672e8950617c746e10d8a804c33","modified":1500194150000},{"_id":"source/_posts/sane-sshd-ipfw-defaults.md","hash":"bbb9fa8af43adf096208d8babae03c14cbba5f93","modified":1500194150000},{"_id":"source/_posts/say-no-to-catkin-make.md","hash":"b680e0f9e5c3ed960710a0e42de33647ec49b5e6","modified":1500194150000},{"_id":"source/_posts/whatsapp-chat-backup-getting-stuck.md","hash":"6251a6e99d629ef96cb666d3ae15aa06b68b1bfb","modified":1509278474000},{"_id":"themes/cactus-dark/layout/archive.ejs","hash":"f9c0434f023bdf2858aa8447137463c3224814be","modified":1500194150000},{"_id":"themes/cactus-dark/layout/index.ejs","hash":"c452d363f2c630c55f65bc9ef94ceae36c9c0017","modified":1500194150000},{"_id":"themes/cactus-dark/layout/layout.ejs","hash":"d34f468113a3e3377409fa21f88fef3462a57f00","modified":1500194150000},{"_id":"themes/cactus-dark/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1500194150000},{"_id":"themes/cactus-dark/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1500194150000},{"_id":"themes/cactus-dark/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1500194150000},{"_id":"themes/cactus-dark/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/head.ejs","hash":"5b6f73a4fb96edde3005f90063509bf851714f72","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/scripts.ejs","hash":"264e49c76744a2ce5be4cd69910cab8e0f517eda","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_extend.styl","hash":"faca25132d55e8989d1c1d638e55d1e97de3c561","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_variables.styl","hash":"80345f77f0e601669047cbb3c44491720c3b5c13","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/style.styl","hash":"fbe1574bfa9b830345f95c50de1e4e2af0eed9c2","modified":1500194150000},{"_id":"themes/cactus-dark/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1500194150000},{"_id":"themes/cactus-dark/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1500194150000},{"_id":"themes/cactus-dark/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1500194150000},{"_id":"themes/cactus-dark/source/images/logo.png","hash":"199750f3a39251ca97d36ed8317d88dfdc2dfe66","modified":1500194150000},{"_id":"themes/cactus-dark/source/js/main.js","hash":"84de9c1a8a4a82b9446163c47b89937f44a7dee0","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1500194150000},{"_id":"themes/cactus-dark/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/article.styl","hash":"202b775a966d7bc35bf5adc693b62463dec106bb","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/header.styl","hash":"63707d9103a283147ca222fd6f8ff9bffbffe427","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/index.styl","hash":"cf43702450ea1e5617541501886982a394cff8ec","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_desktop.styl","hash":"969d849434d3fc519629e5de001d9a091e7584ec","modified":1500194150000},{"_id":"themes/cactus-dark/source/css/_partial/post/actions_mobile.styl","hash":"5911f4674eb90339c3d2db810f9c22a7fb65584e","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1500194150000},{"_id":"themes/cactus-dark/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1500194150000},{"_id":"public/2017/07/04/notes-on-flashing-the-esp8266-esp-01s/index.html","hash":"ec6a2c41ac1fa627ad889c70db93c97939754017","modified":1509278488557},{"_id":"public/2017/05/09/ros-kinetic-macos-may17/index.html","hash":"7904fb76449c9ec46bb6e74099a7c5923af61d1d","modified":1509278488571},{"_id":"public/2017/03/23/finding-duplicate-records-across-databases/index.html","hash":"1392d951054f80758c1a83d93dc790a80fd67056","modified":1509278488572},{"_id":"public/2017/03/09/sane-sshd-ipfw-defaults/index.html","hash":"944163e888ea346de344a86fd6815ed90bf4534a","modified":1509278488572},{"_id":"public/2017/01/19/say-no-to-catkin-make/index.html","hash":"1811f198622e5104b9ada5ba5e625b48b2c20d29","modified":1509278488572},{"_id":"public/2017/01/16/4chan-parallel-image-downloader/index.html","hash":"94146e40b01e8a398f588283dfdb8dbc470b4dbe","modified":1509278488572},{"_id":"public/archives/index.html","hash":"897102de96e12d0be256740b795dd1b3b96f818a","modified":1509278488573},{"_id":"public/archives/2017/index.html","hash":"010803cd11ec974511a436f7562d7f07ad0b654c","modified":1509278488573},{"_id":"public/archives/2017/01/index.html","hash":"431a9063757ca775b41c19750df118121872d5dc","modified":1509278488573},{"_id":"public/archives/2017/03/index.html","hash":"ab79385483245eefc7898b379eb5f2bac2b4de27","modified":1509278488573},{"_id":"public/archives/2017/05/index.html","hash":"3ea6f0b08d81145f2e7cb4a091aaa22d6bc02ac3","modified":1509278488574},{"_id":"public/archives/2017/07/index.html","hash":"7d6117d69d4c30194df8d451a005b937b673ff4d","modified":1509278488574},{"_id":"public/index.html","hash":"7e2af74b2fdc0483e27c12bc88205781f5dff0bd","modified":1509278488574},{"_id":"public/tags/shell-scripting/index.html","hash":"4be7e51f9727cfaa920e2c58157d7e29fd1fce8e","modified":1509278488575},{"_id":"public/tags/postgresql/index.html","hash":"e8e75affd37c39f82f7444d76967f9a2502f8ae7","modified":1509278488575},{"_id":"public/tags/esp8266/index.html","hash":"0bd8d98dbcd1c89d4f36f04dea709a1d5e65c048","modified":1509278488575},{"_id":"public/tags/ros/index.html","hash":"a2c73033b09a1ee0bd63837756438257f85aab5b","modified":1509278488575},{"_id":"public/tags/freebsd/index.html","hash":"b3fe8eafe90630e4515951f98bda3139f99be36f","modified":1509278488575},{"_id":"public/2017/10/29/whatsapp-chat-backup-getting-stuck/index.html","hash":"011dfb876bac0bebf45e99fba91b89564f66855b","modified":1509278488577},{"_id":"public/2017/10/29/iOS-openvpn-connect-read-length-inconsistency/index.html","hash":"11173c55b0a591126f193c4d3eb44ec91986e1bd","modified":1509278488577},{"_id":"public/archives/2017/10/index.html","hash":"10d7be113a14a114584115c5f95af4e8d56ac2b7","modified":1509278488577},{"_id":"public/tags/ios-openvpn/index.html","hash":"f65fc4676753340b387ff374694d393d82ca1de1","modified":1509278488577},{"_id":"public/tags/ios/index.html","hash":"d0d03fea697c446e93fda3033ba5140285aadebe","modified":1509278488578}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Simple shell function to download images from 4chan threads in parallel","date":"2017-01-15T21:17:51.000Z","author":"alex","_content":"\nThis is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.\n\nIt uses `xargs` to dispatch downloads to threads and uses only commonly used unix tools. If we replace the `\\d` regex with `[0-9]` it'll work with plain `grep` without relying on PCRE.\n\n```sh\nfunction 4get() {\n  curl -k -s $1 | egrep -o \\\n    \"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\" | \\\n    sed 's/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/' | uniq | \\\n    xargs -n 1 -P 12 curl -# -O\n}\n```\n\nThe script can also be found on [gist](https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb).\n","source":"_posts/4chan-parallel-image-downloader.md","raw":"---\ntitle: Simple shell function to download images from 4chan threads in parallel\ndate: 2017-01-16 05:17:51\nauthor: alex\ntags: shell, scripting\n---\n\nThis is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.\n\nIt uses `xargs` to dispatch downloads to threads and uses only commonly used unix tools. If we replace the `\\d` regex with `[0-9]` it'll work with plain `grep` without relying on PCRE.\n\n```sh\nfunction 4get() {\n  curl -k -s $1 | egrep -o \\\n    \"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\" | \\\n    sed 's/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/' | uniq | \\\n    xargs -n 1 -P 12 curl -# -O\n}\n```\n\nThe script can also be found on [gist](https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb).\n","slug":"4chan-parallel-image-downloader","published":1,"updated":"2017-07-16T08:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpp0000y1b2kf8lw372","content":"<p>This is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.</p>\n<p>It uses <code>xargs</code> to dispatch downloads to threads and uses only commonly used unix tools. If we replace the <code>\\d</code> regex with <code>[0-9]</code> it’ll work with plain <code>grep</code> without relying on PCRE.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">4get</span></span>() &#123;</div><div class=\"line\">  curl -k -s <span class=\"variable\">$1</span> | egrep -o \\</div><div class=\"line\">    <span class=\"string\">\"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\"</span> | \\</div><div class=\"line\">    sed <span class=\"string\">'s/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/'</span> | uniq | \\</div><div class=\"line\">    xargs -n 1 -P 12 curl -<span class=\"comment\"># -O</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The script can also be found on <a href=\"https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb\" target=\"_blank\" rel=\"external\">gist</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.</p>\n<p>It uses <code>xargs</code> to dispatch downloads to threads and uses only commonly used unix tools. If we replace the <code>\\d</code> regex with <code>[0-9]</code> it’ll work with plain <code>grep</code> without relying on PCRE.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">4get</span></span>() &#123;</div><div class=\"line\">  curl -k -s <span class=\"variable\">$1</span> | egrep -o \\</div><div class=\"line\">    <span class=\"string\">\"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\"</span> | \\</div><div class=\"line\">    sed <span class=\"string\">'s/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/'</span> | uniq | \\</div><div class=\"line\">    xargs -n 1 -P 12 curl -<span class=\"comment\"># -O</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The script can also be found on <a href=\"https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb\" target=\"_blank\" rel=\"external\">gist</a>.</p>\n"},{"title":"Finding duplicate records across different databases","date":"2017-03-23T02:31:13.000Z","author":"alex","_content":"\nRecently a BI database that was produced via an ELT showed duplicate records so\nI needed to diff the tables. A friend suggested using redis to diff the ids so\nI went with it. We need the `redis-cli` utility for this.\n\nThe fun part is doing it directly from shell.\n\nGenerating two sets[0]:\n\n```bash\npsql -h proddb.rds.amazonaws.com -U normuser -d db -c \\\n       'select id from table;' | tail -n +3 | ghead -n -2 \\\n       | xargs | sed 's/^/sadd prod /g' | redis-cli\n\npsql -h eltdb.rds.amazonaws.com -U normuser -d db -c \\\n       'select id from table;' | tail -n +3 | ghead -n -2 \\\n       | xargs | sed 's/^/sadd elt /g' | redis-cli\n```\n\nI've found that this is reasonably fast without constructing raw redis protocol\nfor inserts via `redis-cli --pipe`.\n\nNow we can generate a list of duplicate ids by doing\n\n```bash\nredis-cli --raw sdiff elt prod | xargs | sed 's/ /,/g'\n```\n\nThen we can find the records by using the output from the above command like so\n\n```sql\nSELECT data FROM table WHERE id = ANY(ARRAY[1, 2, 3, ...]);\n```\n\n\n[0] `ghead` is installed via `brew install coreutils` on MacOS because BSD `head`\ndoes not support negative arguments\n","source":"_posts/finding-duplicate-records-across-databases.md","raw":"---\ntitle: Finding duplicate records across different databases\ndate: 2017-03-23 10:31:13\ntags: postgresql\nauthor: alex\n---\n\nRecently a BI database that was produced via an ELT showed duplicate records so\nI needed to diff the tables. A friend suggested using redis to diff the ids so\nI went with it. We need the `redis-cli` utility for this.\n\nThe fun part is doing it directly from shell.\n\nGenerating two sets[0]:\n\n```bash\npsql -h proddb.rds.amazonaws.com -U normuser -d db -c \\\n       'select id from table;' | tail -n +3 | ghead -n -2 \\\n       | xargs | sed 's/^/sadd prod /g' | redis-cli\n\npsql -h eltdb.rds.amazonaws.com -U normuser -d db -c \\\n       'select id from table;' | tail -n +3 | ghead -n -2 \\\n       | xargs | sed 's/^/sadd elt /g' | redis-cli\n```\n\nI've found that this is reasonably fast without constructing raw redis protocol\nfor inserts via `redis-cli --pipe`.\n\nNow we can generate a list of duplicate ids by doing\n\n```bash\nredis-cli --raw sdiff elt prod | xargs | sed 's/ /,/g'\n```\n\nThen we can find the records by using the output from the above command like so\n\n```sql\nSELECT data FROM table WHERE id = ANY(ARRAY[1, 2, 3, ...]);\n```\n\n\n[0] `ghead` is installed via `brew install coreutils` on MacOS because BSD `head`\ndoes not support negative arguments\n","slug":"finding-duplicate-records-across-databases","published":1,"updated":"2017-07-16T08:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpt0001y1b2diy71gw3","content":"<p>Recently a BI database that was produced via an ELT showed duplicate records so\nI needed to diff the tables. A friend suggested using redis to diff the ids so\nI went with it. We need the <code>redis-cli</code> utility for this.</p>\n<p>The fun part is doing it directly from shell.</p>\n<p>Generating two sets[0]:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">psql -h proddb.rds.amazonaws.com -U normuser -d db -c \\</div><div class=\"line\">       <span class=\"string\">'select id from table;'</span> | tail -n +3 | ghead -n -2 \\</div><div class=\"line\">       | xargs | sed <span class=\"string\">'s/^/sadd prod /g'</span> | redis-cli</div><div class=\"line\"></div><div class=\"line\">psql -h eltdb.rds.amazonaws.com -U normuser -d db -c \\</div><div class=\"line\">       <span class=\"string\">'select id from table;'</span> | tail -n +3 | ghead -n -2 \\</div><div class=\"line\">       | xargs | sed <span class=\"string\">'s/^/sadd elt /g'</span> | redis-cli</div></pre></td></tr></table></figure>\n<p>I’ve found that this is reasonably fast without constructing raw redis protocol\nfor inserts via <code>redis-cli --pipe</code>.</p>\n<p>Now we can generate a list of duplicate ids by doing</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-cli --raw sdiff elt prod | xargs | sed <span class=\"string\">'s/ /,/g'</span></div></pre></td></tr></table></figure>\n<p>Then we can find the records by using the output from the above command like so</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">data</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"keyword\">ANY</span>(<span class=\"built_in\">ARRAY</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ...]);</div></pre></td></tr></table></figure>\n<p>[0] <code>ghead</code> is installed via <code>brew install coreutils</code> on MacOS because BSD <code>head</code>\ndoes not support negative arguments</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently a BI database that was produced via an ELT showed duplicate records so\nI needed to diff the tables. A friend suggested using redis to diff the ids so\nI went with it. We need the <code>redis-cli</code> utility for this.</p>\n<p>The fun part is doing it directly from shell.</p>\n<p>Generating two sets[0]:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">psql -h proddb.rds.amazonaws.com -U normuser -d db -c \\</div><div class=\"line\">       <span class=\"string\">'select id from table;'</span> | tail -n +3 | ghead -n -2 \\</div><div class=\"line\">       | xargs | sed <span class=\"string\">'s/^/sadd prod /g'</span> | redis-cli</div><div class=\"line\"></div><div class=\"line\">psql -h eltdb.rds.amazonaws.com -U normuser -d db -c \\</div><div class=\"line\">       <span class=\"string\">'select id from table;'</span> | tail -n +3 | ghead -n -2 \\</div><div class=\"line\">       | xargs | sed <span class=\"string\">'s/^/sadd elt /g'</span> | redis-cli</div></pre></td></tr></table></figure>\n<p>I’ve found that this is reasonably fast without constructing raw redis protocol\nfor inserts via <code>redis-cli --pipe</code>.</p>\n<p>Now we can generate a list of duplicate ids by doing</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis-cli --raw sdiff elt prod | xargs | sed <span class=\"string\">'s/ /,/g'</span></div></pre></td></tr></table></figure>\n<p>Then we can find the records by using the output from the above command like so</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">data</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"keyword\">ANY</span>(<span class=\"built_in\">ARRAY</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, ...]);</div></pre></td></tr></table></figure>\n<p>[0] <code>ghead</code> is installed via <code>brew install coreutils</code> on MacOS because BSD <code>head</code>\ndoes not support negative arguments</p>\n"},{"title":"iOS OpenVPN Connect Error - read length inconsistency","date":"2017-10-29T11:46:31.000Z","_content":"\nIf you've had the same error as what's described \n[here](https://forums.openvpn.net/viewtopic.php?t=18197), then it just means\nthat you have to insert the given key files inline into the configuration.\n\nThe error usually gets cut off as well in portrait mode so it looks like this:\n\n```\nProfile error : read length inconsistency: /var/mobile..\n```\n\nUsually with Tunnelblick you just bundle the `ca.crt`, `client.key` and\n`client.crt` into a folder and rename it as `server_name.tblk` but that will not\nwork for OpenVPN connect.\n\nInstead do this\n\n```\n#ca ca.crt\n<ca>\n-----BEGIN CERTIFICATE-----\n.\n.\n</ca>\n```\n\nAnd so on.\n\n\n","source":"_posts/iOS-openvpn-connect-read-length-inconsistency.md","raw":"---\ntitle: iOS OpenVPN Connect Error - read length inconsistency\ndate: 2017-10-29 19:46:31\ntags: ios, openvpn\n---\n\nIf you've had the same error as what's described \n[here](https://forums.openvpn.net/viewtopic.php?t=18197), then it just means\nthat you have to insert the given key files inline into the configuration.\n\nThe error usually gets cut off as well in portrait mode so it looks like this:\n\n```\nProfile error : read length inconsistency: /var/mobile..\n```\n\nUsually with Tunnelblick you just bundle the `ca.crt`, `client.key` and\n`client.crt` into a folder and rename it as `server_name.tblk` but that will not\nwork for OpenVPN connect.\n\nInstead do this\n\n```\n#ca ca.crt\n<ca>\n-----BEGIN CERTIFICATE-----\n.\n.\n</ca>\n```\n\nAnd so on.\n\n\n","slug":"iOS-openvpn-connect-read-length-inconsistency","published":1,"updated":"2017-10-29T11:55:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpv0003y1b22xmrj831","content":"<p>If you’ve had the same error as what’s described \n<a href=\"https://forums.openvpn.net/viewtopic.php?t=18197\" target=\"_blank\" rel=\"external\">here</a>, then it just means\nthat you have to insert the given key files inline into the configuration.</p>\n<p>The error usually gets cut off as well in portrait mode so it looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Profile error : read length inconsistency: /var/mobile..</div></pre></td></tr></table></figure>\n<p>Usually with Tunnelblick you just bundle the <code>ca.crt</code>, <code>client.key</code> and\n<code>client.crt</code> into a folder and rename it as <code>server_name.tblk</code> but that will not\nwork for OpenVPN connect.</p>\n<p>Instead do this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ca ca.crt</div><div class=\"line\">&lt;ca&gt;</div><div class=\"line\">-----BEGIN CERTIFICATE-----</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">&lt;/ca&gt;</div></pre></td></tr></table></figure>\n<p>And so on.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you’ve had the same error as what’s described \n<a href=\"https://forums.openvpn.net/viewtopic.php?t=18197\" target=\"_blank\" rel=\"external\">here</a>, then it just means\nthat you have to insert the given key files inline into the configuration.</p>\n<p>The error usually gets cut off as well in portrait mode so it looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Profile error : read length inconsistency: /var/mobile..</div></pre></td></tr></table></figure>\n<p>Usually with Tunnelblick you just bundle the <code>ca.crt</code>, <code>client.key</code> and\n<code>client.crt</code> into a folder and rename it as <code>server_name.tblk</code> but that will not\nwork for OpenVPN connect.</p>\n<p>Instead do this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#ca ca.crt</div><div class=\"line\">&lt;ca&gt;</div><div class=\"line\">-----BEGIN CERTIFICATE-----</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">&lt;/ca&gt;</div></pre></td></tr></table></figure>\n<p>And so on.</p>\n"},{"title":"Notes on flashing the ESP8266 wifi module (ESP-01S)","date":"2017-07-03T22:10:36.000Z","_content":"\nWriting this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout\n\n```\nTXD <-> TX (I suspect wrong labelling)\nRXD <-> RX\nVCC <-> 3v3\nGND <-> GND\n        IO0 pulled low\n        IO2 pulled high\n```\n\nKeep the reset pin connected to a wire for easy resetting. \n\nInstall `esptool.py` via `pip install esptool` and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.\n\n```\nesptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac\n```\n\nI flashed v2.1.0 of the NON OS SDK which can be obtained\n[here](https://github.com/espressif/ESP8266_NONOS_SDK/releases). \n\nFlash details\n\n```\nboot_v1.7.bin @ 0x0\nat\\512+512\\user1.1024.new.2.bin @ 0x01\nesp_init_data_default.bin 0xfc000\nblank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000\n```\n\nSPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.\n\nThe firmware sets default baudrate to `1152000`. This was confusing for me because I'm\nused to working with serial devices and I just assumed it was `115200` (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing\n\n```\nAT #for testing\nAT+GMR #for testing\nAT+UART_DEF=9600,8,1,0,0\n```\n\nNow you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so\n\n```\nAT^M^J\n```\n\n\n","source":"_posts/notes-on-flashing-the-esp8266-esp-01s.md","raw":"---\ntitle: Notes on flashing the ESP8266 wifi module (ESP-01S)\ndate: 2017-07-04 06:10:36\ntags: esp8266\n---\n\nWriting this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout\n\n```\nTXD <-> TX (I suspect wrong labelling)\nRXD <-> RX\nVCC <-> 3v3\nGND <-> GND\n        IO0 pulled low\n        IO2 pulled high\n```\n\nKeep the reset pin connected to a wire for easy resetting. \n\nInstall `esptool.py` via `pip install esptool` and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.\n\n```\nesptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac\n```\n\nI flashed v2.1.0 of the NON OS SDK which can be obtained\n[here](https://github.com/espressif/ESP8266_NONOS_SDK/releases). \n\nFlash details\n\n```\nboot_v1.7.bin @ 0x0\nat\\512+512\\user1.1024.new.2.bin @ 0x01\nesp_init_data_default.bin 0xfc000\nblank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000\n```\n\nSPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.\n\nThe firmware sets default baudrate to `1152000`. This was confusing for me because I'm\nused to working with serial devices and I just assumed it was `115200` (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing\n\n```\nAT #for testing\nAT+GMR #for testing\nAT+UART_DEF=9600,8,1,0,0\n```\n\nNow you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so\n\n```\nAT^M^J\n```\n\n\n","slug":"notes-on-flashing-the-esp8266-esp-01s","published":1,"updated":"2017-07-16T08:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpw0004y1b2whygnpr7","content":"<p>Writing this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">TXD &lt;-&gt; TX (I suspect wrong labelling)</div><div class=\"line\">RXD &lt;-&gt; RX</div><div class=\"line\">VCC &lt;-&gt; 3v3</div><div class=\"line\">GND &lt;-&gt; GND</div><div class=\"line\">        IO0 pulled low</div><div class=\"line\">        IO2 pulled high</div></pre></td></tr></table></figure>\n<p>Keep the reset pin connected to a wire for easy resetting. </p>\n<p>Install <code>esptool.py</code> via <code>pip install esptool</code> and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">esptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac</div></pre></td></tr></table></figure>\n<p>I flashed v2.1.0 of the NON OS SDK which can be obtained\n<a href=\"https://github.com/espressif/ESP8266_NONOS_SDK/releases\" target=\"_blank\" rel=\"external\">here</a>. </p>\n<p>Flash details</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">boot_v1.7.bin @ 0x0</div><div class=\"line\">at\\512+512\\user1.1024.new.2.bin @ 0x01</div><div class=\"line\">esp_init_data_default.bin 0xfc000</div><div class=\"line\">blank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000</div></pre></td></tr></table></figure>\n<p>SPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.</p>\n<p>The firmware sets default baudrate to <code>1152000</code>. This was confusing for me because I’m\nused to working with serial devices and I just assumed it was <code>115200</code> (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">AT #for testing</div><div class=\"line\">AT+GMR #for testing</div><div class=\"line\">AT+UART_DEF=9600,8,1,0,0</div></pre></td></tr></table></figure>\n<p>Now you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AT^M^J</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Writing this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">TXD &lt;-&gt; TX (I suspect wrong labelling)</div><div class=\"line\">RXD &lt;-&gt; RX</div><div class=\"line\">VCC &lt;-&gt; 3v3</div><div class=\"line\">GND &lt;-&gt; GND</div><div class=\"line\">        IO0 pulled low</div><div class=\"line\">        IO2 pulled high</div></pre></td></tr></table></figure>\n<p>Keep the reset pin connected to a wire for easy resetting. </p>\n<p>Install <code>esptool.py</code> via <code>pip install esptool</code> and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">esptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac</div></pre></td></tr></table></figure>\n<p>I flashed v2.1.0 of the NON OS SDK which can be obtained\n<a href=\"https://github.com/espressif/ESP8266_NONOS_SDK/releases\" target=\"_blank\" rel=\"external\">here</a>. </p>\n<p>Flash details</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">boot_v1.7.bin @ 0x0</div><div class=\"line\">at\\512+512\\user1.1024.new.2.bin @ 0x01</div><div class=\"line\">esp_init_data_default.bin 0xfc000</div><div class=\"line\">blank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000</div></pre></td></tr></table></figure>\n<p>SPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.</p>\n<p>The firmware sets default baudrate to <code>1152000</code>. This was confusing for me because I’m\nused to working with serial devices and I just assumed it was <code>115200</code> (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">AT #for testing</div><div class=\"line\">AT+GMR #for testing</div><div class=\"line\">AT+UART_DEF=9600,8,1,0,0</div></pre></td></tr></table></figure>\n<p>Now you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AT^M^J</div></pre></td></tr></table></figure>\n"},{"title":"ROS Kinetic Installation on MacOS (Homebrew, as of May '17)","date":"2017-05-09T07:05:20.000Z","_content":"\nEvery now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an `eselect`esque way (it's a tool found on Gentoo Linux for\nmanaging versions via symlinks).\n\n```\nsudo mkdir /opt/kinetic\nsudo mkdir /opt/jade\nsudo chown -R `whoami`:staff /opt/kinetic /opt/jade\nln -s /opt/kinetic/install /opt/ros/kinetic # or jade\n```\n\nOpenCV3\n-------\n\nHomebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with `--HEAD`:\n\n```\nbrew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\\n  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD\n```\n\nNote: takes around 20 minutes to compile.\n\nAFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n`cv_bridge` do \n\n```\nbrew ln opencv3 --force\n```\n\nThis may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.\n\nQt\n--\n\n```\necho 'export PATH=\"/usr/local/opt/qt/bin:$PATH\"' >> ~/.zshrc\n```\n\nOther than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it's ever been really.\n\n","source":"_posts/ros-kinetic-macos-may17.md","raw":"---\ntitle: ROS Kinetic Installation on MacOS (Homebrew, as of May '17)\ndate: 2017-05-09 15:05:20\ntags: ros\n---\n\nEvery now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an `eselect`esque way (it's a tool found on Gentoo Linux for\nmanaging versions via symlinks).\n\n```\nsudo mkdir /opt/kinetic\nsudo mkdir /opt/jade\nsudo chown -R `whoami`:staff /opt/kinetic /opt/jade\nln -s /opt/kinetic/install /opt/ros/kinetic # or jade\n```\n\nOpenCV3\n-------\n\nHomebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with `--HEAD`:\n\n```\nbrew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\\n  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD\n```\n\nNote: takes around 20 minutes to compile.\n\nAFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n`cv_bridge` do \n\n```\nbrew ln opencv3 --force\n```\n\nThis may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.\n\nQt\n--\n\n```\necho 'export PATH=\"/usr/local/opt/qt/bin:$PATH\"' >> ~/.zshrc\n```\n\nOther than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it's ever been really.\n\n","slug":"ros-kinetic-macos-may17","published":1,"updated":"2017-07-16T08:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpw0005y1b2op291mkf","content":"<p>Every now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an <code>eselect</code>esque way (it’s a tool found on Gentoo Linux for\nmanaging versions via symlinks).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /opt/kinetic</div><div class=\"line\">sudo mkdir /opt/jade</div><div class=\"line\">sudo chown -R `whoami`:staff /opt/kinetic /opt/jade</div><div class=\"line\">ln -s /opt/kinetic/install /opt/ros/kinetic # or jade</div></pre></td></tr></table></figure>\n<h2 id=\"OpenCV3\"><a href=\"#OpenCV3\" class=\"headerlink\" title=\"OpenCV3\"></a>OpenCV3</h2><p>Homebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with <code>--HEAD</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\</div><div class=\"line\">  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD</div></pre></td></tr></table></figure>\n<p>Note: takes around 20 minutes to compile.</p>\n<p>AFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n<code>cv_bridge</code> do </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew ln opencv3 --force</div></pre></td></tr></table></figure>\n<p>This may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.</p>\n<h2 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &apos;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>\n<p>Other than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it’s ever been really.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Every now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an <code>eselect</code>esque way (it’s a tool found on Gentoo Linux for\nmanaging versions via symlinks).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /opt/kinetic</div><div class=\"line\">sudo mkdir /opt/jade</div><div class=\"line\">sudo chown -R `whoami`:staff /opt/kinetic /opt/jade</div><div class=\"line\">ln -s /opt/kinetic/install /opt/ros/kinetic # or jade</div></pre></td></tr></table></figure>\n<h2 id=\"OpenCV3\"><a href=\"#OpenCV3\" class=\"headerlink\" title=\"OpenCV3\"></a>OpenCV3</h2><p>Homebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with <code>--HEAD</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\</div><div class=\"line\">  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD</div></pre></td></tr></table></figure>\n<p>Note: takes around 20 minutes to compile.</p>\n<p>AFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n<code>cv_bridge</code> do </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew ln opencv3 --force</div></pre></td></tr></table></figure>\n<p>This may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.</p>\n<h2 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &apos;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</div></pre></td></tr></table></figure>\n<p>Other than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it’s ever been really.</p>\n"},{"title":"Say no to catkin_make","date":"2017-01-19T09:03:20.000Z","author":"alex","_content":"`catkin` is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain `catkin_make` to build their workspaces but that is\npretty basic. Please use `catkin`, it is much more powerful and convienient.\n\nFor one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you're building individual packages it can sometimes be useful as it'll\ndetect if your dependencies are out of date and compile them too.\n\nInstall catkin with\n\n```\npip install catkin catkin_tools\n```\n\nTo initialize a workspace (that already has a `src` folder)\n\n```sh\ncatkin init\ncatkin build\n```\n\nThen you can easily set cmake parameters\n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release\n```\n\nor \n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DPYTHON_LIBRARY=$(python -c \"import sys; print sys.prefix\")/lib/libpython2.7.dylib \\\n  -DPYTHON_INCLUDE_DIR=$(python -c \"import sys; print sys.prefix\")/include/python2.7 \\\n  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON\n```\n\nIf you're using homebrewed libraries on MacOS.\n\nTo build a particular package\n\n```sh\ncatkin build pkg\n```\n\nOr blacklist/whitelist with \n\n```sh\ncatkin config (--blacklist|--whitelist) pkg\n```\n\nIf you are building an individual package you can force it to\nbuild only that package by \n\n```sh\ncatkin build pkg --no-deps\n```\n\nVerbosity and job control\n\n```sh\ncatkin build -v -jN\n```\n\n","source":"_posts/say-no-to-catkin-make.md","raw":"---\ntitle: Say no to catkin_make\ndate: 2017-01-19 17:03:20\ntags: ros\nauthor: alex\n---\n`catkin` is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain `catkin_make` to build their workspaces but that is\npretty basic. Please use `catkin`, it is much more powerful and convienient.\n\nFor one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you're building individual packages it can sometimes be useful as it'll\ndetect if your dependencies are out of date and compile them too.\n\nInstall catkin with\n\n```\npip install catkin catkin_tools\n```\n\nTo initialize a workspace (that already has a `src` folder)\n\n```sh\ncatkin init\ncatkin build\n```\n\nThen you can easily set cmake parameters\n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release\n```\n\nor \n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DPYTHON_LIBRARY=$(python -c \"import sys; print sys.prefix\")/lib/libpython2.7.dylib \\\n  -DPYTHON_INCLUDE_DIR=$(python -c \"import sys; print sys.prefix\")/include/python2.7 \\\n  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON\n```\n\nIf you're using homebrewed libraries on MacOS.\n\nTo build a particular package\n\n```sh\ncatkin build pkg\n```\n\nOr blacklist/whitelist with \n\n```sh\ncatkin config (--blacklist|--whitelist) pkg\n```\n\nIf you are building an individual package you can force it to\nbuild only that package by \n\n```sh\ncatkin build pkg --no-deps\n```\n\nVerbosity and job control\n\n```sh\ncatkin build -v -jN\n```\n\n","slug":"say-no-to-catkin-make","published":1,"updated":"2017-07-16T08:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpx0008y1b2plzcst1d","content":"<p><code>catkin</code> is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain <code>catkin_make</code> to build their workspaces but that is\npretty basic. Please use <code>catkin</code>, it is much more powerful and convienient.</p>\n<p>For one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you’re building individual packages it can sometimes be useful as it’ll\ndetect if your dependencies are out of date and compile them too.</p>\n<p>Install catkin with</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install catkin catkin_tools</div></pre></td></tr></table></figure>\n<p>To initialize a workspace (that already has a <code>src</code> folder)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin init</div><div class=\"line\">catkin build</div></pre></td></tr></table></figure>\n<p>Then you can easily set cmake parameters</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</div><div class=\"line\">  -DCMAKE_BUILD_TYPE=Release</div></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</div><div class=\"line\">  -DCMAKE_BUILD_TYPE=Release \\</div><div class=\"line\">  -DPYTHON_LIBRARY=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/lib/libpython2.7.dylib \\</div><div class=\"line\">  -DPYTHON_INCLUDE_DIR=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/include/python2.7 \\</div><div class=\"line\">  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON</div></pre></td></tr></table></figure>\n<p>If you’re using homebrewed libraries on MacOS.</p>\n<p>To build a particular package</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin build pkg</div></pre></td></tr></table></figure>\n<p>Or blacklist/whitelist with </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin config (--blacklist|--whitelist) pkg</div></pre></td></tr></table></figure>\n<p>If you are building an individual package you can force it to\nbuild only that package by </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin build pkg --no-deps</div></pre></td></tr></table></figure>\n<p>Verbosity and job control</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin build -v -jN</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>catkin</code> is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain <code>catkin_make</code> to build their workspaces but that is\npretty basic. Please use <code>catkin</code>, it is much more powerful and convienient.</p>\n<p>For one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you’re building individual packages it can sometimes be useful as it’ll\ndetect if your dependencies are out of date and compile them too.</p>\n<p>Install catkin with</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install catkin catkin_tools</div></pre></td></tr></table></figure>\n<p>To initialize a workspace (that already has a <code>src</code> folder)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin init</div><div class=\"line\">catkin build</div></pre></td></tr></table></figure>\n<p>Then you can easily set cmake parameters</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</div><div class=\"line\">  -DCMAKE_BUILD_TYPE=Release</div></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</div><div class=\"line\">  -DCMAKE_BUILD_TYPE=Release \\</div><div class=\"line\">  -DPYTHON_LIBRARY=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/lib/libpython2.7.dylib \\</div><div class=\"line\">  -DPYTHON_INCLUDE_DIR=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/include/python2.7 \\</div><div class=\"line\">  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON</div></pre></td></tr></table></figure>\n<p>If you’re using homebrewed libraries on MacOS.</p>\n<p>To build a particular package</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin build pkg</div></pre></td></tr></table></figure>\n<p>Or blacklist/whitelist with </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin config (--blacklist|--whitelist) pkg</div></pre></td></tr></table></figure>\n<p>If you are building an individual package you can force it to\nbuild only that package by </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin build pkg --no-deps</div></pre></td></tr></table></figure>\n<p>Verbosity and job control</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">catkin build -v -jN</div></pre></td></tr></table></figure>\n"},{"title":"Bootstrap sane defaults for sshd and ipfw","date":"2017-03-09T09:34:54.000Z","author":"alex","_content":"\nI often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here's a short script\nthat sets up `sshd` as well as initializes the `ipfw` firewall.\n\nFor AWS instances we're better off using VPC with sane security groups to do our\nfirewalling for us.\n\nIt can be run using\n\n```sh\nssh user@host 'sh -s' < script\n```\n\nIt disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. \n\n```sh\n#!/bin/sh\n\nhead -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - > /dev/null 2>&1\n\nif [ $? != 0 ];\nthen\n  echo \"invalid public key found in authorized_keys, exiting..\"\n  exit\nfi\n\ncp /etc/ssh/sshd_config ~/sshd_config.bak\n\nsudo tee /etc/ssh/sshd_config <<EOF\nPort 22\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 2m\nStrictModes yes\nMaxAuthTries 6\nMaxSessions 10\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\nPasswordAuthentication no\nPermitEmptyPasswords no\nSubsystem       sftp    /usr/libexec/sftp-server\nPermitRootLogin no\nEOF\n\nsudo tee -a /etc/rc.conf <<EOF\nfirewall_enable=\"YES\"\nfirewall_quiet=\"YES\"\nfirewall_type=\"workstation\"\nfirewall_myservices=\"22/tcp\"\nfirewall_allowservices=\"any\"\nfirewall_logdeny=\"YES\"\nEOF\n\nsudo service sshd restart\nsudo service ipfw start\n```\n\nA maintained version of this script can be found on\n[gist](https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5).\n\nThe blog syntax highlighter seems to remove newlines from the source.\n","source":"_posts/sane-sshd-ipfw-defaults.md","raw":"---\ntitle: Bootstrap sane defaults for sshd and ipfw\ndate: 2017-03-09 17:34:54\ntags: freebsd\nauthor: alex\n---\n\nI often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here's a short script\nthat sets up `sshd` as well as initializes the `ipfw` firewall.\n\nFor AWS instances we're better off using VPC with sane security groups to do our\nfirewalling for us.\n\nIt can be run using\n\n```sh\nssh user@host 'sh -s' < script\n```\n\nIt disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. \n\n```sh\n#!/bin/sh\n\nhead -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - > /dev/null 2>&1\n\nif [ $? != 0 ];\nthen\n  echo \"invalid public key found in authorized_keys, exiting..\"\n  exit\nfi\n\ncp /etc/ssh/sshd_config ~/sshd_config.bak\n\nsudo tee /etc/ssh/sshd_config <<EOF\nPort 22\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 2m\nStrictModes yes\nMaxAuthTries 6\nMaxSessions 10\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\nPasswordAuthentication no\nPermitEmptyPasswords no\nSubsystem       sftp    /usr/libexec/sftp-server\nPermitRootLogin no\nEOF\n\nsudo tee -a /etc/rc.conf <<EOF\nfirewall_enable=\"YES\"\nfirewall_quiet=\"YES\"\nfirewall_type=\"workstation\"\nfirewall_myservices=\"22/tcp\"\nfirewall_allowservices=\"any\"\nfirewall_logdeny=\"YES\"\nEOF\n\nsudo service sshd restart\nsudo service ipfw start\n```\n\nA maintained version of this script can be found on\n[gist](https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5).\n\nThe blog syntax highlighter seems to remove newlines from the source.\n","slug":"sane-sshd-ipfw-defaults","published":1,"updated":"2017-07-16T08:35:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj9cpejpy0009y1b2lisqiqd2","content":"<p>I often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here’s a short script\nthat sets up <code>sshd</code> as well as initializes the <code>ipfw</code> firewall.</p>\n<p>For AWS instances we’re better off using VPC with sane security groups to do our\nfirewalling for us.</p>\n<p>It can be run using</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh user@host <span class=\"string\">'sh -s'</span> &lt; script</div></pre></td></tr></table></figure>\n<p>It disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\">head -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - &gt; /dev/null 2&gt;&amp;1</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid public key found in authorized_keys, exiting..\"</span></div><div class=\"line\">  <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">cp /etc/ssh/sshd_config ~/sshd_config.bak</div><div class=\"line\"></div><div class=\"line\">sudo tee /etc/ssh/sshd_config &lt;&lt;EOF</div><div class=\"line\">Port 22</div><div class=\"line\">SyslogFacility AUTH</div><div class=\"line\">LogLevel INFO</div><div class=\"line\">LoginGraceTime 2m</div><div class=\"line\">StrictModes yes</div><div class=\"line\">MaxAuthTries 6</div><div class=\"line\">MaxSessions 10</div><div class=\"line\">RSAAuthentication yes</div><div class=\"line\">PubkeyAuthentication yes</div><div class=\"line\">AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</div><div class=\"line\">PasswordAuthentication no</div><div class=\"line\">PermitEmptyPasswords no</div><div class=\"line\">Subsystem       sftp    /usr/libexec/sftp-server</div><div class=\"line\">PermitRootLogin no</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">sudo tee -a /etc/rc.conf &lt;&lt;EOF</div><div class=\"line\">firewall_enable=<span class=\"string\">\"YES\"</span></div><div class=\"line\">firewall_quiet=<span class=\"string\">\"YES\"</span></div><div class=\"line\">firewall_type=<span class=\"string\">\"workstation\"</span></div><div class=\"line\">firewall_myservices=<span class=\"string\">\"22/tcp\"</span></div><div class=\"line\">firewall_allowservices=<span class=\"string\">\"any\"</span></div><div class=\"line\">firewall_logdeny=<span class=\"string\">\"YES\"</span></div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">sudo service sshd restart</div><div class=\"line\">sudo service ipfw start</div></pre></td></tr></table></figure>\n<p>A maintained version of this script can be found on\n<a href=\"https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5\" target=\"_blank\" rel=\"external\">gist</a>.</p>\n<p>The blog syntax highlighter seems to remove newlines from the source.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here’s a short script\nthat sets up <code>sshd</code> as well as initializes the <code>ipfw</code> firewall.</p>\n<p>For AWS instances we’re better off using VPC with sane security groups to do our\nfirewalling for us.</p>\n<p>It can be run using</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh user@host <span class=\"string\">'sh -s'</span> &lt; script</div></pre></td></tr></table></figure>\n<p>It disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\">head -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - &gt; /dev/null 2&gt;&amp;1</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ];</div><div class=\"line\"><span class=\"keyword\">then</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid public key found in authorized_keys, exiting..\"</span></div><div class=\"line\">  <span class=\"built_in\">exit</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">cp /etc/ssh/sshd_config ~/sshd_config.bak</div><div class=\"line\"></div><div class=\"line\">sudo tee /etc/ssh/sshd_config &lt;&lt;EOF</div><div class=\"line\">Port 22</div><div class=\"line\">SyslogFacility AUTH</div><div class=\"line\">LogLevel INFO</div><div class=\"line\">LoginGraceTime 2m</div><div class=\"line\">StrictModes yes</div><div class=\"line\">MaxAuthTries 6</div><div class=\"line\">MaxSessions 10</div><div class=\"line\">RSAAuthentication yes</div><div class=\"line\">PubkeyAuthentication yes</div><div class=\"line\">AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</div><div class=\"line\">PasswordAuthentication no</div><div class=\"line\">PermitEmptyPasswords no</div><div class=\"line\">Subsystem       sftp    /usr/libexec/sftp-server</div><div class=\"line\">PermitRootLogin no</div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">sudo tee -a /etc/rc.conf &lt;&lt;EOF</div><div class=\"line\">firewall_enable=<span class=\"string\">\"YES\"</span></div><div class=\"line\">firewall_quiet=<span class=\"string\">\"YES\"</span></div><div class=\"line\">firewall_type=<span class=\"string\">\"workstation\"</span></div><div class=\"line\">firewall_myservices=<span class=\"string\">\"22/tcp\"</span></div><div class=\"line\">firewall_allowservices=<span class=\"string\">\"any\"</span></div><div class=\"line\">firewall_logdeny=<span class=\"string\">\"YES\"</span></div><div class=\"line\">EOF</div><div class=\"line\"></div><div class=\"line\">sudo service sshd restart</div><div class=\"line\">sudo service ipfw start</div></pre></td></tr></table></figure>\n<p>A maintained version of this script can be found on\n<a href=\"https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5\" target=\"_blank\" rel=\"external\">gist</a>.</p>\n<p>The blog syntax highlighter seems to remove newlines from the source.</p>\n"},{"title":"WhatsApp chat backup getting stuck/no progress","date":"2017-10-29T11:57:45.000Z","_content":"\nSometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.\n\nInstead, head on over to `Settings > iCloud > iCloud Drive` and turn that off.\nIt'll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.\n\nJust turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.\n","source":"_posts/whatsapp-chat-backup-getting-stuck.md","raw":"---\ntitle: WhatsApp chat backup getting stuck/no progress\ndate: 2017-10-29 19:57:45\ntags: ios\n---\n\nSometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.\n\nInstead, head on over to `Settings > iCloud > iCloud Drive` and turn that off.\nIt'll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.\n\nJust turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.\n","slug":"whatsapp-chat-backup-getting-stuck","published":1,"updated":"2017-10-29T12:01:14.000Z","_id":"cj9cpejpz000by1b28tr4cx8s","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Sometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.</p>\n<p>Instead, head on over to <code>Settings &gt; iCloud &gt; iCloud Drive</code> and turn that off.\nIt’ll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.</p>\n<p>Just turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.</p>\n<p>Instead, head on over to <code>Settings &gt; iCloud &gt; iCloud Drive</code> and turn that off.\nIt’ll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.</p>\n<p>Just turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj9cpejpp0000y1b2kf8lw372","tag_id":"cj9cpejpu0002y1b220i1b6wp","_id":"cj9cpejpx0007y1b2u42m6fac"},{"post_id":"cj9cpejpt0001y1b2diy71gw3","tag_id":"cj9cpejpx0006y1b2gaomfcv5","_id":"cj9cpejpz000cy1b2tz826stb"},{"post_id":"cj9cpejpv0003y1b22xmrj831","tag_id":"cj9cpejpz000ay1b2tiruyd1w","_id":"cj9cpejq0000ey1b24n5p3y3n"},{"post_id":"cj9cpejpw0004y1b2whygnpr7","tag_id":"cj9cpejq0000dy1b2z0sbil1e","_id":"cj9cpejq0000gy1b2uj32qnem"},{"post_id":"cj9cpejpw0005y1b2op291mkf","tag_id":"cj9cpejq0000fy1b2a3sni7l1","_id":"cj9cpejq1000iy1b27e683gcn"},{"post_id":"cj9cpejpx0008y1b2plzcst1d","tag_id":"cj9cpejq0000fy1b2a3sni7l1","_id":"cj9cpejq1000ky1b2aidp8syi"},{"post_id":"cj9cpejpy0009y1b2lisqiqd2","tag_id":"cj9cpejq1000jy1b20ouy2fyt","_id":"cj9cpejq2000my1b2lytbjq4x"},{"post_id":"cj9cpejpz000by1b28tr4cx8s","tag_id":"cj9cpejq2000ly1b2l35mj5ir","_id":"cj9cpejq2000ny1b2p26dk2ld"}],"Tag":[{"name":"shell, scripting","_id":"cj9cpejpu0002y1b220i1b6wp"},{"name":"postgresql","_id":"cj9cpejpx0006y1b2gaomfcv5"},{"name":"ios, openvpn","_id":"cj9cpejpz000ay1b2tiruyd1w"},{"name":"esp8266","_id":"cj9cpejq0000dy1b2z0sbil1e"},{"name":"ros","_id":"cj9cpejq0000fy1b2a3sni7l1"},{"name":"freebsd","_id":"cj9cpejq1000jy1b20ouy2fyt"},{"name":"ios","_id":"cj9cpejq2000ly1b2l35mj5ir"}]}}