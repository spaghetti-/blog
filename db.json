{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/4chan-parallel-image-downloader.md","hash":"ef3f926668465ca574628a9c3e325240bf2b5711","modified":1552907903126},{"_id":"source/_posts/.rustcon-beijing.md.swp","hash":"78b245355317df41db766af6b9e4da087e6f44a6","modified":1556206058728},{"_id":"source/_posts/.rustcon-beijing.md.un~","hash":"aafe2dbd9fe278715a03515728f23ee3de76dd54","modified":1556261696498},{"_id":"source/_posts/compiling-a-single-module-linux-kernel.md","hash":"cb50fdc8a4ede25b10ccffcc3df5afef42cb95de","modified":1552907903126},{"_id":"source/_posts/ezjail-and-network-interfaces.md","hash":"fda8397a9c9a90b5a09bec30146756ed9fb53d90","modified":1552907903126},{"_id":"source/_posts/coffee-lake-build-gentoo.md","hash":"25f09cda67dd86f02dcf718c51f92b986dd15b75","modified":1552907903126},{"_id":"source/_posts/rsync-parallel.md","hash":"9756233337fc9ff0eb73e09ca305cf9814799f77","modified":1552907903127},{"_id":"source/_posts/notes-on-flashing-the-esp8266-esp-01s.md","hash":"dc2d23ceaf4babde0143b67f705077cfc059d729","modified":1552907903127},{"_id":"source/_posts/.software-im-opinionated-against.md.un~","hash":"6fb2b031c61cc7399cdf4b0981daafabcb3bad0d","modified":1552965931488},{"_id":"source/_posts/iOS-openvpn-connect-read-length-inconsistency.md","hash":"c14a7959ad94e79197ea454539602891e682c31f","modified":1552907903127},{"_id":"source/_posts/ros-kinetic-macos-may17.md","hash":"7dac24e44922a672e8950617c746e10d8a804c33","modified":1552907903127},{"_id":"source/_posts/migrating-weechat-linux-macos.md","hash":"4b60c65da4739b6d8b8a2ef0b4d031ac2d5543df","modified":1552907903127},{"_id":"source/_posts/say-no-to-catkin-make.md","hash":"b680e0f9e5c3ed960710a0e42de33647ec49b5e6","modified":1552907903128},{"_id":"source/_posts/running-windows-with-pci-passthrough-on-gentoo-linux.md","hash":"8be91f1a37ff435ba3e2fe9acdec9ef0eef548f9","modified":1552907903127},{"_id":"source/_posts/whatsapp-chat-backup-getting-stuck.md","hash":"6251a6e99d629ef96cb666d3ae15aa06b68b1bfb","modified":1552907903128},{"_id":"source/_posts/sane-sshd-ipfw-defaults.md","hash":"bbb9fa8af43adf096208d8babae03c14cbba5f93","modified":1552907903128},{"_id":"themes/cactus/.git","hash":"84ddcc4cdecf4eabff10c773b98d310530a85e78","modified":1556206469960},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1556206470019},{"_id":"themes/cactus/._config.yml.un~","hash":"938e17b0e7cda7f6162d9967cc4f038d34763221","modified":1556260749610},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1556206470019},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1556206470019},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1556206470020},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1556206470021},{"_id":"themes/cactus/README.md","hash":"859d11941c46be4f7b4a6d62297ccbeb4f732bc9","modified":1556206470020},{"_id":"themes/cactus/_config.yml","hash":"34a9080d71d7ddfc3765cf05fca1fa19a2960fa7","modified":1556260749594},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1556206470032},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1556206470021},{"_id":"themes/cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1556206470021},{"_id":"themes/cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1556206470021},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1556206470022},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1556206470022},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1556206470022},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1556206470023},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1556206470023},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1556206470023},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1556206470022},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1556206470023},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1556206470024},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1556206470024},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"ca5582329d9721d58fe8504725108769080e9993","modified":1556206470024},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1556206470025},{"_id":"themes/cactus/layout/.index.ejs.un~","hash":"dba9d1d490dbed2b4a72c9af498cba6764193cc7","modified":1556207630959},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1556206470031},{"_id":"themes/cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1556207630943},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1556206470030},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1556206470031},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1556206470032},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1556206470033},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1556206470033},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1556206470033},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1556206470034},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1556206470026},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1556206470026},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1556206470025},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1556206470026},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1556206470027},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1556206470029},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1556206470030},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1556206470029},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1556206470036},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1556206470036},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1556206470054},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1556206470057},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1556206470058},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1556206470058},{"_id":"themes/cactus/source/css/style.styl","hash":"d9be82f7e7145cde78e04183afc8ff13d6a16059","modified":1556206470058},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1556206470062},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1556206470059},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1556206470062},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1556206470059},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1556206470059},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1556206470027},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1556206470027},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1556206470027},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1556206470028},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1556206470028},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1556206470028},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1556206470029},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1556206470029},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1556206470035},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1556206470034},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1556206470035},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"3a838e272902270bc32481cce5a7308d8ae7be7b","modified":1556260855945},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1556206470054},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"7ff5b6a28dc3f2cd4ebfc4f5351054a18800bf96","modified":1556206470054},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1556206470054},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1556206470055},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1556206470055},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1556206470055},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1556206470056},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1556206470056},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1556206470057},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1556206470057},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1556206470037},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1556206470036},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1556206470037},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1556206470037},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1556206470038},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1556206470038},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1556206470038},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1556206470039},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1556206470039},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1556206470039},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1556206470039},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1556206470039},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1556206470040},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1556206470040},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1556206470040},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1556206470040},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1556206470041},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1556206470041},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1556206470041},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1556206470041},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1556206470041},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1556206470042},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1556206470042},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1556206470042},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1556206470042},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1556206470042},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1556206470043},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1556206470043},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1556206470043},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1556206470043},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1556206470044},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1556206470044},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1556206470044},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1556206470044},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1556206470044},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1556206470045},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1556206470045},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1556206470045},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1556206470045},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1556206470045},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1556206470046},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1556206470046},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1556206470046},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1556206470046},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1556206470046},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1556206470047},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1556206470047},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1556206470047},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1556206470047},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1556206470047},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1556206470048},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1556206470048},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1556206470048},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1556206470048},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1556206470049},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1556206470049},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1556206470049},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1556206470049},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1556206470050},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1556206470049},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1556206470050},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1556206470050},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1556206470051},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1556206470051},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1556206470051},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1556206470051},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1556206470052},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1556206470052},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1556206470052},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1556206470052},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1556206470053},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1556206470053},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1556206470053},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1556206470108},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1556206470108},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1556206470110},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1556206470111},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1556206470113},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1556206470113},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1556206470116},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1556206470117},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1556206470119},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1556206470119},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1556206470121},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1556206470121},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1556206470122},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1556206470061},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1556206470084},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1556206470106},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1556206470107},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1556206470110},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1556206470109},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1556206470112},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1556206470113},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1556206470115},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1556206470116},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1556206470118},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1556206470117},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1556206470120},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1556206470121},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1556206470056},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1556206470056},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1556206470063},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1556206470071},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1556206470072},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1556206470074},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1556206470075},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1556206470075},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1556206470084},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1556206470085},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1556206470083},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1556206470071},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1556206470064},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1556206470082},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1556206470070},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1556206470074},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1556206470076},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1556206470082},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1556206470101},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1556206470104},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1556206470104},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1556206470101},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1556206470098},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1556206470096},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1556206470097},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1556206470102},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1556206470103},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1556206470094},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1556206470105},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1556206470092},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1556206470080},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1556206470068},{"_id":"public/2018/07/25/migrating-weechat-linux-macos/index.html","hash":"dd2ce7156dc01816cb8744e53587aa31b81dffc1","modified":1556260867364},{"_id":"public/2018/07/19/rsync-parallel/index.html","hash":"67abfcb96732337ec7bda367fd4e7919153a436a","modified":1556260867364},{"_id":"public/2018/06/02/compiling-a-single-module-linux-kernel/index.html","hash":"cacf5ee840277599ba0aaf4f9467035cb0ea51a4","modified":1556260867365},{"_id":"public/2018/06/02/ezjail-and-network-interfaces/index.html","hash":"a5e3493e1ef0d3a1ea54cbfc29aaae4ae92cdf95","modified":1556260867365},{"_id":"public/2017/10/29/whatsapp-chat-backup-getting-stuck/index.html","hash":"6555728835e1aad270ddd4c6dc60a2cb3c9cce4d","modified":1556260867365},{"_id":"public/2017/10/29/iOS-openvpn-connect-read-length-inconsistency/index.html","hash":"448419883b11ffeacc40ea6a6b40bbc9bad2020e","modified":1556260867365},{"_id":"public/2017/07/04/notes-on-flashing-the-esp8266-esp-01s/index.html","hash":"c7ffffb3debe841264357aa68f9cc6f385ac7501","modified":1556260867365},{"_id":"public/2017/05/09/ros-kinetic-macos-may17/index.html","hash":"7b9876146693b3bc30c3a110fb4922b59637a23e","modified":1556260867365},{"_id":"public/2017/01/19/say-no-to-catkin-make/index.html","hash":"a2fab01d3a74540e0c2044cf9813cde7e887d021","modified":1556260867365},{"_id":"public/2017/01/16/4chan-parallel-image-downloader/index.html","hash":"d8183a97f63ef8e17e6407e8f4424ca256fa9795","modified":1556260867365},{"_id":"public/archives/index.html","hash":"875344b37e0692f84e57ce342aa9617e7936b191","modified":1556261601457},{"_id":"public/archives/page/2/index.html","hash":"8239afab9f4cfa8333203762bf00be1b35943f69","modified":1556261601457},{"_id":"public/archives/2017/index.html","hash":"64cf6c94abedafe1c4b3c1e8515d530a9ebe5189","modified":1556260867365},{"_id":"public/archives/2017/01/index.html","hash":"3e6b294fb712dfabe68bdd7118d0ff3e1bf2c463","modified":1556260867365},{"_id":"public/archives/2017/03/index.html","hash":"4fe98433bc2c7ac6fd7afcdc518e5fe70c53ef61","modified":1556260867365},{"_id":"public/archives/2017/05/index.html","hash":"04335cfd8085f019d76e31bab599614802ff34c4","modified":1556260867365},{"_id":"public/archives/2017/07/index.html","hash":"86a9c6fb15e1c0c5a436114a390e1b7f3fa0e99e","modified":1556260867365},{"_id":"public/archives/2017/10/index.html","hash":"672a6bd349608703fc2227e73f5ac73b722e228e","modified":1556260867365},{"_id":"public/archives/2018/index.html","hash":"8a12d81618eb12a65741309bee017820fa20857b","modified":1556260867365},{"_id":"public/archives/2018/06/index.html","hash":"a0c9652c6bbd55275f13cf8c0604d743309db665","modified":1556260867365},{"_id":"public/archives/2018/07/index.html","hash":"f2422d6d0f8715324a27b2ad51de0530d13bc50f","modified":1556260867366},{"_id":"public/index.html","hash":"8b6a092da4d7cc3ef7e758e88402cd1e7e7e201e","modified":1556261601475},{"_id":"public/page/2/index.html","hash":"5b51f6a5d7171e451b303d31228e85be75faa6d2","modified":1556261601475},{"_id":"public/tags/shell-scripting/index.html","hash":"6b43b1b3a291a53890ac1c78086f8f4ca2c953b0","modified":1556260867366},{"_id":"public/tags/linux/index.html","hash":"a6dd5fd41cc15c712b9d6286fab459281275e4f3","modified":1556260867366},{"_id":"public/tags/kernel/index.html","hash":"7dd6f92c8de7380ce25db6d3e40d8d4d8f893a2a","modified":1556260867366},{"_id":"public/tags/ezjail/index.html","hash":"bd5f9e9cf62080e5a91e6c9b5ced8474305263e0","modified":1556260867366},{"_id":"public/tags/freebsd/index.html","hash":"9326deb175592dc87c7d1406adb7c7fbbd08488d","modified":1556260867366},{"_id":"public/tags/networking/index.html","hash":"2a41270b8f9827768796ca1198fd5049a483fb46","modified":1556260867366},{"_id":"public/tags/esp8266/index.html","hash":"67d33fe561fb127812632a449f302042a470e0dd","modified":1556260867366},{"_id":"public/tags/ios-openvpn/index.html","hash":"3fd495d7cc9579ffa8028eaada3b1a7d5b1bc41e","modified":1556260867366},{"_id":"public/tags/ros/index.html","hash":"7f64ce25dac8f742dcdd845f504764389a6fb975","modified":1556260867366},{"_id":"public/tags/weechat/index.html","hash":"c2b70ef2f04d47283bf492a8dbd0c49bf71abf03","modified":1556260867366},{"_id":"public/tags/gentoo/index.html","hash":"26f61eb30ad4b9105ff56dbd8cceb1a787db81cd","modified":1556260867366},{"_id":"public/tags/nvidia/index.html","hash":"b192dd8d8f1d92ccae840245a5feee5927ac4e88","modified":1556260867366},{"_id":"public/tags/pci-passthrough/index.html","hash":"7857bb3539a03a8e6b85cfcfc05489f034b84e9f","modified":1556260867366},{"_id":"public/tags/qemu/index.html","hash":"0de77c15668c123ced97df28f97e55c7c0c11d7d","modified":1556260867366},{"_id":"public/tags/ios/index.html","hash":"07381466985682f23cfadf70a75c63bfad9a6201","modified":1556260867366},{"_id":"public/2018/07/27/running-windows-with-pci-passthrough-on-gentoo-linux/index.html","hash":"17d130e1120d1db1eec8cbcf119270b9a495faf2","modified":1556261601475},{"_id":"public/2018/07/16/coffee-lake-build-gentoo/index.html","hash":"df77aef512e996de4940e6eb92f05368fffe20a3","modified":1556260867366},{"_id":"public/2017/03/09/sane-sshd-ipfw-defaults/index.html","hash":"4586c97e798c616b34ef6fa2052b215a7bc3246b","modified":1556260867367},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1556251350085},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1556251350085},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1556251350085},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1556251350085},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1556251350086},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1556251350086},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1556251350086},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1556251350086},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1556251350086},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1556251350087},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1556251350087},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1556251350087},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1556251350327},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1556251350328},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1556251350328},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1556251350328},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1556251350328},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1556251350328},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1556251350329},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1556251350329},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1556251350329},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1556251350330},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1556251350330},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1556251350330},{"_id":"public/css/rtl.css","hash":"c2c2bc4ce311b3129275e009e903088b45e7ed77","modified":1556251350336},{"_id":"public/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1556251350337},{"_id":"public/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1556251350337},{"_id":"public/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1556251350337},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1556251350337},{"_id":"public/css/style.css","hash":"65a6371478e578f261dfabd29cc430ea48e8445e","modified":1556251350337},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1556251350337},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1556251350337},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1556251350343},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1556251350346},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1556251350346},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1556251350357},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1556251350358},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1556251350358},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1556251350358},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1556251350358},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1556251350362},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1556251350362},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1556251350362},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1556251350362},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1556251350363},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1556251350366},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1556251350366},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1556251350366},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1556251350371},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1556251350372},{"_id":"public/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1556251350374},{"_id":"source/_posts/rustcon-beijing.md","hash":"9a7f0015f28805d867f3682ccc6e5e9adfc703b7","modified":1556261696482},{"_id":"public/2019/04/25/rustcon-beijing/index.html","hash":"cd25e64e35e4e26dd3b426480cc58d101898c275","modified":1556261707012},{"_id":"public/archives/2019/index.html","hash":"5c8753f8378c9ec253a174ff27d7b5af08b0c945","modified":1556261601479},{"_id":"public/archives/2019/04/index.html","hash":"01cb772ca80d9c3c8ac6de6a3d0e8950ce89e069","modified":1556261601479},{"_id":"themes/cactus/source/css/_colors/.white.styl.un~","hash":"9d8e63ac078dcdc972ba88fdabdfe18916df3e2b","modified":1556260855954},{"_id":"public/tags/conference/index.html","hash":"5a6b28338e5778ebb515970247d7cb2c6d98f21e","modified":1556261707019},{"_id":"public/tags/rust/index.html","hash":"3ac8fc3c37c796cc302171e0d8fa1f49ae8d4434","modified":1556261707019}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Simple shell function to download images from 4chan threads in parallel","date":"2017-01-15T21:17:51.000Z","author":"alex","_content":"\nThis is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.\n\nIt uses `xargs` to dispatch downloads to threads and uses only commonly used unix tools. If we replace the `\\d` regex with `[0-9]` it'll work with plain `grep` without relying on PCRE.\n\n```sh\nfunction 4get() {\n  curl -k -s $1 | egrep -o \\\n    \"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\" | \\\n    sed 's/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/' | uniq | \\\n    xargs -n 1 -P 12 curl -# -O\n}\n```\n\nThe script can also be found on [gist](https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb).\n","source":"_posts/4chan-parallel-image-downloader.md","raw":"---\ntitle: Simple shell function to download images from 4chan threads in parallel\ndate: 2017-01-16 05:17:51\nauthor: alex\ntags: shell, scripting\n---\n\nThis is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.\n\nIt uses `xargs` to dispatch downloads to threads and uses only commonly used unix tools. If we replace the `\\d` regex with `[0-9]` it'll work with plain `grep` without relying on PCRE.\n\n```sh\nfunction 4get() {\n  curl -k -s $1 | egrep -o \\\n    \"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\" | \\\n    sed 's/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/' | uniq | \\\n    xargs -n 1 -P 12 curl -# -O\n}\n```\n\nThe script can also be found on [gist](https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb).\n","slug":"4chan-parallel-image-downloader","published":1,"updated":"2019-03-18T11:18:23.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjve9s0000gs5nru4ur89b","content":"<p>This is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.</p>\n<p>It uses <code>xargs</code> to dispatch downloads to threads and uses only commonly used unix tools. If we replace the <code>\\d</code> regex with <code>[0-9]</code> it’ll work with plain <code>grep</code> without relying on PCRE.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">4get</span></span>() &#123;</span><br><span class=\"line\">  curl -k -s <span class=\"variable\">$1</span> | egrep -o \\</span><br><span class=\"line\">    <span class=\"string\">\"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\"</span> | \\</span><br><span class=\"line\">    sed <span class=\"string\">'s/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/'</span> | uniq | \\</span><br><span class=\"line\">    xargs -n 1 -P 12 curl -<span class=\"comment\"># -O</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The script can also be found on <a href=\"https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is an old function that I wrote  a while back to download content from 4chan threads. It stopped working recently since they changed the link format. Fixed it up because I was bored.</p>\n<p>It uses <code>xargs</code> to dispatch downloads to threads and uses only commonly used unix tools. If we replace the <code>\\d</code> regex with <code>[0-9]</code> it’ll work with plain <code>grep</code> without relying on PCRE.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">4get</span></span>() &#123;</span><br><span class=\"line\">  curl -k -s <span class=\"variable\">$1</span> | egrep -o \\</span><br><span class=\"line\">    <span class=\"string\">\"\\/\\/is\\d?\\.4chan\\.org\\/gif\\/\\d+\\.(webm|gif|jpeg|jpg|png)\"</span> | \\</span><br><span class=\"line\">    sed <span class=\"string\">'s/^/https:/; s/is\\d?\\.4chan\\.org/i\\.4cdn\\.org/'</span> | uniq | \\</span><br><span class=\"line\">    xargs -n 1 -P 12 curl -<span class=\"comment\"># -O</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The script can also be found on <a href=\"https://gist.github.com/spaghetti-/bd4fcbc6cd3a9b55b02940e78d24fdeb\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n"},{"title":"Compiling a single linux kernel module with matching vermagic","date":"2018-06-02T09:46:46.000Z","_content":"\nI recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.\n\nI set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot'd image (plus since it was totally in memory, if\nanything went wrong it'd be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are \n\n```\nlibncurses-dev\nlibssl\nbuild-essentials\nbc\n```\nAfter booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\n\nThis would install `/usr/src/linux-headers-version` (replace version) with the\nkernel source. Then we need to scp the `Makefile` found in the directory to the\nsame directory on our build box.\n\nWe can then enable `UFS_FS_WRITE=y` in the kernel config. Then call\n\n```\nmake oldconfig\nmake prepare\nmake modules_prepare\nmake M=fs/ufs/ modules\n```\n\nThen the resulting `ufs.ko` can be scp'd back to the server to be loaded. The\nvermagic will match if the same `Makefile` was used across both kernel\ncompilations.\n","source":"_posts/compiling-a-single-module-linux-kernel.md","raw":"---\ntitle: Compiling a single linux kernel module with matching vermagic\ndate: 2018-06-02 17:46:46\ntags: \n  - linux\n  - kernel\n---\n\nI recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.\n\nI set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot'd image (plus since it was totally in memory, if\nanything went wrong it'd be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are \n\n```\nlibncurses-dev\nlibssl\nbuild-essentials\nbc\n```\nAfter booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\n\nThis would install `/usr/src/linux-headers-version` (replace version) with the\nkernel source. Then we need to scp the `Makefile` found in the directory to the\nsame directory on our build box.\n\nWe can then enable `UFS_FS_WRITE=y` in the kernel config. Then call\n\n```\nmake oldconfig\nmake prepare\nmake modules_prepare\nmake M=fs/ufs/ modules\n```\n\nThen the resulting `ufs.ko` can be scp'd back to the server to be loaded. The\nvermagic will match if the same `Makefile` was used across both kernel\ncompilations.\n","slug":"compiling-a-single-module-linux-kernel","published":1,"updated":"2019-03-18T11:18:23.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjve9z0001gs5n3j72f4r8","content":"<p>I recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.</p>\n<p>I set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot’d image (plus since it was totally in memory, if\nanything went wrong it’d be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libncurses-dev</span><br><span class=\"line\">libssl</span><br><span class=\"line\">build-essentials</span><br><span class=\"line\">bc</span><br></pre></td></tr></table></figure>\n<p>After booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>This would install <code>/usr/src/linux-headers-version</code> (replace version) with the\nkernel source. Then we need to scp the <code>Makefile</code> found in the directory to the\nsame directory on our build box.</p>\n<p>We can then enable <code>UFS_FS_WRITE=y</code> in the kernel config. Then call</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make oldconfig</span><br><span class=\"line\">make prepare</span><br><span class=\"line\">make modules_prepare</span><br><span class=\"line\">make M=fs/ufs/ modules</span><br></pre></td></tr></table></figure>\n<p>Then the resulting <code>ufs.ko</code> can be scp’d back to the server to be loaded. The\nvermagic will match if the same <code>Makefile</code> was used across both kernel\ncompilations.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I recently got locked out of a server because of configuration mistake and had\nto rescue a FreeBSD server by netbooting Ubuntu (only image provided by the host\nthat booted). My root was running on UFS and as expected Ubuntu does not come\nwith a write enabled UFS kernel module.</p>\n<p>I set up a virtual build box on my local machine as it was faster than setting\neverything up on the netboot’d image (plus since it was totally in memory, if\nanything went wrong it’d be best to setup tooling offline). But just in case we\nneed to remember, the dependencies are </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">libncurses-dev</span><br><span class=\"line\">libssl</span><br><span class=\"line\">build-essentials</span><br><span class=\"line\">bc</span><br></pre></td></tr></table></figure>\n<p>After booting into the Ubuntu 16.04 image, we can then fetch the kernel source \nby doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>This would install <code>/usr/src/linux-headers-version</code> (replace version) with the\nkernel source. Then we need to scp the <code>Makefile</code> found in the directory to the\nsame directory on our build box.</p>\n<p>We can then enable <code>UFS_FS_WRITE=y</code> in the kernel config. Then call</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make oldconfig</span><br><span class=\"line\">make prepare</span><br><span class=\"line\">make modules_prepare</span><br><span class=\"line\">make M=fs/ufs/ modules</span><br></pre></td></tr></table></figure>\n<p>Then the resulting <code>ufs.ko</code> can be scp’d back to the server to be loaded. The\nvermagic will match if the same <code>Makefile</code> was used across both kernel\ncompilations.</p>\n"},{"title":"ezjail and Network Interfaces","date":"2018-06-02T09:31:06.000Z","_content":"\nI was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the [handbook](https://www.freebsd.org/doc/handbook/jails-ezjail.html) we can create jails by doing\n\n```sh\nezjail-admin create dnsjail 'lo1|127.0.1.1,em0|192.168.1.50'\n```\n\nAfter changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part `em0`, which is often your\nexternal interface, `ezjail-admin restart jail` will tear down your default\nroute and all connectivity to the interface. `ezjail` adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.\n\nI've been meaning to add a warning to the handbook when I get some time.\n\nTo prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) `ezjail_enable=\"YES\"` in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon't have serial console setup on the server you are out of luck without\nrescuing via netboot.\n\nAs it turns out, online.net's FreeBSD rescue images that they provide for rescue\ndon't boot either and you're forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.\n\nTo get around it, I had to first get the source for the running kernel by doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\nand then by copying over the `Makefile` from `/usr/src/linux-*` to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.\n\nMore information on compiling singular kernel modules can be found here.\n","source":"_posts/ezjail-and-network-interfaces.md","raw":"---\ntitle: ezjail and Network Interfaces\ndate: 2018-06-02 17:31:06\ntags: \n  - ezjail\n  - freebsd\n  - networking\n---\n\nI was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the [handbook](https://www.freebsd.org/doc/handbook/jails-ezjail.html) we can create jails by doing\n\n```sh\nezjail-admin create dnsjail 'lo1|127.0.1.1,em0|192.168.1.50'\n```\n\nAfter changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part `em0`, which is often your\nexternal interface, `ezjail-admin restart jail` will tear down your default\nroute and all connectivity to the interface. `ezjail` adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.\n\nI've been meaning to add a warning to the handbook when I get some time.\n\nTo prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) `ezjail_enable=\"YES\"` in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon't have serial console setup on the server you are out of luck without\nrescuing via netboot.\n\nAs it turns out, online.net's FreeBSD rescue images that they provide for rescue\ndon't boot either and you're forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.\n\nTo get around it, I had to first get the source for the running kernel by doing\n\n```sh\napt-get source linux-image-`uname -r`\n```\nand then by copying over the `Makefile` from `/usr/src/linux-*` to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.\n\nMore information on compiling singular kernel modules can be found here.\n","slug":"ezjail-and-network-interfaces","published":1,"updated":"2019-03-18T11:18:23.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea20003gs5n5lft4tkh","content":"<p>I was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the <a href=\"https://www.freebsd.org/doc/handbook/jails-ezjail.html\" target=\"_blank\" rel=\"noopener\">handbook</a> we can create jails by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ezjail-admin create dnsjail <span class=\"string\">'lo1|127.0.1.1,em0|192.168.1.50'</span></span><br></pre></td></tr></table></figure>\n<p>After changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part <code>em0</code>, which is often your\nexternal interface, <code>ezjail-admin restart jail</code> will tear down your default\nroute and all connectivity to the interface. <code>ezjail</code> adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.</p>\n<p>I’ve been meaning to add a warning to the handbook when I get some time.</p>\n<p>To prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) <code>ezjail_enable=&quot;YES&quot;</code> in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon’t have serial console setup on the server you are out of luck without\nrescuing via netboot.</p>\n<p>As it turns out, online.net’s FreeBSD rescue images that they provide for rescue\ndon’t boot either and you’re forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.</p>\n<p>To get around it, I had to first get the source for the running kernel by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>and then by copying over the <code>Makefile</code> from <code>/usr/src/linux-*</code> to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.</p>\n<p>More information on compiling singular kernel modules can be found here.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I was updating and adding a new service to one of my servers when I needed to\nfiddle with ezjail. ezjail, as its name suggests, makes creating and maintaing\njails quite simple. According to the <a href=\"https://www.freebsd.org/doc/handbook/jails-ezjail.html\" target=\"_blank\" rel=\"noopener\">handbook</a> we can create jails by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ezjail-admin create dnsjail <span class=\"string\">'lo1|127.0.1.1,em0|192.168.1.50'</span></span><br></pre></td></tr></table></figure>\n<p>After changing the ip to match your needs obviously, but it fails to mention\nthat if you have a problem with the second part <code>em0</code>, which is often your\nexternal interface, <code>ezjail-admin restart jail</code> will tear down your default\nroute and all connectivity to the interface. <code>ezjail</code> adds aliases to it and I\nam guessing, on tear down it also downs the primary ip.</p>\n<p>I’ve been meaning to add a warning to the handbook when I get some time.</p>\n<p>To prevent mishaps from happening in the future I reccomend onestarting ezjail\nwhen making changes. If youve set (as you do) <code>ezjail_enable=&quot;YES&quot;</code> in rc.conf,\nthe problem with the external interface will persist through reboots. If you\ndon’t have serial console setup on the server you are out of luck without\nrescuing via netboot.</p>\n<p>As it turns out, online.net’s FreeBSD rescue images that they provide for rescue\ndon’t boot either and you’re forced to go with ubuntu which does not come with a\nwrite enabled UFS driver by default. The kernel also compiles by default\ndisallowing force loading kernel modules with vermagic mismatches.</p>\n<p>To get around it, I had to first get the source for the running kernel by doing</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get <span class=\"built_in\">source</span> linux-image-`uname -r`</span><br></pre></td></tr></table></figure>\n<p>and then by copying over the <code>Makefile</code> from <code>/usr/src/linux-*</code> to your own\nbuild machine and then compiling the single module with our changes (enabling\nwrite). The module was then copied back to the server and loaded in, which\nallowed us to mound the root as readwrite. rc.conf was then modified and\nrebooted.</p>\n<p>More information on compiling singular kernel modules can be found here.</p>\n"},{"title":"Minor details and fixes for a Coffee Lake build on Gentoo Linux","date":"2018-07-16T06:45:45.000Z","_content":"\nCPU: Intel i7-8700k\n\nCooler: Cryorig H5 Ultimate\n\nMobo: MSI z370 A-pro\n\nRAM: GSkill RipJaws V 16gb @ 3000 MHz\n\nDisk: Samsung EVO 970 M.2 NVMe 250\n\nCase: NZXT H500\n\nGPU: Nvidia 1080 GTX (GALAX, OC SNPR dual fans, white)\n\nOS: Gentoo Linux\n\nCooler installation\n-------------------\n\nThe H5 is tricky to install, preferably watch the youtube installation video\nbefore attempting. Thermal compound is provided, don't get an extra tube unless\nyou need it.\n\nMonitor temps after you install it - mine idles at 22-30C, the room ambient is\n22-25C.\n\nMotherboard specific stuff\n--------------------------\n\nInstallation: the NZXT case does not provide all 8 (?) mounting screws for the\nmobo, but that is OK. When I installed it I slightly bent a catch on the\nbackplate for the IO board, but no biggies.\n\nSave settings and boot is F10.\n\nRAM speed most likely will be detected wrong. It can be changed by going to BIOS\nand to the OC section (toggle advanced with F7). \n\nChange boot mode to UEFI instead of Legacy + UEFI if you are planning on booting\nfrom that.\n\nIOMMU (VT-d feature) is disabled on this board by default. Turn it on in the OC\nsection -> CPU features. This processor supports it.\n\nCaveat: This motherboard does *not* come with A LOT of USB ports, and I can only\nfind 1 host controller. This may be an annoyance if you want to pass an entire\nhost controller through to the guest VM in passthrough.\n\nWhen booting in UEFI mode its supposed to look at `$ESP/EFI` but some\nmanufacturers get it wrong apparently. When doing grub install we need to add\n`--removable`.\n\n```\ngrub-install --target=x86_64-efi --efi-directory=/boot --removable\n```\n\nMotherboard display stuff\n\nAdvanced -> Integrated Graphics Configuration\nInitiate Graphics Adapter -> Set to PEG (PCIe first)\nIGD multi monitor support -> Enable (to enable the i915 chip)\n\n\nSet gentoo-sources to use ~amd64 keyword then emerge to get (at the time of\nwriting) 4.17.6. This will load i915 automatically for the integrated GPU.\n\nIf you are on an older kernel version you need `i915.alpha_support=1` in your\nkernel boot parameters (edit grub.cfg).\n\nNVMe Disk\n---------\n\nBuild in the NVMe driver to the kernel (*not* as a module).\n\n```\nCONFIG_NVME_CORE=y\nCONFIG_BLK_DEV_NVME=y\n```\n\nMore disk\n---------\n\nEnable ZFS. Note that the wiki is slightly out of date \n\njust install zfs-kmod and zfs.\n\n\n```\necho \"=sys-fs/zfs-kmod-9999 **\" >> /etc/portage/package.accept_keywords/zfs-kmod\necho \"=sys-fs/zfs-9999 **\" >> /etc/portage/package.accept_keywords/zfs \n# when upgrading kernel\n# after eselect kernel set n\n# run make prepare in /usr/srx/linux\nenv EXTRA_ECONF='--enable-linux-builtin' \\\n    ebuild /usr/portage/sys-fs/zfs-kmod/zfs-kmod-9999.ebuild clean configure\n(cd /var/tmp/portage/sys-fs/zfs-kmod-9999/work/zfs-kmod-9999/ && ./copy-builtin /usr/src/linux)\n```\n\nThen enable ZFS kernel module `CONFIG_ZFS` and build.\n\nThen rebuild the nvidia driver just in case\n\n`emerge -a @module-rebuild`\n\nCPU Governor\n------------\n\nSet to `performance` and enable the intel pstate driver (default).\n\nSSH\n---\n\nEdit the SSHD config and remove `AcceptEnv`. I always SSH from MacOS machines\nand we do not want to be setting env like `LC_CTYPE=UTF-8` because glibc does not\nsupport that by default.\n\nChange authentication to publickey only, copy key over and restart sshd.\n\n```sh\nssh alex@trixie '>> .ssh/authorized_keys' < id_rsa.pub\n```\n\nCurrent monitor setup\n---------------------\n\n```\n                                +--------------+    +--------------+\n                                |  2560x1440   |    | 2560x1440    |\n                                |  MST on      |    | MST off      |\n                                |  DP1.2       |    |              |\n                                |              |    |              |\n                                +-----+--------+    +----+---------+\n                             mDP in|  |     |DP out      |  DP in\n                                   |  |     |            |\n                                   |  |     |            |\n                                   |  |     |            |\n+------------+DP out               |  |     +------------+\n|  Intel     +---------------------+  |\n|  Onboard   |                        |\n|            |                        |\n+------------+                        |\n                                      |\n+------------+        DP              |\n|            +------------------------+\n| GTX 1080   |\n|            |\n+------------+\n```\n\nIn make.conf when setting `VIDEO_CARDS` set `nvidia intel i965`\n\n\nPlan -\n\n  * When system boots it boots off the 1080 as the boot GPU\n  * Xorg starts on 1080 with i3 as the wm, puts workspace 2 on the second\n  monitor\n  * When we need to unbind, we kill X, start X on i915, workspace 2 moves over\n  * PCIe unbind, rebind into VM\n\n\nCreate an intel xorg config\n\nadded this to startx\n\n```\nif [ -f /tmp/vm.lock ]; then\n        serverargs=\"-config intel.xorg.conf\"\nfi\n```\n\nand intel.xorg.conf\n```\nSection \"Device\"\n        Identifier  \"intel\"\n        Driver      \"modesetting\"\n        BusID       \"PCI:0:2:0\"\nEndSection\n```\n\n# Controlling the displays\n\nInstall ddccontrol to use the DDC channels over DP\n\nthis DOES NOT WORK over nvidia GPUs (modern ones anyway) over DP (but it is\nknown to work over HDMI). \n\nHere's what you need to do: enable i2c support:\n\nhttps://wiki.gentoo.org/wiki/I2C (enable everything in this wiki)\n\nthen run\n\n```\nddccontrol -p -v\n```\n\nto probe\n\nthen for DP\n\n```\nddccontrol -r 0x60 -w 15 dev:/dev/i2c-3 #DP\nddccontrol -r 0x60 -w 16 dev:/dev/i2c-3 #mDP\n```\n\nsource: https://askubuntu.com/questions/860761/ubuntu-command-line-to-change-input-source-on-a-display-monitor\n","source":"_posts/coffee-lake-build-gentoo.md","raw":"---\ntitle: Minor details and fixes for a Coffee Lake build on Gentoo Linux\ndate: 2018-07-16 14:45:45\ntags:\n---\n\nCPU: Intel i7-8700k\n\nCooler: Cryorig H5 Ultimate\n\nMobo: MSI z370 A-pro\n\nRAM: GSkill RipJaws V 16gb @ 3000 MHz\n\nDisk: Samsung EVO 970 M.2 NVMe 250\n\nCase: NZXT H500\n\nGPU: Nvidia 1080 GTX (GALAX, OC SNPR dual fans, white)\n\nOS: Gentoo Linux\n\nCooler installation\n-------------------\n\nThe H5 is tricky to install, preferably watch the youtube installation video\nbefore attempting. Thermal compound is provided, don't get an extra tube unless\nyou need it.\n\nMonitor temps after you install it - mine idles at 22-30C, the room ambient is\n22-25C.\n\nMotherboard specific stuff\n--------------------------\n\nInstallation: the NZXT case does not provide all 8 (?) mounting screws for the\nmobo, but that is OK. When I installed it I slightly bent a catch on the\nbackplate for the IO board, but no biggies.\n\nSave settings and boot is F10.\n\nRAM speed most likely will be detected wrong. It can be changed by going to BIOS\nand to the OC section (toggle advanced with F7). \n\nChange boot mode to UEFI instead of Legacy + UEFI if you are planning on booting\nfrom that.\n\nIOMMU (VT-d feature) is disabled on this board by default. Turn it on in the OC\nsection -> CPU features. This processor supports it.\n\nCaveat: This motherboard does *not* come with A LOT of USB ports, and I can only\nfind 1 host controller. This may be an annoyance if you want to pass an entire\nhost controller through to the guest VM in passthrough.\n\nWhen booting in UEFI mode its supposed to look at `$ESP/EFI` but some\nmanufacturers get it wrong apparently. When doing grub install we need to add\n`--removable`.\n\n```\ngrub-install --target=x86_64-efi --efi-directory=/boot --removable\n```\n\nMotherboard display stuff\n\nAdvanced -> Integrated Graphics Configuration\nInitiate Graphics Adapter -> Set to PEG (PCIe first)\nIGD multi monitor support -> Enable (to enable the i915 chip)\n\n\nSet gentoo-sources to use ~amd64 keyword then emerge to get (at the time of\nwriting) 4.17.6. This will load i915 automatically for the integrated GPU.\n\nIf you are on an older kernel version you need `i915.alpha_support=1` in your\nkernel boot parameters (edit grub.cfg).\n\nNVMe Disk\n---------\n\nBuild in the NVMe driver to the kernel (*not* as a module).\n\n```\nCONFIG_NVME_CORE=y\nCONFIG_BLK_DEV_NVME=y\n```\n\nMore disk\n---------\n\nEnable ZFS. Note that the wiki is slightly out of date \n\njust install zfs-kmod and zfs.\n\n\n```\necho \"=sys-fs/zfs-kmod-9999 **\" >> /etc/portage/package.accept_keywords/zfs-kmod\necho \"=sys-fs/zfs-9999 **\" >> /etc/portage/package.accept_keywords/zfs \n# when upgrading kernel\n# after eselect kernel set n\n# run make prepare in /usr/srx/linux\nenv EXTRA_ECONF='--enable-linux-builtin' \\\n    ebuild /usr/portage/sys-fs/zfs-kmod/zfs-kmod-9999.ebuild clean configure\n(cd /var/tmp/portage/sys-fs/zfs-kmod-9999/work/zfs-kmod-9999/ && ./copy-builtin /usr/src/linux)\n```\n\nThen enable ZFS kernel module `CONFIG_ZFS` and build.\n\nThen rebuild the nvidia driver just in case\n\n`emerge -a @module-rebuild`\n\nCPU Governor\n------------\n\nSet to `performance` and enable the intel pstate driver (default).\n\nSSH\n---\n\nEdit the SSHD config and remove `AcceptEnv`. I always SSH from MacOS machines\nand we do not want to be setting env like `LC_CTYPE=UTF-8` because glibc does not\nsupport that by default.\n\nChange authentication to publickey only, copy key over and restart sshd.\n\n```sh\nssh alex@trixie '>> .ssh/authorized_keys' < id_rsa.pub\n```\n\nCurrent monitor setup\n---------------------\n\n```\n                                +--------------+    +--------------+\n                                |  2560x1440   |    | 2560x1440    |\n                                |  MST on      |    | MST off      |\n                                |  DP1.2       |    |              |\n                                |              |    |              |\n                                +-----+--------+    +----+---------+\n                             mDP in|  |     |DP out      |  DP in\n                                   |  |     |            |\n                                   |  |     |            |\n                                   |  |     |            |\n+------------+DP out               |  |     +------------+\n|  Intel     +---------------------+  |\n|  Onboard   |                        |\n|            |                        |\n+------------+                        |\n                                      |\n+------------+        DP              |\n|            +------------------------+\n| GTX 1080   |\n|            |\n+------------+\n```\n\nIn make.conf when setting `VIDEO_CARDS` set `nvidia intel i965`\n\n\nPlan -\n\n  * When system boots it boots off the 1080 as the boot GPU\n  * Xorg starts on 1080 with i3 as the wm, puts workspace 2 on the second\n  monitor\n  * When we need to unbind, we kill X, start X on i915, workspace 2 moves over\n  * PCIe unbind, rebind into VM\n\n\nCreate an intel xorg config\n\nadded this to startx\n\n```\nif [ -f /tmp/vm.lock ]; then\n        serverargs=\"-config intel.xorg.conf\"\nfi\n```\n\nand intel.xorg.conf\n```\nSection \"Device\"\n        Identifier  \"intel\"\n        Driver      \"modesetting\"\n        BusID       \"PCI:0:2:0\"\nEndSection\n```\n\n# Controlling the displays\n\nInstall ddccontrol to use the DDC channels over DP\n\nthis DOES NOT WORK over nvidia GPUs (modern ones anyway) over DP (but it is\nknown to work over HDMI). \n\nHere's what you need to do: enable i2c support:\n\nhttps://wiki.gentoo.org/wiki/I2C (enable everything in this wiki)\n\nthen run\n\n```\nddccontrol -p -v\n```\n\nto probe\n\nthen for DP\n\n```\nddccontrol -r 0x60 -w 15 dev:/dev/i2c-3 #DP\nddccontrol -r 0x60 -w 16 dev:/dev/i2c-3 #mDP\n```\n\nsource: https://askubuntu.com/questions/860761/ubuntu-command-line-to-change-input-source-on-a-display-monitor\n","slug":"coffee-lake-build-gentoo","published":1,"updated":"2019-03-18T11:18:23.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea30004gs5nmhv1pepo","content":"<p>CPU: Intel i7-8700k</p>\n<p>Cooler: Cryorig H5 Ultimate</p>\n<p>Mobo: MSI z370 A-pro</p>\n<p>RAM: GSkill RipJaws V 16gb @ 3000 MHz</p>\n<p>Disk: Samsung EVO 970 M.2 NVMe 250</p>\n<p>Case: NZXT H500</p>\n<p>GPU: Nvidia 1080 GTX (GALAX, OC SNPR dual fans, white)</p>\n<p>OS: Gentoo Linux</p>\n<h2 id=\"Cooler-installation\"><a href=\"#Cooler-installation\" class=\"headerlink\" title=\"Cooler installation\"></a>Cooler installation</h2><p>The H5 is tricky to install, preferably watch the youtube installation video\nbefore attempting. Thermal compound is provided, don’t get an extra tube unless\nyou need it.</p>\n<p>Monitor temps after you install it - mine idles at 22-30C, the room ambient is\n22-25C.</p>\n<h2 id=\"Motherboard-specific-stuff\"><a href=\"#Motherboard-specific-stuff\" class=\"headerlink\" title=\"Motherboard specific stuff\"></a>Motherboard specific stuff</h2><p>Installation: the NZXT case does not provide all 8 (?) mounting screws for the\nmobo, but that is OK. When I installed it I slightly bent a catch on the\nbackplate for the IO board, but no biggies.</p>\n<p>Save settings and boot is F10.</p>\n<p>RAM speed most likely will be detected wrong. It can be changed by going to BIOS\nand to the OC section (toggle advanced with F7). </p>\n<p>Change boot mode to UEFI instead of Legacy + UEFI if you are planning on booting\nfrom that.</p>\n<p>IOMMU (VT-d feature) is disabled on this board by default. Turn it on in the OC\nsection -&gt; CPU features. This processor supports it.</p>\n<p>Caveat: This motherboard does <em>not</em> come with A LOT of USB ports, and I can only\nfind 1 host controller. This may be an annoyance if you want to pass an entire\nhost controller through to the guest VM in passthrough.</p>\n<p>When booting in UEFI mode its supposed to look at <code>$ESP/EFI</code> but some\nmanufacturers get it wrong apparently. When doing grub install we need to add\n<code>--removable</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub-install --target=x86_64-efi --efi-directory=/boot --removable</span><br></pre></td></tr></table></figure>\n<p>Motherboard display stuff</p>\n<p>Advanced -&gt; Integrated Graphics Configuration\nInitiate Graphics Adapter -&gt; Set to PEG (PCIe first)\nIGD multi monitor support -&gt; Enable (to enable the i915 chip)</p>\n<p>Set gentoo-sources to use ~amd64 keyword then emerge to get (at the time of\nwriting) 4.17.6. This will load i915 automatically for the integrated GPU.</p>\n<p>If you are on an older kernel version you need <code>i915.alpha_support=1</code> in your\nkernel boot parameters (edit grub.cfg).</p>\n<h2 id=\"NVMe-Disk\"><a href=\"#NVMe-Disk\" class=\"headerlink\" title=\"NVMe Disk\"></a>NVMe Disk</h2><p>Build in the NVMe driver to the kernel (<em>not</em> as a module).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_NVME_CORE=y</span><br><span class=\"line\">CONFIG_BLK_DEV_NVME=y</span><br></pre></td></tr></table></figure>\n<h2 id=\"More-disk\"><a href=\"#More-disk\" class=\"headerlink\" title=\"More disk\"></a>More disk</h2><p>Enable ZFS. Note that the wiki is slightly out of date </p>\n<p>just install zfs-kmod and zfs.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;=sys-fs/zfs-kmod-9999 **&quot; &gt;&gt; /etc/portage/package.accept_keywords/zfs-kmod</span><br><span class=\"line\">echo &quot;=sys-fs/zfs-9999 **&quot; &gt;&gt; /etc/portage/package.accept_keywords/zfs </span><br><span class=\"line\"># when upgrading kernel</span><br><span class=\"line\"># after eselect kernel set n</span><br><span class=\"line\"># run make prepare in /usr/srx/linux</span><br><span class=\"line\">env EXTRA_ECONF=&apos;--enable-linux-builtin&apos; \\</span><br><span class=\"line\">    ebuild /usr/portage/sys-fs/zfs-kmod/zfs-kmod-9999.ebuild clean configure</span><br><span class=\"line\">(cd /var/tmp/portage/sys-fs/zfs-kmod-9999/work/zfs-kmod-9999/ &amp;&amp; ./copy-builtin /usr/src/linux)</span><br></pre></td></tr></table></figure>\n<p>Then enable ZFS kernel module <code>CONFIG_ZFS</code> and build.</p>\n<p>Then rebuild the nvidia driver just in case</p>\n<p><code>emerge -a @module-rebuild</code></p>\n<h2 id=\"CPU-Governor\"><a href=\"#CPU-Governor\" class=\"headerlink\" title=\"CPU Governor\"></a>CPU Governor</h2><p>Set to <code>performance</code> and enable the intel pstate driver (default).</p>\n<h2 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h2><p>Edit the SSHD config and remove <code>AcceptEnv</code>. I always SSH from MacOS machines\nand we do not want to be setting env like <code>LC_CTYPE=UTF-8</code> because glibc does not\nsupport that by default.</p>\n<p>Change authentication to publickey only, copy key over and restart sshd.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh alex@trixie <span class=\"string\">'&gt;&gt; .ssh/authorized_keys'</span> &lt; id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"Current-monitor-setup\"><a href=\"#Current-monitor-setup\" class=\"headerlink\" title=\"Current monitor setup\"></a>Current monitor setup</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                +--------------+    +--------------+</span><br><span class=\"line\">                                |  2560x1440   |    | 2560x1440    |</span><br><span class=\"line\">                                |  MST on      |    | MST off      |</span><br><span class=\"line\">                                |  DP1.2       |    |              |</span><br><span class=\"line\">                                |              |    |              |</span><br><span class=\"line\">                                +-----+--------+    +----+---------+</span><br><span class=\"line\">                             mDP in|  |     |DP out      |  DP in</span><br><span class=\"line\">                                   |  |     |            |</span><br><span class=\"line\">                                   |  |     |            |</span><br><span class=\"line\">                                   |  |     |            |</span><br><span class=\"line\">+------------+DP out               |  |     +------------+</span><br><span class=\"line\">|  Intel     +---------------------+  |</span><br><span class=\"line\">|  Onboard   |                        |</span><br><span class=\"line\">|            |                        |</span><br><span class=\"line\">+------------+                        |</span><br><span class=\"line\">                                      |</span><br><span class=\"line\">+------------+        DP              |</span><br><span class=\"line\">|            +------------------------+</span><br><span class=\"line\">| GTX 1080   |</span><br><span class=\"line\">|            |</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure>\n<p>In make.conf when setting <code>VIDEO_CARDS</code> set <code>nvidia intel i965</code></p>\n<p>Plan -</p>\n<ul>\n<li>When system boots it boots off the 1080 as the boot GPU</li>\n<li>Xorg starts on 1080 with i3 as the wm, puts workspace 2 on the second\nmonitor</li>\n<li>When we need to unbind, we kill X, start X on i915, workspace 2 moves over</li>\n<li>PCIe unbind, rebind into VM</li>\n</ul>\n<p>Create an intel xorg config</p>\n<p>added this to startx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f /tmp/vm.lock ]; then</span><br><span class=\"line\">        serverargs=&quot;-config intel.xorg.conf&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>and intel.xorg.conf\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section &quot;Device&quot;</span><br><span class=\"line\">        Identifier  &quot;intel&quot;</span><br><span class=\"line\">        Driver      &quot;modesetting&quot;</span><br><span class=\"line\">        BusID       &quot;PCI:0:2:0&quot;</span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Controlling-the-displays\"><a href=\"#Controlling-the-displays\" class=\"headerlink\" title=\"Controlling the displays\"></a>Controlling the displays</h1><p>Install ddccontrol to use the DDC channels over DP</p>\n<p>this DOES NOT WORK over nvidia GPUs (modern ones anyway) over DP (but it is\nknown to work over HDMI). </p>\n<p>Here’s what you need to do: enable i2c support:</p>\n<p><a href=\"https://wiki.gentoo.org/wiki/I2C\" target=\"_blank\" rel=\"noopener\">https://wiki.gentoo.org/wiki/I2C</a> (enable everything in this wiki)</p>\n<p>then run</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ddccontrol -p -v</span><br></pre></td></tr></table></figure>\n<p>to probe</p>\n<p>then for DP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ddccontrol -r 0x60 -w 15 dev:/dev/i2c-3 #DP</span><br><span class=\"line\">ddccontrol -r 0x60 -w 16 dev:/dev/i2c-3 #mDP</span><br></pre></td></tr></table></figure>\n<p>source: <a href=\"https://askubuntu.com/questions/860761/ubuntu-command-line-to-change-input-source-on-a-display-monitor\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/860761/ubuntu-command-line-to-change-input-source-on-a-display-monitor</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>CPU: Intel i7-8700k</p>\n<p>Cooler: Cryorig H5 Ultimate</p>\n<p>Mobo: MSI z370 A-pro</p>\n<p>RAM: GSkill RipJaws V 16gb @ 3000 MHz</p>\n<p>Disk: Samsung EVO 970 M.2 NVMe 250</p>\n<p>Case: NZXT H500</p>\n<p>GPU: Nvidia 1080 GTX (GALAX, OC SNPR dual fans, white)</p>\n<p>OS: Gentoo Linux</p>\n<h2 id=\"Cooler-installation\"><a href=\"#Cooler-installation\" class=\"headerlink\" title=\"Cooler installation\"></a>Cooler installation</h2><p>The H5 is tricky to install, preferably watch the youtube installation video\nbefore attempting. Thermal compound is provided, don’t get an extra tube unless\nyou need it.</p>\n<p>Monitor temps after you install it - mine idles at 22-30C, the room ambient is\n22-25C.</p>\n<h2 id=\"Motherboard-specific-stuff\"><a href=\"#Motherboard-specific-stuff\" class=\"headerlink\" title=\"Motherboard specific stuff\"></a>Motherboard specific stuff</h2><p>Installation: the NZXT case does not provide all 8 (?) mounting screws for the\nmobo, but that is OK. When I installed it I slightly bent a catch on the\nbackplate for the IO board, but no biggies.</p>\n<p>Save settings and boot is F10.</p>\n<p>RAM speed most likely will be detected wrong. It can be changed by going to BIOS\nand to the OC section (toggle advanced with F7). </p>\n<p>Change boot mode to UEFI instead of Legacy + UEFI if you are planning on booting\nfrom that.</p>\n<p>IOMMU (VT-d feature) is disabled on this board by default. Turn it on in the OC\nsection -&gt; CPU features. This processor supports it.</p>\n<p>Caveat: This motherboard does <em>not</em> come with A LOT of USB ports, and I can only\nfind 1 host controller. This may be an annoyance if you want to pass an entire\nhost controller through to the guest VM in passthrough.</p>\n<p>When booting in UEFI mode its supposed to look at <code>$ESP/EFI</code> but some\nmanufacturers get it wrong apparently. When doing grub install we need to add\n<code>--removable</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grub-install --target=x86_64-efi --efi-directory=/boot --removable</span><br></pre></td></tr></table></figure>\n<p>Motherboard display stuff</p>\n<p>Advanced -&gt; Integrated Graphics Configuration\nInitiate Graphics Adapter -&gt; Set to PEG (PCIe first)\nIGD multi monitor support -&gt; Enable (to enable the i915 chip)</p>\n<p>Set gentoo-sources to use ~amd64 keyword then emerge to get (at the time of\nwriting) 4.17.6. This will load i915 automatically for the integrated GPU.</p>\n<p>If you are on an older kernel version you need <code>i915.alpha_support=1</code> in your\nkernel boot parameters (edit grub.cfg).</p>\n<h2 id=\"NVMe-Disk\"><a href=\"#NVMe-Disk\" class=\"headerlink\" title=\"NVMe Disk\"></a>NVMe Disk</h2><p>Build in the NVMe driver to the kernel (<em>not</em> as a module).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_NVME_CORE=y</span><br><span class=\"line\">CONFIG_BLK_DEV_NVME=y</span><br></pre></td></tr></table></figure>\n<h2 id=\"More-disk\"><a href=\"#More-disk\" class=\"headerlink\" title=\"More disk\"></a>More disk</h2><p>Enable ZFS. Note that the wiki is slightly out of date </p>\n<p>just install zfs-kmod and zfs.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;=sys-fs/zfs-kmod-9999 **&quot; &gt;&gt; /etc/portage/package.accept_keywords/zfs-kmod</span><br><span class=\"line\">echo &quot;=sys-fs/zfs-9999 **&quot; &gt;&gt; /etc/portage/package.accept_keywords/zfs </span><br><span class=\"line\"># when upgrading kernel</span><br><span class=\"line\"># after eselect kernel set n</span><br><span class=\"line\"># run make prepare in /usr/srx/linux</span><br><span class=\"line\">env EXTRA_ECONF=&apos;--enable-linux-builtin&apos; \\</span><br><span class=\"line\">    ebuild /usr/portage/sys-fs/zfs-kmod/zfs-kmod-9999.ebuild clean configure</span><br><span class=\"line\">(cd /var/tmp/portage/sys-fs/zfs-kmod-9999/work/zfs-kmod-9999/ &amp;&amp; ./copy-builtin /usr/src/linux)</span><br></pre></td></tr></table></figure>\n<p>Then enable ZFS kernel module <code>CONFIG_ZFS</code> and build.</p>\n<p>Then rebuild the nvidia driver just in case</p>\n<p><code>emerge -a @module-rebuild</code></p>\n<h2 id=\"CPU-Governor\"><a href=\"#CPU-Governor\" class=\"headerlink\" title=\"CPU Governor\"></a>CPU Governor</h2><p>Set to <code>performance</code> and enable the intel pstate driver (default).</p>\n<h2 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h2><p>Edit the SSHD config and remove <code>AcceptEnv</code>. I always SSH from MacOS machines\nand we do not want to be setting env like <code>LC_CTYPE=UTF-8</code> because glibc does not\nsupport that by default.</p>\n<p>Change authentication to publickey only, copy key over and restart sshd.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh alex@trixie <span class=\"string\">'&gt;&gt; .ssh/authorized_keys'</span> &lt; id_rsa.pub</span><br></pre></td></tr></table></figure>\n<h2 id=\"Current-monitor-setup\"><a href=\"#Current-monitor-setup\" class=\"headerlink\" title=\"Current monitor setup\"></a>Current monitor setup</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                                +--------------+    +--------------+</span><br><span class=\"line\">                                |  2560x1440   |    | 2560x1440    |</span><br><span class=\"line\">                                |  MST on      |    | MST off      |</span><br><span class=\"line\">                                |  DP1.2       |    |              |</span><br><span class=\"line\">                                |              |    |              |</span><br><span class=\"line\">                                +-----+--------+    +----+---------+</span><br><span class=\"line\">                             mDP in|  |     |DP out      |  DP in</span><br><span class=\"line\">                                   |  |     |            |</span><br><span class=\"line\">                                   |  |     |            |</span><br><span class=\"line\">                                   |  |     |            |</span><br><span class=\"line\">+------------+DP out               |  |     +------------+</span><br><span class=\"line\">|  Intel     +---------------------+  |</span><br><span class=\"line\">|  Onboard   |                        |</span><br><span class=\"line\">|            |                        |</span><br><span class=\"line\">+------------+                        |</span><br><span class=\"line\">                                      |</span><br><span class=\"line\">+------------+        DP              |</span><br><span class=\"line\">|            +------------------------+</span><br><span class=\"line\">| GTX 1080   |</span><br><span class=\"line\">|            |</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure>\n<p>In make.conf when setting <code>VIDEO_CARDS</code> set <code>nvidia intel i965</code></p>\n<p>Plan -</p>\n<ul>\n<li>When system boots it boots off the 1080 as the boot GPU</li>\n<li>Xorg starts on 1080 with i3 as the wm, puts workspace 2 on the second\nmonitor</li>\n<li>When we need to unbind, we kill X, start X on i915, workspace 2 moves over</li>\n<li>PCIe unbind, rebind into VM</li>\n</ul>\n<p>Create an intel xorg config</p>\n<p>added this to startx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f /tmp/vm.lock ]; then</span><br><span class=\"line\">        serverargs=&quot;-config intel.xorg.conf&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>and intel.xorg.conf\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section &quot;Device&quot;</span><br><span class=\"line\">        Identifier  &quot;intel&quot;</span><br><span class=\"line\">        Driver      &quot;modesetting&quot;</span><br><span class=\"line\">        BusID       &quot;PCI:0:2:0&quot;</span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Controlling-the-displays\"><a href=\"#Controlling-the-displays\" class=\"headerlink\" title=\"Controlling the displays\"></a>Controlling the displays</h1><p>Install ddccontrol to use the DDC channels over DP</p>\n<p>this DOES NOT WORK over nvidia GPUs (modern ones anyway) over DP (but it is\nknown to work over HDMI). </p>\n<p>Here’s what you need to do: enable i2c support:</p>\n<p><a href=\"https://wiki.gentoo.org/wiki/I2C\" target=\"_blank\" rel=\"noopener\">https://wiki.gentoo.org/wiki/I2C</a> (enable everything in this wiki)</p>\n<p>then run</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ddccontrol -p -v</span><br></pre></td></tr></table></figure>\n<p>to probe</p>\n<p>then for DP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ddccontrol -r 0x60 -w 15 dev:/dev/i2c-3 #DP</span><br><span class=\"line\">ddccontrol -r 0x60 -w 16 dev:/dev/i2c-3 #mDP</span><br></pre></td></tr></table></figure>\n<p>source: <a href=\"https://askubuntu.com/questions/860761/ubuntu-command-line-to-change-input-source-on-a-display-monitor\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/860761/ubuntu-command-line-to-change-input-source-on-a-display-monitor</a></p>\n"},{"title":"Parallel rsync","date":"2018-07-19T10:21:24.000Z","_content":"\nNot sure if its because of my ISP packet shaping or otherwise, but single\nconnections never saturate my 1gbps link at home. I needed to move a lot of\nmusic files off a server back to a new storage pool so:\n\n* first make a list of files\n```sh\nfind /zroot/DATA/music/ -type f -name \"*.flac\" \\\n       -exec dirname \"{}\" \\; | uniq\n```\n\n* split it into 12 parts\n```\nsplit -l N list\n```\n\n* use xargs to parallel rsync\n```sh\nfind . -name \"xa*\" -print0 | xargs -0 -I{} -n 1 -P12 rsync -avzr \\\n       --no-links --quiet --files-from={} alex@host:/ /tank/music/\n```\n\nThis gets me on average 25MB/s as opposed to 2MB/s on single threaded rsync.\n","source":"_posts/rsync-parallel.md","raw":"---\ntitle: Parallel rsync\ndate: 2018-07-19 18:21:24\ntags:\n---\n\nNot sure if its because of my ISP packet shaping or otherwise, but single\nconnections never saturate my 1gbps link at home. I needed to move a lot of\nmusic files off a server back to a new storage pool so:\n\n* first make a list of files\n```sh\nfind /zroot/DATA/music/ -type f -name \"*.flac\" \\\n       -exec dirname \"{}\" \\; | uniq\n```\n\n* split it into 12 parts\n```\nsplit -l N list\n```\n\n* use xargs to parallel rsync\n```sh\nfind . -name \"xa*\" -print0 | xargs -0 -I{} -n 1 -P12 rsync -avzr \\\n       --no-links --quiet --files-from={} alex@host:/ /tank/music/\n```\n\nThis gets me on average 25MB/s as opposed to 2MB/s on single threaded rsync.\n","slug":"rsync-parallel","published":1,"updated":"2019-03-18T11:18:23.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea40005gs5ny22iqo9p","content":"<p>Not sure if its because of my ISP packet shaping or otherwise, but single\nconnections never saturate my 1gbps link at home. I needed to move a lot of\nmusic files off a server back to a new storage pool so:</p>\n<ul>\n<li><p>first make a list of files</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /zroot/DATA/music/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.flac\"</span> \\</span><br><span class=\"line\">       -<span class=\"built_in\">exec</span> dirname <span class=\"string\">\"&#123;&#125;\"</span> \\; | uniq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>split it into 12 parts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split -l N list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>use xargs to parallel rsync</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\"xa*\"</span> -print0 | xargs -0 -I&#123;&#125; -n 1 -P12 rsync -avzr \\</span><br><span class=\"line\">       --no-links --quiet --files-from=&#123;&#125; alex@host:/ /tank/music/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>This gets me on average 25MB/s as opposed to 2MB/s on single threaded rsync.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Not sure if its because of my ISP packet shaping or otherwise, but single\nconnections never saturate my 1gbps link at home. I needed to move a lot of\nmusic files off a server back to a new storage pool so:</p>\n<ul>\n<li><p>first make a list of files</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /zroot/DATA/music/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">\"*.flac\"</span> \\</span><br><span class=\"line\">       -<span class=\"built_in\">exec</span> dirname <span class=\"string\">\"&#123;&#125;\"</span> \\; | uniq</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>split it into 12 parts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">split -l N list</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>use xargs to parallel rsync</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -name <span class=\"string\">\"xa*\"</span> -print0 | xargs -0 -I&#123;&#125; -n 1 -P12 rsync -avzr \\</span><br><span class=\"line\">       --no-links --quiet --files-from=&#123;&#125; alex@host:/ /tank/music/</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>This gets me on average 25MB/s as opposed to 2MB/s on single threaded rsync.</p>\n"},{"title":"Notes on flashing the ESP8266 wifi module (ESP-01S)","date":"2017-07-03T22:10:36.000Z","_content":"\nWriting this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout\n\n```\nTXD <-> TX (I suspect wrong labelling)\nRXD <-> RX\nVCC <-> 3v3\nGND <-> GND\n        IO0 pulled low\n        IO2 pulled high\n```\n\nKeep the reset pin connected to a wire for easy resetting. \n\nInstall `esptool.py` via `pip install esptool` and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.\n\n```\nesptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac\n```\n\nI flashed v2.1.0 of the NON OS SDK which can be obtained\n[here](https://github.com/espressif/ESP8266_NONOS_SDK/releases). \n\nFlash details\n\n```\nboot_v1.7.bin @ 0x0\nat\\512+512\\user1.1024.new.2.bin @ 0x01\nesp_init_data_default.bin 0xfc000\nblank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000\n```\n\nSPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.\n\nThe firmware sets default baudrate to `1152000`. This was confusing for me because I'm\nused to working with serial devices and I just assumed it was `115200` (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing\n\n```\nAT #for testing\nAT+GMR #for testing\nAT+UART_DEF=9600,8,1,0,0\n```\n\nNow you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so\n\n```\nAT^M^J\n```\n\n\n","source":"_posts/notes-on-flashing-the-esp8266-esp-01s.md","raw":"---\ntitle: Notes on flashing the ESP8266 wifi module (ESP-01S)\ndate: 2017-07-04 06:10:36\ntags: esp8266\n---\n\nWriting this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout\n\n```\nTXD <-> TX (I suspect wrong labelling)\nRXD <-> RX\nVCC <-> 3v3\nGND <-> GND\n        IO0 pulled low\n        IO2 pulled high\n```\n\nKeep the reset pin connected to a wire for easy resetting. \n\nInstall `esptool.py` via `pip install esptool` and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.\n\n```\nesptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac\n```\n\nI flashed v2.1.0 of the NON OS SDK which can be obtained\n[here](https://github.com/espressif/ESP8266_NONOS_SDK/releases). \n\nFlash details\n\n```\nboot_v1.7.bin @ 0x0\nat\\512+512\\user1.1024.new.2.bin @ 0x01\nesp_init_data_default.bin 0xfc000\nblank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000\n```\n\nSPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.\n\nThe firmware sets default baudrate to `1152000`. This was confusing for me because I'm\nused to working with serial devices and I just assumed it was `115200` (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing\n\n```\nAT #for testing\nAT+GMR #for testing\nAT+UART_DEF=9600,8,1,0,0\n```\n\nNow you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so\n\n```\nAT^M^J\n```\n\n\n","slug":"notes-on-flashing-the-esp8266-esp-01s","published":1,"updated":"2019-03-18T11:18:23.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea50008gs5n70ktrgdv","content":"<p>Writing this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TXD &lt;-&gt; TX (I suspect wrong labelling)</span><br><span class=\"line\">RXD &lt;-&gt; RX</span><br><span class=\"line\">VCC &lt;-&gt; 3v3</span><br><span class=\"line\">GND &lt;-&gt; GND</span><br><span class=\"line\">        IO0 pulled low</span><br><span class=\"line\">        IO2 pulled high</span><br></pre></td></tr></table></figure>\n<p>Keep the reset pin connected to a wire for easy resetting. </p>\n<p>Install <code>esptool.py</code> via <code>pip install esptool</code> and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac</span><br></pre></td></tr></table></figure>\n<p>I flashed v2.1.0 of the NON OS SDK which can be obtained\n<a href=\"https://github.com/espressif/ESP8266_NONOS_SDK/releases\" target=\"_blank\" rel=\"noopener\">here</a>. </p>\n<p>Flash details</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boot_v1.7.bin @ 0x0</span><br><span class=\"line\">at\\512+512\\user1.1024.new.2.bin @ 0x01</span><br><span class=\"line\">esp_init_data_default.bin 0xfc000</span><br><span class=\"line\">blank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000</span><br></pre></td></tr></table></figure>\n<p>SPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.</p>\n<p>The firmware sets default baudrate to <code>1152000</code>. This was confusing for me because I’m\nused to working with serial devices and I just assumed it was <code>115200</code> (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT #for testing</span><br><span class=\"line\">AT+GMR #for testing</span><br><span class=\"line\">AT+UART_DEF=9600,8,1,0,0</span><br></pre></td></tr></table></figure>\n<p>Now you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT^M^J</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Writing this down for future reference. I used a Sparkfun FTDI breakout board\nwith selectable voltage level set to 3.3v. Pinout</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TXD &lt;-&gt; TX (I suspect wrong labelling)</span><br><span class=\"line\">RXD &lt;-&gt; RX</span><br><span class=\"line\">VCC &lt;-&gt; 3v3</span><br><span class=\"line\">GND &lt;-&gt; GND</span><br><span class=\"line\">        IO0 pulled low</span><br><span class=\"line\">        IO2 pulled high</span><br></pre></td></tr></table></figure>\n<p>Keep the reset pin connected to a wire for easy resetting. </p>\n<p>Install <code>esptool.py</code> via <code>pip install esptool</code> and then when the ESP8266 is set\nto flash mode (IO0 low IO2 high) we can then try to connect at 115200 baud.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">esptool.py --port /dev/tty.usbmodem1421 --baud 115200 read_mac</span><br></pre></td></tr></table></figure>\n<p>I flashed v2.1.0 of the NON OS SDK which can be obtained\n<a href=\"https://github.com/espressif/ESP8266_NONOS_SDK/releases\" target=\"_blank\" rel=\"noopener\">here</a>. </p>\n<p>Flash details</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boot_v1.7.bin @ 0x0</span><br><span class=\"line\">at\\512+512\\user1.1024.new.2.bin @ 0x01</span><br><span class=\"line\">esp_init_data_default.bin 0xfc000</span><br><span class=\"line\">blank.bin @ 0xfe000 0x7e000 0xfb000 0xfb000</span><br></pre></td></tr></table></figure>\n<p>SPI crystal frequency of 26MHz, speed 40MHz, 8Mbit flash size, QIO flash.</p>\n<p>The firmware sets default baudrate to <code>1152000</code>. This was confusing for me because I’m\nused to working with serial devices and I just assumed it was <code>115200</code> (a more\nstandard baudrate). Use a serial monitor that can connect on that baudrate and\nthen change the default by typing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT #for testing</span><br><span class=\"line\">AT+GMR #for testing</span><br><span class=\"line\">AT+UART_DEF=9600,8,1,0,0</span><br></pre></td></tr></table></figure>\n<p>Now you can use minicom again but you have to remember to press ctrl M ctrl J to\nsend CRLF like so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AT^M^J</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS OpenVPN Connect Error - read length inconsistency","date":"2017-10-29T11:46:31.000Z","_content":"\nIf you've had the same error as what's described \n[here](https://forums.openvpn.net/viewtopic.php?t=18197), then it just means\nthat you have to insert the given key files inline into the configuration.\n\nThe error usually gets cut off as well in portrait mode so it looks like this:\n\n```\nProfile error : read length inconsistency: /var/mobile..\n```\n\nUsually with Tunnelblick you just bundle the `ca.crt`, `client.key` and\n`client.crt` into a folder and rename it as `server_name.tblk` but that will not\nwork for OpenVPN connect.\n\nInstead do this\n\n```\n#ca ca.crt\n<ca>\n-----BEGIN CERTIFICATE-----\n.\n.\n</ca>\n```\n\nAnd so on.\n\n\n","source":"_posts/iOS-openvpn-connect-read-length-inconsistency.md","raw":"---\ntitle: iOS OpenVPN Connect Error - read length inconsistency\ndate: 2017-10-29 19:46:31\ntags: ios, openvpn\n---\n\nIf you've had the same error as what's described \n[here](https://forums.openvpn.net/viewtopic.php?t=18197), then it just means\nthat you have to insert the given key files inline into the configuration.\n\nThe error usually gets cut off as well in portrait mode so it looks like this:\n\n```\nProfile error : read length inconsistency: /var/mobile..\n```\n\nUsually with Tunnelblick you just bundle the `ca.crt`, `client.key` and\n`client.crt` into a folder and rename it as `server_name.tblk` but that will not\nwork for OpenVPN connect.\n\nInstead do this\n\n```\n#ca ca.crt\n<ca>\n-----BEGIN CERTIFICATE-----\n.\n.\n</ca>\n```\n\nAnd so on.\n\n\n","slug":"iOS-openvpn-connect-read-length-inconsistency","published":1,"updated":"2019-03-18T11:18:23.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea60009gs5nf2pq20cp","content":"<p>If you’ve had the same error as what’s described \n<a href=\"https://forums.openvpn.net/viewtopic.php?t=18197\" target=\"_blank\" rel=\"noopener\">here</a>, then it just means\nthat you have to insert the given key files inline into the configuration.</p>\n<p>The error usually gets cut off as well in portrait mode so it looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Profile error : read length inconsistency: /var/mobile..</span><br></pre></td></tr></table></figure>\n<p>Usually with Tunnelblick you just bundle the <code>ca.crt</code>, <code>client.key</code> and\n<code>client.crt</code> into a folder and rename it as <code>server_name.tblk</code> but that will not\nwork for OpenVPN connect.</p>\n<p>Instead do this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ca ca.crt</span><br><span class=\"line\">&lt;ca&gt;</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&lt;/ca&gt;</span><br></pre></td></tr></table></figure>\n<p>And so on.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you’ve had the same error as what’s described \n<a href=\"https://forums.openvpn.net/viewtopic.php?t=18197\" target=\"_blank\" rel=\"noopener\">here</a>, then it just means\nthat you have to insert the given key files inline into the configuration.</p>\n<p>The error usually gets cut off as well in portrait mode so it looks like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Profile error : read length inconsistency: /var/mobile..</span><br></pre></td></tr></table></figure>\n<p>Usually with Tunnelblick you just bundle the <code>ca.crt</code>, <code>client.key</code> and\n<code>client.crt</code> into a folder and rename it as <code>server_name.tblk</code> but that will not\nwork for OpenVPN connect.</p>\n<p>Instead do this</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ca ca.crt</span><br><span class=\"line\">&lt;ca&gt;</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">&lt;/ca&gt;</span><br></pre></td></tr></table></figure>\n<p>And so on.</p>\n"},{"title":"ROS Kinetic Installation on MacOS (Homebrew, as of May '17)","date":"2017-05-09T07:05:20.000Z","_content":"\nEvery now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an `eselect`esque way (it's a tool found on Gentoo Linux for\nmanaging versions via symlinks).\n\n```\nsudo mkdir /opt/kinetic\nsudo mkdir /opt/jade\nsudo chown -R `whoami`:staff /opt/kinetic /opt/jade\nln -s /opt/kinetic/install /opt/ros/kinetic # or jade\n```\n\nOpenCV3\n-------\n\nHomebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with `--HEAD`:\n\n```\nbrew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\\n  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD\n```\n\nNote: takes around 20 minutes to compile.\n\nAFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n`cv_bridge` do \n\n```\nbrew ln opencv3 --force\n```\n\nThis may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.\n\nQt\n--\n\n```\necho 'export PATH=\"/usr/local/opt/qt/bin:$PATH\"' >> ~/.zshrc\n```\n\nOther than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it's ever been really.\n\n","source":"_posts/ros-kinetic-macos-may17.md","raw":"---\ntitle: ROS Kinetic Installation on MacOS (Homebrew, as of May '17)\ndate: 2017-05-09 15:05:20\ntags: ros\n---\n\nEvery now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an `eselect`esque way (it's a tool found on Gentoo Linux for\nmanaging versions via symlinks).\n\n```\nsudo mkdir /opt/kinetic\nsudo mkdir /opt/jade\nsudo chown -R `whoami`:staff /opt/kinetic /opt/jade\nln -s /opt/kinetic/install /opt/ros/kinetic # or jade\n```\n\nOpenCV3\n-------\n\nHomebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with `--HEAD`:\n\n```\nbrew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\\n  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD\n```\n\nNote: takes around 20 minutes to compile.\n\nAFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n`cv_bridge` do \n\n```\nbrew ln opencv3 --force\n```\n\nThis may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.\n\nQt\n--\n\n```\necho 'export PATH=\"/usr/local/opt/qt/bin:$PATH\"' >> ~/.zshrc\n```\n\nOther than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it's ever been really.\n\n","slug":"ros-kinetic-macos-may17","published":1,"updated":"2019-03-18T11:18:23.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea8000bgs5nqyv6ulel","content":"<p>Every now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an <code>eselect</code>esque way (it’s a tool found on Gentoo Linux for\nmanaging versions via symlinks).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /opt/kinetic</span><br><span class=\"line\">sudo mkdir /opt/jade</span><br><span class=\"line\">sudo chown -R `whoami`:staff /opt/kinetic /opt/jade</span><br><span class=\"line\">ln -s /opt/kinetic/install /opt/ros/kinetic # or jade</span><br></pre></td></tr></table></figure>\n<h2 id=\"OpenCV3\"><a href=\"#OpenCV3\" class=\"headerlink\" title=\"OpenCV3\"></a>OpenCV3</h2><p>Homebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with <code>--HEAD</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\</span><br><span class=\"line\">  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD</span><br></pre></td></tr></table></figure>\n<p>Note: takes around 20 minutes to compile.</p>\n<p>AFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n<code>cv_bridge</code> do </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew ln opencv3 --force</span><br></pre></td></tr></table></figure>\n<p>This may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.</p>\n<h2 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>Other than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it’s ever been really.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Every now and again I nuke my ROS installation and build from scratch because of\ndependencies getting updated/my usecase changing. I prefer to have two\ninstallations of ROS on my system these days. Jade, for stability and feature\nmatching with my platforms and Kinetic for testing and submitting patches on. I\nmanage both in an <code>eselect</code>esque way (it’s a tool found on Gentoo Linux for\nmanaging versions via symlinks).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /opt/kinetic</span><br><span class=\"line\">sudo mkdir /opt/jade</span><br><span class=\"line\">sudo chown -R `whoami`:staff /opt/kinetic /opt/jade</span><br><span class=\"line\">ln -s /opt/kinetic/install /opt/ros/kinetic # or jade</span><br></pre></td></tr></table></figure>\n<h2 id=\"OpenCV3\"><a href=\"#OpenCV3\" class=\"headerlink\" title=\"OpenCV3\"></a>OpenCV3</h2><p>Homebrew uses an outdated brew contrib release which does not have CMake fixes\nfor the freetype contrib module. Install it with <code>--HEAD</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install opencv3 --with-python --with-eigen --c++11 --with-contrib \\</span><br><span class=\"line\">  --with-ffmpeg --with-tbb --with-qt --with-non-free --without-test --HEAD</span><br></pre></td></tr></table></figure>\n<p>Note: takes around 20 minutes to compile.</p>\n<p>AFAIK, Jade still uses OpenCV2 while Kinetic has migrated to CV3. To build\n<code>cv_bridge</code> do </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew ln opencv3 --force</span><br></pre></td></tr></table></figure>\n<p>This may cause a problem with Jade stuff, so unlink and relink opencv2 if need\nbe. Homebrew warns about this when you try to install opencv3.</p>\n<h2 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &apos;export PATH=&quot;/usr/local/opt/qt/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>Other than that, there were absolutely no errors involved in compiling the\ndesktop version of kinetic on MacOS. Wonderful. Easiest it’s ever been really.</p>\n"},{"title":"Migrating weechat configuration from Linux to MacOS (and vice versa)","date":"2018-07-25T06:29:13.000Z","_content":"\nIf you are using SSL, the weechat will refuse to connect because the location of\nthe ca file is different on MacOS and Linux (`weechat.network.gnutls_ca_file`).\n\nOn MacOS you can set (for homebrew users)\n\n```\n/set weechat.network.gnutls_ca_file \"/usr/local/etc/openssl/cert.pem\"\n```\n\nAnd on Linux\n\n```\n/set weechat.network.gnutls_ca_file \"/etc/ssl/certs/ca-certificates.crt\"\n```\n\nAnd you should be good to go.\n","source":"_posts/migrating-weechat-linux-macos.md","raw":"---\ntitle: Migrating weechat configuration from Linux to MacOS (and vice versa)\ndate: 2018-07-25 14:29:13\ntags: weechat\n---\n\nIf you are using SSL, the weechat will refuse to connect because the location of\nthe ca file is different on MacOS and Linux (`weechat.network.gnutls_ca_file`).\n\nOn MacOS you can set (for homebrew users)\n\n```\n/set weechat.network.gnutls_ca_file \"/usr/local/etc/openssl/cert.pem\"\n```\n\nAnd on Linux\n\n```\n/set weechat.network.gnutls_ca_file \"/etc/ssl/certs/ca-certificates.crt\"\n```\n\nAnd you should be good to go.\n","slug":"migrating-weechat-linux-macos","published":1,"updated":"2019-03-18T11:18:23.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjvea9000cgs5nmrx3mjl2","content":"<p>If you are using SSL, the weechat will refuse to connect because the location of\nthe ca file is different on MacOS and Linux (<code>weechat.network.gnutls_ca_file</code>).</p>\n<p>On MacOS you can set (for homebrew users)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/set weechat.network.gnutls_ca_file &quot;/usr/local/etc/openssl/cert.pem&quot;</span><br></pre></td></tr></table></figure>\n<p>And on Linux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/set weechat.network.gnutls_ca_file &quot;/etc/ssl/certs/ca-certificates.crt&quot;</span><br></pre></td></tr></table></figure>\n<p>And you should be good to go.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you are using SSL, the weechat will refuse to connect because the location of\nthe ca file is different on MacOS and Linux (<code>weechat.network.gnutls_ca_file</code>).</p>\n<p>On MacOS you can set (for homebrew users)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/set weechat.network.gnutls_ca_file &quot;/usr/local/etc/openssl/cert.pem&quot;</span><br></pre></td></tr></table></figure>\n<p>And on Linux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/set weechat.network.gnutls_ca_file &quot;/etc/ssl/certs/ca-certificates.crt&quot;</span><br></pre></td></tr></table></figure>\n<p>And you should be good to go.</p>\n"},{"title":"Say no to catkin_make","date":"2017-01-19T09:03:20.000Z","author":"alex","_content":"`catkin` is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain `catkin_make` to build their workspaces but that is\npretty basic. Please use `catkin`, it is much more powerful and convienient.\n\nFor one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you're building individual packages it can sometimes be useful as it'll\ndetect if your dependencies are out of date and compile them too.\n\nInstall catkin with\n\n```\npip install catkin catkin_tools\n```\n\nTo initialize a workspace (that already has a `src` folder)\n\n```sh\ncatkin init\ncatkin build\n```\n\nThen you can easily set cmake parameters\n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release\n```\n\nor \n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DPYTHON_LIBRARY=$(python -c \"import sys; print sys.prefix\")/lib/libpython2.7.dylib \\\n  -DPYTHON_INCLUDE_DIR=$(python -c \"import sys; print sys.prefix\")/include/python2.7 \\\n  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON\n```\n\nIf you're using homebrewed libraries on MacOS.\n\nTo build a particular package\n\n```sh\ncatkin build pkg\n```\n\nOr blacklist/whitelist with \n\n```sh\ncatkin config (--blacklist|--whitelist) pkg\n```\n\nIf you are building an individual package you can force it to\nbuild only that package by \n\n```sh\ncatkin build pkg --no-deps\n```\n\nVerbosity and job control\n\n```sh\ncatkin build -v -jN\n```\n\n","source":"_posts/say-no-to-catkin-make.md","raw":"---\ntitle: Say no to catkin_make\ndate: 2017-01-19 17:03:20\ntags: ros\nauthor: alex\n---\n`catkin` is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain `catkin_make` to build their workspaces but that is\npretty basic. Please use `catkin`, it is much more powerful and convienient.\n\nFor one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you're building individual packages it can sometimes be useful as it'll\ndetect if your dependencies are out of date and compile them too.\n\nInstall catkin with\n\n```\npip install catkin catkin_tools\n```\n\nTo initialize a workspace (that already has a `src` folder)\n\n```sh\ncatkin init\ncatkin build\n```\n\nThen you can easily set cmake parameters\n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release\n```\n\nor \n\n```sh\ncatkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DPYTHON_LIBRARY=$(python -c \"import sys; print sys.prefix\")/lib/libpython2.7.dylib \\\n  -DPYTHON_INCLUDE_DIR=$(python -c \"import sys; print sys.prefix\")/include/python2.7 \\\n  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON\n```\n\nIf you're using homebrewed libraries on MacOS.\n\nTo build a particular package\n\n```sh\ncatkin build pkg\n```\n\nOr blacklist/whitelist with \n\n```sh\ncatkin config (--blacklist|--whitelist) pkg\n```\n\nIf you are building an individual package you can force it to\nbuild only that package by \n\n```sh\ncatkin build pkg --no-deps\n```\n\nVerbosity and job control\n\n```sh\ncatkin build -v -jN\n```\n\n","slug":"say-no-to-catkin-make","published":1,"updated":"2019-03-18T11:18:23.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjveaa000egs5nuguznnrw","content":"<p><code>catkin</code> is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain <code>catkin_make</code> to build their workspaces but that is\npretty basic. Please use <code>catkin</code>, it is much more powerful and convienient.</p>\n<p>For one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you’re building individual packages it can sometimes be useful as it’ll\ndetect if your dependencies are out of date and compile them too.</p>\n<p>Install catkin with</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install catkin catkin_tools</span><br></pre></td></tr></table></figure>\n<p>To initialize a workspace (that already has a <code>src</code> folder)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin init</span><br><span class=\"line\">catkin build</span><br></pre></td></tr></table></figure>\n<p>Then you can easily set cmake parameters</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release \\</span><br><span class=\"line\">  -DPYTHON_LIBRARY=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/lib/libpython2.7.dylib \\</span><br><span class=\"line\">  -DPYTHON_INCLUDE_DIR=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/include/python2.7 \\</span><br><span class=\"line\">  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON</span><br></pre></td></tr></table></figure>\n<p>If you’re using homebrewed libraries on MacOS.</p>\n<p>To build a particular package</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg</span><br></pre></td></tr></table></figure>\n<p>Or blacklist/whitelist with </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config (--blacklist|--whitelist) pkg</span><br></pre></td></tr></table></figure>\n<p>If you are building an individual package you can force it to\nbuild only that package by </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg --no-deps</span><br></pre></td></tr></table></figure>\n<p>Verbosity and job control</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build -v -jN</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>catkin</code> is the wrapper around cmake that ROS uses. Majority of the people I\nknow are still using plain <code>catkin_make</code> to build their workspaces but that is\npretty basic. Please use <code>catkin</code>, it is much more powerful and convienient.</p>\n<p>For one, it can resolve dependencies and parallelize your workspace compilation.\nWhen you’re building individual packages it can sometimes be useful as it’ll\ndetect if your dependencies are out of date and compile them too.</p>\n<p>Install catkin with</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install catkin catkin_tools</span><br></pre></td></tr></table></figure>\n<p>To initialize a workspace (that already has a <code>src</code> folder)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin init</span><br><span class=\"line\">catkin build</span><br></pre></td></tr></table></figure>\n<p>Then you can easily set cmake parameters</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release</span><br></pre></td></tr></table></figure>\n<p>or </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config --install --cmake-args -DCMAKE_FIND_FRAMEWORK=LAST \\</span><br><span class=\"line\">  -DCMAKE_BUILD_TYPE=Release \\</span><br><span class=\"line\">  -DPYTHON_LIBRARY=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/lib/libpython2.7.dylib \\</span><br><span class=\"line\">  -DPYTHON_INCLUDE_DIR=$(python -c <span class=\"string\">\"import sys; print sys.prefix\"</span>)/include/python2.7 \\</span><br><span class=\"line\">  -DQT_USE_FRAMEWORKS=ON -DCATKIN_ENABLE_TESTING=ON</span><br></pre></td></tr></table></figure>\n<p>If you’re using homebrewed libraries on MacOS.</p>\n<p>To build a particular package</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg</span><br></pre></td></tr></table></figure>\n<p>Or blacklist/whitelist with </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin config (--blacklist|--whitelist) pkg</span><br></pre></td></tr></table></figure>\n<p>If you are building an individual package you can force it to\nbuild only that package by </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build pkg --no-deps</span><br></pre></td></tr></table></figure>\n<p>Verbosity and job control</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catkin build -v -jN</span><br></pre></td></tr></table></figure>\n"},{"title":"Running Windows with PCI passthrough enabled on Gentoo Linux","date":"2018-07-27T04:23:18.000Z","_content":"\n# Why?\n\n* I have a 1080 GTX that I use to power my 2 1440p screens, render high\ndefinition video, re-encoding and also to play Dota 2 on Linux.\n* I also foresee the card running CUDA specific stuff just out of personal\ninterest.\n* I _hate_ rebooting machines (the box is also a ZFS datastore that is accessible\nover the network, music server, etc.).\n* I want to play certain games on Windows (GTA V, Dying Light, etc.)\n\n# Hardware\n\nThe requirements for pci passthrough can be found all over the internet,\nparticularly in the Arch wiki, but in short: If you've an Intel processor it\nwill need to support VT-d and IOMMU. Most modern processors support that. The\nQEMU wiki states that most K processors don't - but the 8700k does support it.\n\nThe motherboard needs to support it as well (and again, most modern boards do)\n  but some manufacturers are known to disable it to shave cost. Google around.\n\nThe MSI z370-A PRO board supports it. Couldn't find it in a database somewhere\nbut it does (tested).\n\nI don't want to have two separate KB and mouse because that beats the point of\nwhat I'm trying to achieve. I want a Linux host that can run games at times and\nsorta 'alt-tab' into each other. However, if you care about achieving bare\nmetal latencies - you'd need to get a PCI USB hub that can be passed through.\n\nThe z370-A PRO motherboard comes with only 1 xHCI USB hub.\n\nThe rest of this post is tailored to hardware I own so\n\n| Components                            |\n| ------------------------------------- |\n| Intel i7 8700k                        |\n| MSI z370-A PRO                        |\n| G.Skill Ripjaws V 16GB @ 3000MHz CL15 |\n| Corsair 128GB SATA3 SSD               |\n| Generic HID Keyboard                  |\n| Generic HID Mouse                     |\n\nThe SSD is from another computer that no longer exists and was scavenged.\n\nIt is important that there's two GPUs available on the system. The i7 8700k\ncomes with its integrated graphics and that works fine.\n\n# BIOS Setup\n\nEnable VT-d in Overclocking (smh) -> CPU features. I have no idea why it's not\nenabled by default on this motherboard.\n\nSet the boot GPU to the Intel i915 by navigating to Advanced -> Integrated\nGraphics Configuration -> Set to IGD.\n\nWhen I boot from the 1080 GTX everything still works, but I can swap X between\nnvidia and intel gpus exactly _two_ times. Any more and it'll stall the CPU and\nI have to REISUB the machine. Details can be found in the email I sent to the\nvfio-users mailing list [here](https://www.redhat.com/archives/vfio-users/2018-July/msg00005.html).\n\n# Kernel setup\n\nI'm on gentoo-sources 4.17.9 at the time of writing. You need to keyword it so\nyou'd need\n\n```\nsys-kernel/gentoo-sources ~amd64\n```\n\nEnable the following for IOMMU\n\n```\nCONFIG_IOMMU_SUPPORT\nCONFIG_INTEL_IOMMU\nCONFIG_INTEL_IOMMU_SVM\nCONFIG_IRQ_REMAP\nCONFIG_VFIO\nCONFIG_VFIO_PCI\nCONFIG_VFIO_PCI_VGA\n```\n\nI'll also upload my kernel configuration so that it's easier to reference.\n\n\nThen add to `/etc/default/grub` and reboot\n\n```\nGRUB_CMDLINE_LINUX=\"iommu=on intel_iommu=on\"\n```\n\nCheck if the options work by checking the log\n\n```\nalex@trixie ~ $ dmesg | grep -e IOMMU -e DMAR\n[    0.000000] ACPI: DMAR 0x000000007C5A8880 0000A8 (v01 INTEL  EDK2     00000001 INTL 00000001)\n[    0.000000] DMAR: IOMMU enabled\n```\n\nAlso enable the relevant Kernel flags for the Intel GPU and NVIDA GPU (see the\ngentoo handbook for this).\n\nThe i965 (newer i915 name in mesa) seems to flicker on my screen and cause\nartifacts at times. The Arch wiki recommends adding `i915.enable_psr=0` to get\naround that. You can find more details about that here.\n\n# Display setup\n\nI changed my display setup slightly to remove DP chaining. The final setup is\nlike so\n\n```\n\n                                +--------------+    +--------------+\n                                |  2560x1440   |    | 2560x1440    |\n                                |  MST on      |    | MST off      |\n                                |  DP1.2       |    |              |\n                                |              |    |              |\n                                +-----+--------+    +----+---------+\n                             mDP in|  |      DP out      |  DP in\n                                   |  |                  |\n                                   |  |                  |\n                                   |  |                  |\n+------------+DP out               |  |                  |\n|  Intel     +---------------------+  |                  |\n|  Onboard   |                        |                  |\n|            |                        |                  |\n+------------+                        |                  |\n                                      |                  |\n+------------+        DP              |                  |\n|            +------------------------+                  |\n| GTX 1080   |                                           |\n|            +-------------------------------------------+\n+------------+\n```\n\nI removed the DP chaining because if you're (and you should be) using the nvidia\nproprietary drivers on Linux, there's a bug preventing DDC control from working\nover DP.\n\nDDC control enables us to switch the inputs of the monitors from mDP <-> DP from\nsoftware (i2c write). It works fine with the intel GPU which works out well for\nus since that's the display that'll be running X when we're in passthrough.\n\nThere's a nice little utility called `ddccontrol` that enables us to use this.\n\n```\n=app-misc/ddccontrol-db-20061014_p20121105 ~amd64\n=app-misc/ddccontrol-0.4.2_p20140105-r2 ~amd64\n\nemerge -a ddccontrol\n```\n\n# IOMMU Groups\n\nAnd IOMMU group is the smallest set of devices the VM can grab at a time.\n\nYou can check your IOMMU groups by running this little command that I got from\nmany sources (Archwiki, /vg/s installgentoo page)\n\n```sh\nfor iommu_group in \\\n      $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -type d); do \\\n  echo \"IOMMU group $(basename \"$iommu_group\")\"; \\\n  for device in $(ls -1 \"$iommu_group\"/devices/); do \\\n    echo -n $'\\t'; lspci -nns \"$device\"; \\\n  done; \\\ndone\n```\n\nMine are\n\n```\nIOMMU group 7\n        00:1c.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #1 [8086:a290] (rev f0)\nIOMMU group 5\n        00:16.0 Communication controller [0780]: Intel Corporation 200 Series PCH CSME HECI #1 [8086:a2ba]\nIOMMU group 3\n        00:08.0 System peripheral [0880]: Intel Corporation Xeon E3-1200 v5/v6 / E3-1500 v5 / 6th/7th Gen Core Processor Gaussian Mixture Model [8086:1911]\nIOMMU group 11\n        03:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)\nIOMMU group 1\n        00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07)\n        01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1)\n        01:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)\nIOMMU group 8\n        00:1c.3 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #4 [8086:a293] (rev f0)\nIOMMU group 6\n        00:17.0 SATA controller [0106]: Intel Corporation 200 Series PCH SATA controller [AHCI mode] [8086:a282]\nIOMMU group 4\n        00:14.0 USB controller [0c03]: Intel Corporation 200 Series PCH USB 3.0 xHCI Controller [8086:a2af]\n        00:14.2 Signal processing controller [1180]: Intel Corporation 200 Series PCH Thermal Subsystem [8086:a2b1]\nIOMMU group 12\n        04:00.0 Non-Volatile memory controller [0108]: Samsung Electronics Co Ltd Device [144d:a808]\nIOMMU group 2\n        00:02.0 VGA compatible controller [0300]: Intel Corporation Device [8086:3e92]\nIOMMU group 10\n        00:1f.0 ISA bridge [0601]: Intel Corporation Device [8086:a2c9]\n        00:1f.2 Memory controller [0580]: Intel Corporation 200 Series PCH PMC [8086:a2a1]\n        00:1f.3 Audio device [0403]: Intel Corporation 200 Series PCH HD Audio [8086:a2f0]\n        00:1f.4 SMBus [0c05]: Intel Corporation 200 Series PCH SMBus Controller [8086:a2a3]\nIOMMU group 0\n        00:00.0 Host bridge [0600]: Intel Corporation Device [8086:3ec2] (rev 07)\nIOMMU group 9\n        00:1d.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #9 [8086:a298] (rev f0)\n```\n\nMy IOMMU group 1 is perfect, which is basically just my nvidia GPU and its HD\naudio device. The PCI bridge can be ignored but it needs to be removed from the\npcieport driver before we can bind the gpu to the vm.\n\nThough if you have things like your network card inside the same group then\ngrabbing it is going to be more difficult. You can try an ACS patch which may be\nable to break down your IOMMU groups further. I don't need it with this setup.\nYet.\n\n\n# X server stuff\n\nLike I mentioned before the host graphics is equally important and I do more\nwork on the host. I use a generic `xorg.conf` that is generated by\n`nvidia-xconfig` to configure my graphics initially.\n\nI leave that file untouched in `/etc/X11`.\n\nI have a seperate Xorg configuration that I use for the Intel i915\n\n```\nSection \"Device\"\n        Identifier  \"intel\"\n        Driver      \"modesetting\"\n        BusID       \"PCI:0:2:0\"\nEndSection\n```\n\nThis filed is named `intel.xorg.conf` and dumped in the same directory.\n\nUpdate:\n\nI no longer patch `xinit`. I started using a login manager: SLiM, which also\nstarts a consolekit session (makes things easier). I keep the default config as\n`/etc/slim.conf.orig` and symlink either that or `/etc/slim.conf.intel` which\nhas the server argument `-config xorg.conf.intel` to `/etc/slim.conf`.\n\n# Relevant scripts\n\nHere's how I start and stop my VM and bind to different environments. This is\nnot perfect (neither is anything in this post) and criticism is welcome. Pull\nrequests too.\n\nI don't use virt-manager or libvirt because\n\n* I don't want another layer of abstraction\n* XML makes life difficult and there are still parameters that can't be passed\nin via the configuration file\n* XML\n* Did I mention XML?\n\nMy scripts are `sh` compatible and do not require any special shell.\n\nThis part prepares the drivers and binding to vfio-pci as required. I don't\nthink that the rebinding of vtconsole is required.\n\n```sh\n#!/bin/sh\n\n# PCIe device ids\nGPU=0000:01:00.0\nGPU_SND=0000:01:00.1\nPCI_BRIDGE=0000:00:01.0\n\n# this script is intended to be run as root\n# @TODO put in a check against whoami or $USER\n\nfunction perror() {\n  echo \"$@\" 1>&2;\n}\n\nfunction bus_rescan() {\n  perror \"[*] rescaning pci bus\"\n  echo 1 > /sys/bus/pci/rescan\n  sleep 1\n}\n\n# usage\n# vfio-bind $GPU vfio-bind\nfunction driver_bind() {\n  DEV=\"$1\"\n  DRV=\"$2\"\n  VENDOR=$(< /sys/bus/pci/devices/$DEV/vendor)\n  DEVICE=$(< /sys/bus/pci/devices/$DEV/device)\n  if [ -e /sys/bus/pci/devices/$DEV/driver ]; then\n    perror \"[*] unbinding $DEV\"\n    echo $DEV > /sys/bus/pci/devices/$DEV/driver/unbind\n    sleep 1\n  else\n    perror \"[!] existing driver for $DEV not found\"\n  fi\n  perror \"[*] binding $DEV to $DRV\"\n  echo $VENDOR $DEVICE > /sys/bus/pci/drivers/$DRV/new_id\n}\n\nfunction remove_pci_bridge() {\n  perror \"[*] removing pci bridge\"\n  echo 1 > /sys/bus/pci/devices/$PCI_BRIDGE/remove\n  bus_rescan\n}\n\nfunction unbind_fb_vtconsole() {\n  perror \"[*] removing efifb and vtconsole binding\"\n  perror \"[!!] you WILL lose console\"\n  echo \"efi-framebuffer.0\" > /sys/bus/platform/drivers/efi-framebuffer/unbind\n  sleep .5\n  echo 0 > /sys/class/vtconsole/vtcon0/bind\n  echo 0 > /sys/class/vtconsole/vtcon1/bind\n}\n\nfunction rebind_fb_vtconsole() {\n  echo \"efi-framebuffer.0\" > /sys/bus/platform/drivers/efi-framebuffer/bind\n  sleep .5\n  echo 1 > /sys/class/vtconsole/vtcon0/bind\n  echo 1 > /sys/class/vtconsole/vtcon1/bind\n}\n```\n\nAnd then for the X server\n\n```sh\nkillall X\nsleep 5\n\n#unbind_fb_vtconsole\n\ndriver_bind $GPU vfio-pci\ndriver_bind $GPU_SND vfio-pci\nremove_pci_bridge\n\nperror \"[*] switching monitor 1 to mDP\"\nddccontrol -r 0x60 -w 16 dev:/dev/i2c-3\n\ntouch /tmp/vm.lock\nsu alex -c startx\n\nrebind_fb_vtconsole\n```\n\nAnd for when I'm done with the VM:\n\n```sh\nkillall X\nsleep 5\n\ndriver_bind $GPU nvidia\ndriver_bind $GPU_SND snd_hda_intel\nbus_rescan\n\nrm /tmp/vm.lock\nddccontrol -r 0x60 -w 15 dev:/dev/i2c-3\n#rebind_fb_vtconsole\nsu alex -c startx\n```\n\n# QEMU parameters\n\nI'm using Qemu 3.1.0 at the time of updating this article.\n\n\n```\nexport QEMU_AUDIO_DRV=pa\nqemu-system-x86_64 -enable-kvm -m 8G \\\n  -machine pc-q35-3.0,accel=kvm \\\n  -cpu host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_time,hv_vapic,hv_vendor_id=0xDEADBEEFFF \\\n  -rtc clock=host,base=localtime \\\n  -smp 4,sockets=1,cores=2,threads=2 \\\n  -vga none \\\n  -soundhw ac97 \\\n  -device vfio-pci,host=01:00.0,multifunction=on,x-vga=on \\\n  -device vfio-pci,host=01:00.1 \\\n  -drive if=pflash,format=raw,file=/usr/share/edk2-ovmf/OVMF_CODE.fd \\\n  -device ide-cd,bus=ide.1,drive=virtiocd1 \\\n  -drive media=cdrom,file=/tank/vm/win10.iso,id=virtiocd1,if=none \\\n  -object input-linux,id=kbd,evdev=/dev/input/by-id/usb-04d9_USB-HID_Keyboard-event-kbd,grab_all=on,repeat=on \\\n  -object input-linux,id=mouse,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-event-mouse \\\n  -object input-linux,id=kbd2,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-if01-event-kbd,grab_all=on,repeat=on \\\n  -device virtio-scsi-pci,id=scsi0 \\\n  -device scsi-hd,bus=scsi0.0,drive=rootfs \\\n  -drive id=rootfs,file=/tank/vm/photog.qcow2,id=disk,format=qcow2,if=none \\\n```\n","source":"_posts/running-windows-with-pci-passthrough-on-gentoo-linux.md","raw":"---\ntitle: Running Windows with PCI passthrough enabled on Gentoo Linux\ndate: 2018-07-27 12:23:18\ntags:\n - linux\n - gentoo\n - nvidia\n - pci-passthrough\n - qemu\n---\n\n# Why?\n\n* I have a 1080 GTX that I use to power my 2 1440p screens, render high\ndefinition video, re-encoding and also to play Dota 2 on Linux.\n* I also foresee the card running CUDA specific stuff just out of personal\ninterest.\n* I _hate_ rebooting machines (the box is also a ZFS datastore that is accessible\nover the network, music server, etc.).\n* I want to play certain games on Windows (GTA V, Dying Light, etc.)\n\n# Hardware\n\nThe requirements for pci passthrough can be found all over the internet,\nparticularly in the Arch wiki, but in short: If you've an Intel processor it\nwill need to support VT-d and IOMMU. Most modern processors support that. The\nQEMU wiki states that most K processors don't - but the 8700k does support it.\n\nThe motherboard needs to support it as well (and again, most modern boards do)\n  but some manufacturers are known to disable it to shave cost. Google around.\n\nThe MSI z370-A PRO board supports it. Couldn't find it in a database somewhere\nbut it does (tested).\n\nI don't want to have two separate KB and mouse because that beats the point of\nwhat I'm trying to achieve. I want a Linux host that can run games at times and\nsorta 'alt-tab' into each other. However, if you care about achieving bare\nmetal latencies - you'd need to get a PCI USB hub that can be passed through.\n\nThe z370-A PRO motherboard comes with only 1 xHCI USB hub.\n\nThe rest of this post is tailored to hardware I own so\n\n| Components                            |\n| ------------------------------------- |\n| Intel i7 8700k                        |\n| MSI z370-A PRO                        |\n| G.Skill Ripjaws V 16GB @ 3000MHz CL15 |\n| Corsair 128GB SATA3 SSD               |\n| Generic HID Keyboard                  |\n| Generic HID Mouse                     |\n\nThe SSD is from another computer that no longer exists and was scavenged.\n\nIt is important that there's two GPUs available on the system. The i7 8700k\ncomes with its integrated graphics and that works fine.\n\n# BIOS Setup\n\nEnable VT-d in Overclocking (smh) -> CPU features. I have no idea why it's not\nenabled by default on this motherboard.\n\nSet the boot GPU to the Intel i915 by navigating to Advanced -> Integrated\nGraphics Configuration -> Set to IGD.\n\nWhen I boot from the 1080 GTX everything still works, but I can swap X between\nnvidia and intel gpus exactly _two_ times. Any more and it'll stall the CPU and\nI have to REISUB the machine. Details can be found in the email I sent to the\nvfio-users mailing list [here](https://www.redhat.com/archives/vfio-users/2018-July/msg00005.html).\n\n# Kernel setup\n\nI'm on gentoo-sources 4.17.9 at the time of writing. You need to keyword it so\nyou'd need\n\n```\nsys-kernel/gentoo-sources ~amd64\n```\n\nEnable the following for IOMMU\n\n```\nCONFIG_IOMMU_SUPPORT\nCONFIG_INTEL_IOMMU\nCONFIG_INTEL_IOMMU_SVM\nCONFIG_IRQ_REMAP\nCONFIG_VFIO\nCONFIG_VFIO_PCI\nCONFIG_VFIO_PCI_VGA\n```\n\nI'll also upload my kernel configuration so that it's easier to reference.\n\n\nThen add to `/etc/default/grub` and reboot\n\n```\nGRUB_CMDLINE_LINUX=\"iommu=on intel_iommu=on\"\n```\n\nCheck if the options work by checking the log\n\n```\nalex@trixie ~ $ dmesg | grep -e IOMMU -e DMAR\n[    0.000000] ACPI: DMAR 0x000000007C5A8880 0000A8 (v01 INTEL  EDK2     00000001 INTL 00000001)\n[    0.000000] DMAR: IOMMU enabled\n```\n\nAlso enable the relevant Kernel flags for the Intel GPU and NVIDA GPU (see the\ngentoo handbook for this).\n\nThe i965 (newer i915 name in mesa) seems to flicker on my screen and cause\nartifacts at times. The Arch wiki recommends adding `i915.enable_psr=0` to get\naround that. You can find more details about that here.\n\n# Display setup\n\nI changed my display setup slightly to remove DP chaining. The final setup is\nlike so\n\n```\n\n                                +--------------+    +--------------+\n                                |  2560x1440   |    | 2560x1440    |\n                                |  MST on      |    | MST off      |\n                                |  DP1.2       |    |              |\n                                |              |    |              |\n                                +-----+--------+    +----+---------+\n                             mDP in|  |      DP out      |  DP in\n                                   |  |                  |\n                                   |  |                  |\n                                   |  |                  |\n+------------+DP out               |  |                  |\n|  Intel     +---------------------+  |                  |\n|  Onboard   |                        |                  |\n|            |                        |                  |\n+------------+                        |                  |\n                                      |                  |\n+------------+        DP              |                  |\n|            +------------------------+                  |\n| GTX 1080   |                                           |\n|            +-------------------------------------------+\n+------------+\n```\n\nI removed the DP chaining because if you're (and you should be) using the nvidia\nproprietary drivers on Linux, there's a bug preventing DDC control from working\nover DP.\n\nDDC control enables us to switch the inputs of the monitors from mDP <-> DP from\nsoftware (i2c write). It works fine with the intel GPU which works out well for\nus since that's the display that'll be running X when we're in passthrough.\n\nThere's a nice little utility called `ddccontrol` that enables us to use this.\n\n```\n=app-misc/ddccontrol-db-20061014_p20121105 ~amd64\n=app-misc/ddccontrol-0.4.2_p20140105-r2 ~amd64\n\nemerge -a ddccontrol\n```\n\n# IOMMU Groups\n\nAnd IOMMU group is the smallest set of devices the VM can grab at a time.\n\nYou can check your IOMMU groups by running this little command that I got from\nmany sources (Archwiki, /vg/s installgentoo page)\n\n```sh\nfor iommu_group in \\\n      $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -type d); do \\\n  echo \"IOMMU group $(basename \"$iommu_group\")\"; \\\n  for device in $(ls -1 \"$iommu_group\"/devices/); do \\\n    echo -n $'\\t'; lspci -nns \"$device\"; \\\n  done; \\\ndone\n```\n\nMine are\n\n```\nIOMMU group 7\n        00:1c.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #1 [8086:a290] (rev f0)\nIOMMU group 5\n        00:16.0 Communication controller [0780]: Intel Corporation 200 Series PCH CSME HECI #1 [8086:a2ba]\nIOMMU group 3\n        00:08.0 System peripheral [0880]: Intel Corporation Xeon E3-1200 v5/v6 / E3-1500 v5 / 6th/7th Gen Core Processor Gaussian Mixture Model [8086:1911]\nIOMMU group 11\n        03:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)\nIOMMU group 1\n        00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07)\n        01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1)\n        01:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)\nIOMMU group 8\n        00:1c.3 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #4 [8086:a293] (rev f0)\nIOMMU group 6\n        00:17.0 SATA controller [0106]: Intel Corporation 200 Series PCH SATA controller [AHCI mode] [8086:a282]\nIOMMU group 4\n        00:14.0 USB controller [0c03]: Intel Corporation 200 Series PCH USB 3.0 xHCI Controller [8086:a2af]\n        00:14.2 Signal processing controller [1180]: Intel Corporation 200 Series PCH Thermal Subsystem [8086:a2b1]\nIOMMU group 12\n        04:00.0 Non-Volatile memory controller [0108]: Samsung Electronics Co Ltd Device [144d:a808]\nIOMMU group 2\n        00:02.0 VGA compatible controller [0300]: Intel Corporation Device [8086:3e92]\nIOMMU group 10\n        00:1f.0 ISA bridge [0601]: Intel Corporation Device [8086:a2c9]\n        00:1f.2 Memory controller [0580]: Intel Corporation 200 Series PCH PMC [8086:a2a1]\n        00:1f.3 Audio device [0403]: Intel Corporation 200 Series PCH HD Audio [8086:a2f0]\n        00:1f.4 SMBus [0c05]: Intel Corporation 200 Series PCH SMBus Controller [8086:a2a3]\nIOMMU group 0\n        00:00.0 Host bridge [0600]: Intel Corporation Device [8086:3ec2] (rev 07)\nIOMMU group 9\n        00:1d.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #9 [8086:a298] (rev f0)\n```\n\nMy IOMMU group 1 is perfect, which is basically just my nvidia GPU and its HD\naudio device. The PCI bridge can be ignored but it needs to be removed from the\npcieport driver before we can bind the gpu to the vm.\n\nThough if you have things like your network card inside the same group then\ngrabbing it is going to be more difficult. You can try an ACS patch which may be\nable to break down your IOMMU groups further. I don't need it with this setup.\nYet.\n\n\n# X server stuff\n\nLike I mentioned before the host graphics is equally important and I do more\nwork on the host. I use a generic `xorg.conf` that is generated by\n`nvidia-xconfig` to configure my graphics initially.\n\nI leave that file untouched in `/etc/X11`.\n\nI have a seperate Xorg configuration that I use for the Intel i915\n\n```\nSection \"Device\"\n        Identifier  \"intel\"\n        Driver      \"modesetting\"\n        BusID       \"PCI:0:2:0\"\nEndSection\n```\n\nThis filed is named `intel.xorg.conf` and dumped in the same directory.\n\nUpdate:\n\nI no longer patch `xinit`. I started using a login manager: SLiM, which also\nstarts a consolekit session (makes things easier). I keep the default config as\n`/etc/slim.conf.orig` and symlink either that or `/etc/slim.conf.intel` which\nhas the server argument `-config xorg.conf.intel` to `/etc/slim.conf`.\n\n# Relevant scripts\n\nHere's how I start and stop my VM and bind to different environments. This is\nnot perfect (neither is anything in this post) and criticism is welcome. Pull\nrequests too.\n\nI don't use virt-manager or libvirt because\n\n* I don't want another layer of abstraction\n* XML makes life difficult and there are still parameters that can't be passed\nin via the configuration file\n* XML\n* Did I mention XML?\n\nMy scripts are `sh` compatible and do not require any special shell.\n\nThis part prepares the drivers and binding to vfio-pci as required. I don't\nthink that the rebinding of vtconsole is required.\n\n```sh\n#!/bin/sh\n\n# PCIe device ids\nGPU=0000:01:00.0\nGPU_SND=0000:01:00.1\nPCI_BRIDGE=0000:00:01.0\n\n# this script is intended to be run as root\n# @TODO put in a check against whoami or $USER\n\nfunction perror() {\n  echo \"$@\" 1>&2;\n}\n\nfunction bus_rescan() {\n  perror \"[*] rescaning pci bus\"\n  echo 1 > /sys/bus/pci/rescan\n  sleep 1\n}\n\n# usage\n# vfio-bind $GPU vfio-bind\nfunction driver_bind() {\n  DEV=\"$1\"\n  DRV=\"$2\"\n  VENDOR=$(< /sys/bus/pci/devices/$DEV/vendor)\n  DEVICE=$(< /sys/bus/pci/devices/$DEV/device)\n  if [ -e /sys/bus/pci/devices/$DEV/driver ]; then\n    perror \"[*] unbinding $DEV\"\n    echo $DEV > /sys/bus/pci/devices/$DEV/driver/unbind\n    sleep 1\n  else\n    perror \"[!] existing driver for $DEV not found\"\n  fi\n  perror \"[*] binding $DEV to $DRV\"\n  echo $VENDOR $DEVICE > /sys/bus/pci/drivers/$DRV/new_id\n}\n\nfunction remove_pci_bridge() {\n  perror \"[*] removing pci bridge\"\n  echo 1 > /sys/bus/pci/devices/$PCI_BRIDGE/remove\n  bus_rescan\n}\n\nfunction unbind_fb_vtconsole() {\n  perror \"[*] removing efifb and vtconsole binding\"\n  perror \"[!!] you WILL lose console\"\n  echo \"efi-framebuffer.0\" > /sys/bus/platform/drivers/efi-framebuffer/unbind\n  sleep .5\n  echo 0 > /sys/class/vtconsole/vtcon0/bind\n  echo 0 > /sys/class/vtconsole/vtcon1/bind\n}\n\nfunction rebind_fb_vtconsole() {\n  echo \"efi-framebuffer.0\" > /sys/bus/platform/drivers/efi-framebuffer/bind\n  sleep .5\n  echo 1 > /sys/class/vtconsole/vtcon0/bind\n  echo 1 > /sys/class/vtconsole/vtcon1/bind\n}\n```\n\nAnd then for the X server\n\n```sh\nkillall X\nsleep 5\n\n#unbind_fb_vtconsole\n\ndriver_bind $GPU vfio-pci\ndriver_bind $GPU_SND vfio-pci\nremove_pci_bridge\n\nperror \"[*] switching monitor 1 to mDP\"\nddccontrol -r 0x60 -w 16 dev:/dev/i2c-3\n\ntouch /tmp/vm.lock\nsu alex -c startx\n\nrebind_fb_vtconsole\n```\n\nAnd for when I'm done with the VM:\n\n```sh\nkillall X\nsleep 5\n\ndriver_bind $GPU nvidia\ndriver_bind $GPU_SND snd_hda_intel\nbus_rescan\n\nrm /tmp/vm.lock\nddccontrol -r 0x60 -w 15 dev:/dev/i2c-3\n#rebind_fb_vtconsole\nsu alex -c startx\n```\n\n# QEMU parameters\n\nI'm using Qemu 3.1.0 at the time of updating this article.\n\n\n```\nexport QEMU_AUDIO_DRV=pa\nqemu-system-x86_64 -enable-kvm -m 8G \\\n  -machine pc-q35-3.0,accel=kvm \\\n  -cpu host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_time,hv_vapic,hv_vendor_id=0xDEADBEEFFF \\\n  -rtc clock=host,base=localtime \\\n  -smp 4,sockets=1,cores=2,threads=2 \\\n  -vga none \\\n  -soundhw ac97 \\\n  -device vfio-pci,host=01:00.0,multifunction=on,x-vga=on \\\n  -device vfio-pci,host=01:00.1 \\\n  -drive if=pflash,format=raw,file=/usr/share/edk2-ovmf/OVMF_CODE.fd \\\n  -device ide-cd,bus=ide.1,drive=virtiocd1 \\\n  -drive media=cdrom,file=/tank/vm/win10.iso,id=virtiocd1,if=none \\\n  -object input-linux,id=kbd,evdev=/dev/input/by-id/usb-04d9_USB-HID_Keyboard-event-kbd,grab_all=on,repeat=on \\\n  -object input-linux,id=mouse,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-event-mouse \\\n  -object input-linux,id=kbd2,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-if01-event-kbd,grab_all=on,repeat=on \\\n  -device virtio-scsi-pci,id=scsi0 \\\n  -device scsi-hd,bus=scsi0.0,drive=rootfs \\\n  -drive id=rootfs,file=/tank/vm/photog.qcow2,id=disk,format=qcow2,if=none \\\n```\n","slug":"running-windows-with-pci-passthrough-on-gentoo-linux","published":1,"updated":"2019-03-18T11:18:23.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjveas000wgs5naqf8x6hq","content":"<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h1><ul>\n<li>I have a 1080 GTX that I use to power my 2 1440p screens, render high\ndefinition video, re-encoding and also to play Dota 2 on Linux.</li>\n<li>I also foresee the card running CUDA specific stuff just out of personal\ninterest.</li>\n<li>I <em>hate</em> rebooting machines (the box is also a ZFS datastore that is accessible\nover the network, music server, etc.).</li>\n<li>I want to play certain games on Windows (GTA V, Dying Light, etc.)</li>\n</ul>\n<h1 id=\"Hardware\"><a href=\"#Hardware\" class=\"headerlink\" title=\"Hardware\"></a>Hardware</h1><p>The requirements for pci passthrough can be found all over the internet,\nparticularly in the Arch wiki, but in short: If you’ve an Intel processor it\nwill need to support VT-d and IOMMU. Most modern processors support that. The\nQEMU wiki states that most K processors don’t - but the 8700k does support it.</p>\n<p>The motherboard needs to support it as well (and again, most modern boards do)\n  but some manufacturers are known to disable it to shave cost. Google around.</p>\n<p>The MSI z370-A PRO board supports it. Couldn’t find it in a database somewhere\nbut it does (tested).</p>\n<p>I don’t want to have two separate KB and mouse because that beats the point of\nwhat I’m trying to achieve. I want a Linux host that can run games at times and\nsorta ‘alt-tab’ into each other. However, if you care about achieving bare\nmetal latencies - you’d need to get a PCI USB hub that can be passed through.</p>\n<p>The z370-A PRO motherboard comes with only 1 xHCI USB hub.</p>\n<p>The rest of this post is tailored to hardware I own so</p>\n<table>\n<thead>\n<tr>\n<th>Components</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Intel i7 8700k</td>\n</tr>\n<tr>\n<td>MSI z370-A PRO</td>\n</tr>\n<tr>\n<td>G.Skill Ripjaws V 16GB @ 3000MHz CL15</td>\n</tr>\n<tr>\n<td>Corsair 128GB SATA3 SSD</td>\n</tr>\n<tr>\n<td>Generic HID Keyboard</td>\n</tr>\n<tr>\n<td>Generic HID Mouse</td>\n</tr>\n</tbody>\n</table>\n<p>The SSD is from another computer that no longer exists and was scavenged.</p>\n<p>It is important that there’s two GPUs available on the system. The i7 8700k\ncomes with its integrated graphics and that works fine.</p>\n<h1 id=\"BIOS-Setup\"><a href=\"#BIOS-Setup\" class=\"headerlink\" title=\"BIOS Setup\"></a>BIOS Setup</h1><p>Enable VT-d in Overclocking (smh) -&gt; CPU features. I have no idea why it’s not\nenabled by default on this motherboard.</p>\n<p>Set the boot GPU to the Intel i915 by navigating to Advanced -&gt; Integrated\nGraphics Configuration -&gt; Set to IGD.</p>\n<p>When I boot from the 1080 GTX everything still works, but I can swap X between\nnvidia and intel gpus exactly <em>two</em> times. Any more and it’ll stall the CPU and\nI have to REISUB the machine. Details can be found in the email I sent to the\nvfio-users mailing list <a href=\"https://www.redhat.com/archives/vfio-users/2018-July/msg00005.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h1 id=\"Kernel-setup\"><a href=\"#Kernel-setup\" class=\"headerlink\" title=\"Kernel setup\"></a>Kernel setup</h1><p>I’m on gentoo-sources 4.17.9 at the time of writing. You need to keyword it so\nyou’d need</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys-kernel/gentoo-sources ~amd64</span><br></pre></td></tr></table></figure>\n<p>Enable the following for IOMMU</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_IOMMU_SUPPORT</span><br><span class=\"line\">CONFIG_INTEL_IOMMU</span><br><span class=\"line\">CONFIG_INTEL_IOMMU_SVM</span><br><span class=\"line\">CONFIG_IRQ_REMAP</span><br><span class=\"line\">CONFIG_VFIO</span><br><span class=\"line\">CONFIG_VFIO_PCI</span><br><span class=\"line\">CONFIG_VFIO_PCI_VGA</span><br></pre></td></tr></table></figure>\n<p>I’ll also upload my kernel configuration so that it’s easier to reference.</p>\n<p>Then add to <code>/etc/default/grub</code> and reboot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;iommu=on intel_iommu=on&quot;</span><br></pre></td></tr></table></figure>\n<p>Check if the options work by checking the log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alex@trixie ~ $ dmesg | grep -e IOMMU -e DMAR</span><br><span class=\"line\">[    0.000000] ACPI: DMAR 0x000000007C5A8880 0000A8 (v01 INTEL  EDK2     00000001 INTL 00000001)</span><br><span class=\"line\">[    0.000000] DMAR: IOMMU enabled</span><br></pre></td></tr></table></figure>\n<p>Also enable the relevant Kernel flags for the Intel GPU and NVIDA GPU (see the\ngentoo handbook for this).</p>\n<p>The i965 (newer i915 name in mesa) seems to flicker on my screen and cause\nartifacts at times. The Arch wiki recommends adding <code>i915.enable_psr=0</code> to get\naround that. You can find more details about that here.</p>\n<h1 id=\"Display-setup\"><a href=\"#Display-setup\" class=\"headerlink\" title=\"Display setup\"></a>Display setup</h1><p>I changed my display setup slightly to remove DP chaining. The final setup is\nlike so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                                +--------------+    +--------------+</span><br><span class=\"line\">                                |  2560x1440   |    | 2560x1440    |</span><br><span class=\"line\">                                |  MST on      |    | MST off      |</span><br><span class=\"line\">                                |  DP1.2       |    |              |</span><br><span class=\"line\">                                |              |    |              |</span><br><span class=\"line\">                                +-----+--------+    +----+---------+</span><br><span class=\"line\">                             mDP in|  |      DP out      |  DP in</span><br><span class=\"line\">                                   |  |                  |</span><br><span class=\"line\">                                   |  |                  |</span><br><span class=\"line\">                                   |  |                  |</span><br><span class=\"line\">+------------+DP out               |  |                  |</span><br><span class=\"line\">|  Intel     +---------------------+  |                  |</span><br><span class=\"line\">|  Onboard   |                        |                  |</span><br><span class=\"line\">|            |                        |                  |</span><br><span class=\"line\">+------------+                        |                  |</span><br><span class=\"line\">                                      |                  |</span><br><span class=\"line\">+------------+        DP              |                  |</span><br><span class=\"line\">|            +------------------------+                  |</span><br><span class=\"line\">| GTX 1080   |                                           |</span><br><span class=\"line\">|            +-------------------------------------------+</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure>\n<p>I removed the DP chaining because if you’re (and you should be) using the nvidia\nproprietary drivers on Linux, there’s a bug preventing DDC control from working\nover DP.</p>\n<p>DDC control enables us to switch the inputs of the monitors from mDP <-> DP from\nsoftware (i2c write). It works fine with the intel GPU which works out well for\nus since that’s the display that’ll be running X when we’re in passthrough.</-></p>\n<p>There’s a nice little utility called <code>ddccontrol</code> that enables us to use this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=app-misc/ddccontrol-db-20061014_p20121105 ~amd64</span><br><span class=\"line\">=app-misc/ddccontrol-0.4.2_p20140105-r2 ~amd64</span><br><span class=\"line\"></span><br><span class=\"line\">emerge -a ddccontrol</span><br></pre></td></tr></table></figure>\n<h1 id=\"IOMMU-Groups\"><a href=\"#IOMMU-Groups\" class=\"headerlink\" title=\"IOMMU Groups\"></a>IOMMU Groups</h1><p>And IOMMU group is the smallest set of devices the VM can grab at a time.</p>\n<p>You can check your IOMMU groups by running this little command that I got from\nmany sources (Archwiki, /vg/s installgentoo page)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> iommu_group <span class=\"keyword\">in</span> \\</span><br><span class=\"line\">      $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -<span class=\"built_in\">type</span> d); <span class=\"keyword\">do</span> \\</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"IOMMU group <span class=\"variable\">$(basename \"$iommu_group\")</span>\"</span>; \\</span><br><span class=\"line\">  <span class=\"keyword\">for</span> device <span class=\"keyword\">in</span> $(ls -1 <span class=\"string\">\"<span class=\"variable\">$iommu_group</span>\"</span>/devices/); <span class=\"keyword\">do</span> \\</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">'\\t'</span>; lspci -nns <span class=\"string\">\"<span class=\"variable\">$device</span>\"</span>; \\</span><br><span class=\"line\">  <span class=\"keyword\">done</span>; \\</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>Mine are</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IOMMU group 7</span><br><span class=\"line\">        00:1c.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #1 [8086:a290] (rev f0)</span><br><span class=\"line\">IOMMU group 5</span><br><span class=\"line\">        00:16.0 Communication controller [0780]: Intel Corporation 200 Series PCH CSME HECI #1 [8086:a2ba]</span><br><span class=\"line\">IOMMU group 3</span><br><span class=\"line\">        00:08.0 System peripheral [0880]: Intel Corporation Xeon E3-1200 v5/v6 / E3-1500 v5 / 6th/7th Gen Core Processor Gaussian Mixture Model [8086:1911]</span><br><span class=\"line\">IOMMU group 11</span><br><span class=\"line\">        03:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)</span><br><span class=\"line\">IOMMU group 1</span><br><span class=\"line\">        00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07)</span><br><span class=\"line\">        01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1)</span><br><span class=\"line\">        01:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)</span><br><span class=\"line\">IOMMU group 8</span><br><span class=\"line\">        00:1c.3 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #4 [8086:a293] (rev f0)</span><br><span class=\"line\">IOMMU group 6</span><br><span class=\"line\">        00:17.0 SATA controller [0106]: Intel Corporation 200 Series PCH SATA controller [AHCI mode] [8086:a282]</span><br><span class=\"line\">IOMMU group 4</span><br><span class=\"line\">        00:14.0 USB controller [0c03]: Intel Corporation 200 Series PCH USB 3.0 xHCI Controller [8086:a2af]</span><br><span class=\"line\">        00:14.2 Signal processing controller [1180]: Intel Corporation 200 Series PCH Thermal Subsystem [8086:a2b1]</span><br><span class=\"line\">IOMMU group 12</span><br><span class=\"line\">        04:00.0 Non-Volatile memory controller [0108]: Samsung Electronics Co Ltd Device [144d:a808]</span><br><span class=\"line\">IOMMU group 2</span><br><span class=\"line\">        00:02.0 VGA compatible controller [0300]: Intel Corporation Device [8086:3e92]</span><br><span class=\"line\">IOMMU group 10</span><br><span class=\"line\">        00:1f.0 ISA bridge [0601]: Intel Corporation Device [8086:a2c9]</span><br><span class=\"line\">        00:1f.2 Memory controller [0580]: Intel Corporation 200 Series PCH PMC [8086:a2a1]</span><br><span class=\"line\">        00:1f.3 Audio device [0403]: Intel Corporation 200 Series PCH HD Audio [8086:a2f0]</span><br><span class=\"line\">        00:1f.4 SMBus [0c05]: Intel Corporation 200 Series PCH SMBus Controller [8086:a2a3]</span><br><span class=\"line\">IOMMU group 0</span><br><span class=\"line\">        00:00.0 Host bridge [0600]: Intel Corporation Device [8086:3ec2] (rev 07)</span><br><span class=\"line\">IOMMU group 9</span><br><span class=\"line\">        00:1d.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #9 [8086:a298] (rev f0)</span><br></pre></td></tr></table></figure>\n<p>My IOMMU group 1 is perfect, which is basically just my nvidia GPU and its HD\naudio device. The PCI bridge can be ignored but it needs to be removed from the\npcieport driver before we can bind the gpu to the vm.</p>\n<p>Though if you have things like your network card inside the same group then\ngrabbing it is going to be more difficult. You can try an ACS patch which may be\nable to break down your IOMMU groups further. I don’t need it with this setup.\nYet.</p>\n<h1 id=\"X-server-stuff\"><a href=\"#X-server-stuff\" class=\"headerlink\" title=\"X server stuff\"></a>X server stuff</h1><p>Like I mentioned before the host graphics is equally important and I do more\nwork on the host. I use a generic <code>xorg.conf</code> that is generated by\n<code>nvidia-xconfig</code> to configure my graphics initially.</p>\n<p>I leave that file untouched in <code>/etc/X11</code>.</p>\n<p>I have a seperate Xorg configuration that I use for the Intel i915</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section &quot;Device&quot;</span><br><span class=\"line\">        Identifier  &quot;intel&quot;</span><br><span class=\"line\">        Driver      &quot;modesetting&quot;</span><br><span class=\"line\">        BusID       &quot;PCI:0:2:0&quot;</span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure>\n<p>This filed is named <code>intel.xorg.conf</code> and dumped in the same directory.</p>\n<p>Update:</p>\n<p>I no longer patch <code>xinit</code>. I started using a login manager: SLiM, which also\nstarts a consolekit session (makes things easier). I keep the default config as\n<code>/etc/slim.conf.orig</code> and symlink either that or <code>/etc/slim.conf.intel</code> which\nhas the server argument <code>-config xorg.conf.intel</code> to <code>/etc/slim.conf</code>.</p>\n<h1 id=\"Relevant-scripts\"><a href=\"#Relevant-scripts\" class=\"headerlink\" title=\"Relevant scripts\"></a>Relevant scripts</h1><p>Here’s how I start and stop my VM and bind to different environments. This is\nnot perfect (neither is anything in this post) and criticism is welcome. Pull\nrequests too.</p>\n<p>I don’t use virt-manager or libvirt because</p>\n<ul>\n<li>I don’t want another layer of abstraction</li>\n<li>XML makes life difficult and there are still parameters that can’t be passed\nin via the configuration file</li>\n<li>XML</li>\n<li>Did I mention XML?</li>\n</ul>\n<p>My scripts are <code>sh</code> compatible and do not require any special shell.</p>\n<p>This part prepares the drivers and binding to vfio-pci as required. I don’t\nthink that the rebinding of vtconsole is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PCIe device ids</span></span><br><span class=\"line\">GPU=0000:01:00.0</span><br><span class=\"line\">GPU_SND=0000:01:00.1</span><br><span class=\"line\">PCI_BRIDGE=0000:00:01.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this script is intended to be run as root</span></span><br><span class=\"line\"><span class=\"comment\"># @TODO put in a check against whoami or $USER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">perror</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 1&gt;&amp;2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bus_rescan</span></span>() &#123;</span><br><span class=\"line\">  perror <span class=\"string\">\"[*] rescaning pci bus\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/bus/pci/rescan</span><br><span class=\"line\">  sleep 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># usage</span></span><br><span class=\"line\"><span class=\"comment\"># vfio-bind $GPU vfio-bind</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">driver_bind</span></span>() &#123;</span><br><span class=\"line\">  DEV=<span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\">  DRV=<span class=\"string\">\"<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">  VENDOR=$(&lt; /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/vendor)</span><br><span class=\"line\">  DEVICE=$(&lt; /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/device)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -e /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/driver ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    perror <span class=\"string\">\"[*] unbinding <span class=\"variable\">$DEV</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$DEV</span> &gt; /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/driver/unbind</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    perror <span class=\"string\">\"[!] existing driver for <span class=\"variable\">$DEV</span> not found\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  perror <span class=\"string\">\"[*] binding <span class=\"variable\">$DEV</span> to <span class=\"variable\">$DRV</span>\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$VENDOR</span> <span class=\"variable\">$DEVICE</span> &gt; /sys/bus/pci/drivers/<span class=\"variable\">$DRV</span>/new_id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">remove_pci_bridge</span></span>() &#123;</span><br><span class=\"line\">  perror <span class=\"string\">\"[*] removing pci bridge\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/bus/pci/devices/<span class=\"variable\">$PCI_BRIDGE</span>/remove</span><br><span class=\"line\">  bus_rescan</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">unbind_fb_vtconsole</span></span>() &#123;</span><br><span class=\"line\">  perror <span class=\"string\">\"[*] removing efifb and vtconsole binding\"</span></span><br><span class=\"line\">  perror <span class=\"string\">\"[!!] you WILL lose console\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"efi-framebuffer.0\"</span> &gt; /sys/bus/platform/drivers/efi-framebuffer/unbind</span><br><span class=\"line\">  sleep .5</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 0 &gt; /sys/class/vtconsole/vtcon0/<span class=\"built_in\">bind</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 0 &gt; /sys/class/vtconsole/vtcon1/<span class=\"built_in\">bind</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">rebind_fb_vtconsole</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"efi-framebuffer.0\"</span> &gt; /sys/bus/platform/drivers/efi-framebuffer/<span class=\"built_in\">bind</span></span><br><span class=\"line\">  sleep .5</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/class/vtconsole/vtcon0/<span class=\"built_in\">bind</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/class/vtconsole/vtcon1/<span class=\"built_in\">bind</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And then for the X server</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall X</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#unbind_fb_vtconsole</span></span><br><span class=\"line\"></span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU</span> vfio-pci</span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU_SND</span> vfio-pci</span><br><span class=\"line\">remove_pci_bridge</span><br><span class=\"line\"></span><br><span class=\"line\">perror <span class=\"string\">\"[*] switching monitor 1 to mDP\"</span></span><br><span class=\"line\">ddccontrol -r 0x60 -w 16 dev:/dev/i2c-3</span><br><span class=\"line\"></span><br><span class=\"line\">touch /tmp/vm.lock</span><br><span class=\"line\">su alex -c startx</span><br><span class=\"line\"></span><br><span class=\"line\">rebind_fb_vtconsole</span><br></pre></td></tr></table></figure>\n<p>And for when I’m done with the VM:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall X</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU</span> nvidia</span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU_SND</span> snd_hda_intel</span><br><span class=\"line\">bus_rescan</span><br><span class=\"line\"></span><br><span class=\"line\">rm /tmp/vm.lock</span><br><span class=\"line\">ddccontrol -r 0x60 -w 15 dev:/dev/i2c-3</span><br><span class=\"line\"><span class=\"comment\">#rebind_fb_vtconsole</span></span><br><span class=\"line\">su alex -c startx</span><br></pre></td></tr></table></figure>\n<h1 id=\"QEMU-parameters\"><a href=\"#QEMU-parameters\" class=\"headerlink\" title=\"QEMU parameters\"></a>QEMU parameters</h1><p>I’m using Qemu 3.1.0 at the time of updating this article.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export QEMU_AUDIO_DRV=pa</span><br><span class=\"line\">qemu-system-x86_64 -enable-kvm -m 8G \\</span><br><span class=\"line\">  -machine pc-q35-3.0,accel=kvm \\</span><br><span class=\"line\">  -cpu host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_time,hv_vapic,hv_vendor_id=0xDEADBEEFFF \\</span><br><span class=\"line\">  -rtc clock=host,base=localtime \\</span><br><span class=\"line\">  -smp 4,sockets=1,cores=2,threads=2 \\</span><br><span class=\"line\">  -vga none \\</span><br><span class=\"line\">  -soundhw ac97 \\</span><br><span class=\"line\">  -device vfio-pci,host=01:00.0,multifunction=on,x-vga=on \\</span><br><span class=\"line\">  -device vfio-pci,host=01:00.1 \\</span><br><span class=\"line\">  -drive if=pflash,format=raw,file=/usr/share/edk2-ovmf/OVMF_CODE.fd \\</span><br><span class=\"line\">  -device ide-cd,bus=ide.1,drive=virtiocd1 \\</span><br><span class=\"line\">  -drive media=cdrom,file=/tank/vm/win10.iso,id=virtiocd1,if=none \\</span><br><span class=\"line\">  -object input-linux,id=kbd,evdev=/dev/input/by-id/usb-04d9_USB-HID_Keyboard-event-kbd,grab_all=on,repeat=on \\</span><br><span class=\"line\">  -object input-linux,id=mouse,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-event-mouse \\</span><br><span class=\"line\">  -object input-linux,id=kbd2,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-if01-event-kbd,grab_all=on,repeat=on \\</span><br><span class=\"line\">  -device virtio-scsi-pci,id=scsi0 \\</span><br><span class=\"line\">  -device scsi-hd,bus=scsi0.0,drive=rootfs \\</span><br><span class=\"line\">  -drive id=rootfs,file=/tank/vm/photog.qcow2,id=disk,format=qcow2,if=none \\</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h1><ul>\n<li>I have a 1080 GTX that I use to power my 2 1440p screens, render high\ndefinition video, re-encoding and also to play Dota 2 on Linux.</li>\n<li>I also foresee the card running CUDA specific stuff just out of personal\ninterest.</li>\n<li>I <em>hate</em> rebooting machines (the box is also a ZFS datastore that is accessible\nover the network, music server, etc.).</li>\n<li>I want to play certain games on Windows (GTA V, Dying Light, etc.)</li>\n</ul>\n<h1 id=\"Hardware\"><a href=\"#Hardware\" class=\"headerlink\" title=\"Hardware\"></a>Hardware</h1><p>The requirements for pci passthrough can be found all over the internet,\nparticularly in the Arch wiki, but in short: If you’ve an Intel processor it\nwill need to support VT-d and IOMMU. Most modern processors support that. The\nQEMU wiki states that most K processors don’t - but the 8700k does support it.</p>\n<p>The motherboard needs to support it as well (and again, most modern boards do)\n  but some manufacturers are known to disable it to shave cost. Google around.</p>\n<p>The MSI z370-A PRO board supports it. Couldn’t find it in a database somewhere\nbut it does (tested).</p>\n<p>I don’t want to have two separate KB and mouse because that beats the point of\nwhat I’m trying to achieve. I want a Linux host that can run games at times and\nsorta ‘alt-tab’ into each other. However, if you care about achieving bare\nmetal latencies - you’d need to get a PCI USB hub that can be passed through.</p>\n<p>The z370-A PRO motherboard comes with only 1 xHCI USB hub.</p>\n<p>The rest of this post is tailored to hardware I own so</p>\n<table>\n<thead>\n<tr>\n<th>Components</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Intel i7 8700k</td>\n</tr>\n<tr>\n<td>MSI z370-A PRO</td>\n</tr>\n<tr>\n<td>G.Skill Ripjaws V 16GB @ 3000MHz CL15</td>\n</tr>\n<tr>\n<td>Corsair 128GB SATA3 SSD</td>\n</tr>\n<tr>\n<td>Generic HID Keyboard</td>\n</tr>\n<tr>\n<td>Generic HID Mouse</td>\n</tr>\n</tbody>\n</table>\n<p>The SSD is from another computer that no longer exists and was scavenged.</p>\n<p>It is important that there’s two GPUs available on the system. The i7 8700k\ncomes with its integrated graphics and that works fine.</p>\n<h1 id=\"BIOS-Setup\"><a href=\"#BIOS-Setup\" class=\"headerlink\" title=\"BIOS Setup\"></a>BIOS Setup</h1><p>Enable VT-d in Overclocking (smh) -&gt; CPU features. I have no idea why it’s not\nenabled by default on this motherboard.</p>\n<p>Set the boot GPU to the Intel i915 by navigating to Advanced -&gt; Integrated\nGraphics Configuration -&gt; Set to IGD.</p>\n<p>When I boot from the 1080 GTX everything still works, but I can swap X between\nnvidia and intel gpus exactly <em>two</em> times. Any more and it’ll stall the CPU and\nI have to REISUB the machine. Details can be found in the email I sent to the\nvfio-users mailing list <a href=\"https://www.redhat.com/archives/vfio-users/2018-July/msg00005.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h1 id=\"Kernel-setup\"><a href=\"#Kernel-setup\" class=\"headerlink\" title=\"Kernel setup\"></a>Kernel setup</h1><p>I’m on gentoo-sources 4.17.9 at the time of writing. You need to keyword it so\nyou’d need</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys-kernel/gentoo-sources ~amd64</span><br></pre></td></tr></table></figure>\n<p>Enable the following for IOMMU</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_IOMMU_SUPPORT</span><br><span class=\"line\">CONFIG_INTEL_IOMMU</span><br><span class=\"line\">CONFIG_INTEL_IOMMU_SVM</span><br><span class=\"line\">CONFIG_IRQ_REMAP</span><br><span class=\"line\">CONFIG_VFIO</span><br><span class=\"line\">CONFIG_VFIO_PCI</span><br><span class=\"line\">CONFIG_VFIO_PCI_VGA</span><br></pre></td></tr></table></figure>\n<p>I’ll also upload my kernel configuration so that it’s easier to reference.</p>\n<p>Then add to <code>/etc/default/grub</code> and reboot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_CMDLINE_LINUX=&quot;iommu=on intel_iommu=on&quot;</span><br></pre></td></tr></table></figure>\n<p>Check if the options work by checking the log</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alex@trixie ~ $ dmesg | grep -e IOMMU -e DMAR</span><br><span class=\"line\">[    0.000000] ACPI: DMAR 0x000000007C5A8880 0000A8 (v01 INTEL  EDK2     00000001 INTL 00000001)</span><br><span class=\"line\">[    0.000000] DMAR: IOMMU enabled</span><br></pre></td></tr></table></figure>\n<p>Also enable the relevant Kernel flags for the Intel GPU and NVIDA GPU (see the\ngentoo handbook for this).</p>\n<p>The i965 (newer i915 name in mesa) seems to flicker on my screen and cause\nartifacts at times. The Arch wiki recommends adding <code>i915.enable_psr=0</code> to get\naround that. You can find more details about that here.</p>\n<h1 id=\"Display-setup\"><a href=\"#Display-setup\" class=\"headerlink\" title=\"Display setup\"></a>Display setup</h1><p>I changed my display setup slightly to remove DP chaining. The final setup is\nlike so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">                                +--------------+    +--------------+</span><br><span class=\"line\">                                |  2560x1440   |    | 2560x1440    |</span><br><span class=\"line\">                                |  MST on      |    | MST off      |</span><br><span class=\"line\">                                |  DP1.2       |    |              |</span><br><span class=\"line\">                                |              |    |              |</span><br><span class=\"line\">                                +-----+--------+    +----+---------+</span><br><span class=\"line\">                             mDP in|  |      DP out      |  DP in</span><br><span class=\"line\">                                   |  |                  |</span><br><span class=\"line\">                                   |  |                  |</span><br><span class=\"line\">                                   |  |                  |</span><br><span class=\"line\">+------------+DP out               |  |                  |</span><br><span class=\"line\">|  Intel     +---------------------+  |                  |</span><br><span class=\"line\">|  Onboard   |                        |                  |</span><br><span class=\"line\">|            |                        |                  |</span><br><span class=\"line\">+------------+                        |                  |</span><br><span class=\"line\">                                      |                  |</span><br><span class=\"line\">+------------+        DP              |                  |</span><br><span class=\"line\">|            +------------------------+                  |</span><br><span class=\"line\">| GTX 1080   |                                           |</span><br><span class=\"line\">|            +-------------------------------------------+</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure>\n<p>I removed the DP chaining because if you’re (and you should be) using the nvidia\nproprietary drivers on Linux, there’s a bug preventing DDC control from working\nover DP.</p>\n<p>DDC control enables us to switch the inputs of the monitors from mDP <-> DP from\nsoftware (i2c write). It works fine with the intel GPU which works out well for\nus since that’s the display that’ll be running X when we’re in passthrough.</-></p>\n<p>There’s a nice little utility called <code>ddccontrol</code> that enables us to use this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=app-misc/ddccontrol-db-20061014_p20121105 ~amd64</span><br><span class=\"line\">=app-misc/ddccontrol-0.4.2_p20140105-r2 ~amd64</span><br><span class=\"line\"></span><br><span class=\"line\">emerge -a ddccontrol</span><br></pre></td></tr></table></figure>\n<h1 id=\"IOMMU-Groups\"><a href=\"#IOMMU-Groups\" class=\"headerlink\" title=\"IOMMU Groups\"></a>IOMMU Groups</h1><p>And IOMMU group is the smallest set of devices the VM can grab at a time.</p>\n<p>You can check your IOMMU groups by running this little command that I got from\nmany sources (Archwiki, /vg/s installgentoo page)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> iommu_group <span class=\"keyword\">in</span> \\</span><br><span class=\"line\">      $(find /sys/kernel/iommu_groups/ -maxdepth 1 -mindepth 1 -<span class=\"built_in\">type</span> d); <span class=\"keyword\">do</span> \\</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"IOMMU group <span class=\"variable\">$(basename \"$iommu_group\")</span>\"</span>; \\</span><br><span class=\"line\">  <span class=\"keyword\">for</span> device <span class=\"keyword\">in</span> $(ls -1 <span class=\"string\">\"<span class=\"variable\">$iommu_group</span>\"</span>/devices/); <span class=\"keyword\">do</span> \\</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -n $<span class=\"string\">'\\t'</span>; lspci -nns <span class=\"string\">\"<span class=\"variable\">$device</span>\"</span>; \\</span><br><span class=\"line\">  <span class=\"keyword\">done</span>; \\</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>Mine are</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IOMMU group 7</span><br><span class=\"line\">        00:1c.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #1 [8086:a290] (rev f0)</span><br><span class=\"line\">IOMMU group 5</span><br><span class=\"line\">        00:16.0 Communication controller [0780]: Intel Corporation 200 Series PCH CSME HECI #1 [8086:a2ba]</span><br><span class=\"line\">IOMMU group 3</span><br><span class=\"line\">        00:08.0 System peripheral [0880]: Intel Corporation Xeon E3-1200 v5/v6 / E3-1500 v5 / 6th/7th Gen Core Processor Gaussian Mixture Model [8086:1911]</span><br><span class=\"line\">IOMMU group 11</span><br><span class=\"line\">        03:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)</span><br><span class=\"line\">IOMMU group 1</span><br><span class=\"line\">        00:01.0 PCI bridge [0604]: Intel Corporation Xeon E3-1200 v5/E3-1500 v5/6th Gen Core Processor PCIe Controller (x16) [8086:1901] (rev 07)</span><br><span class=\"line\">        01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP104 [GeForce GTX 1080] [10de:1b80] (rev a1)</span><br><span class=\"line\">        01:00.1 Audio device [0403]: NVIDIA Corporation GP104 High Definition Audio Controller [10de:10f0] (rev a1)</span><br><span class=\"line\">IOMMU group 8</span><br><span class=\"line\">        00:1c.3 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #4 [8086:a293] (rev f0)</span><br><span class=\"line\">IOMMU group 6</span><br><span class=\"line\">        00:17.0 SATA controller [0106]: Intel Corporation 200 Series PCH SATA controller [AHCI mode] [8086:a282]</span><br><span class=\"line\">IOMMU group 4</span><br><span class=\"line\">        00:14.0 USB controller [0c03]: Intel Corporation 200 Series PCH USB 3.0 xHCI Controller [8086:a2af]</span><br><span class=\"line\">        00:14.2 Signal processing controller [1180]: Intel Corporation 200 Series PCH Thermal Subsystem [8086:a2b1]</span><br><span class=\"line\">IOMMU group 12</span><br><span class=\"line\">        04:00.0 Non-Volatile memory controller [0108]: Samsung Electronics Co Ltd Device [144d:a808]</span><br><span class=\"line\">IOMMU group 2</span><br><span class=\"line\">        00:02.0 VGA compatible controller [0300]: Intel Corporation Device [8086:3e92]</span><br><span class=\"line\">IOMMU group 10</span><br><span class=\"line\">        00:1f.0 ISA bridge [0601]: Intel Corporation Device [8086:a2c9]</span><br><span class=\"line\">        00:1f.2 Memory controller [0580]: Intel Corporation 200 Series PCH PMC [8086:a2a1]</span><br><span class=\"line\">        00:1f.3 Audio device [0403]: Intel Corporation 200 Series PCH HD Audio [8086:a2f0]</span><br><span class=\"line\">        00:1f.4 SMBus [0c05]: Intel Corporation 200 Series PCH SMBus Controller [8086:a2a3]</span><br><span class=\"line\">IOMMU group 0</span><br><span class=\"line\">        00:00.0 Host bridge [0600]: Intel Corporation Device [8086:3ec2] (rev 07)</span><br><span class=\"line\">IOMMU group 9</span><br><span class=\"line\">        00:1d.0 PCI bridge [0604]: Intel Corporation 200 Series PCH PCI Express Root Port #9 [8086:a298] (rev f0)</span><br></pre></td></tr></table></figure>\n<p>My IOMMU group 1 is perfect, which is basically just my nvidia GPU and its HD\naudio device. The PCI bridge can be ignored but it needs to be removed from the\npcieport driver before we can bind the gpu to the vm.</p>\n<p>Though if you have things like your network card inside the same group then\ngrabbing it is going to be more difficult. You can try an ACS patch which may be\nable to break down your IOMMU groups further. I don’t need it with this setup.\nYet.</p>\n<h1 id=\"X-server-stuff\"><a href=\"#X-server-stuff\" class=\"headerlink\" title=\"X server stuff\"></a>X server stuff</h1><p>Like I mentioned before the host graphics is equally important and I do more\nwork on the host. I use a generic <code>xorg.conf</code> that is generated by\n<code>nvidia-xconfig</code> to configure my graphics initially.</p>\n<p>I leave that file untouched in <code>/etc/X11</code>.</p>\n<p>I have a seperate Xorg configuration that I use for the Intel i915</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Section &quot;Device&quot;</span><br><span class=\"line\">        Identifier  &quot;intel&quot;</span><br><span class=\"line\">        Driver      &quot;modesetting&quot;</span><br><span class=\"line\">        BusID       &quot;PCI:0:2:0&quot;</span><br><span class=\"line\">EndSection</span><br></pre></td></tr></table></figure>\n<p>This filed is named <code>intel.xorg.conf</code> and dumped in the same directory.</p>\n<p>Update:</p>\n<p>I no longer patch <code>xinit</code>. I started using a login manager: SLiM, which also\nstarts a consolekit session (makes things easier). I keep the default config as\n<code>/etc/slim.conf.orig</code> and symlink either that or <code>/etc/slim.conf.intel</code> which\nhas the server argument <code>-config xorg.conf.intel</code> to <code>/etc/slim.conf</code>.</p>\n<h1 id=\"Relevant-scripts\"><a href=\"#Relevant-scripts\" class=\"headerlink\" title=\"Relevant scripts\"></a>Relevant scripts</h1><p>Here’s how I start and stop my VM and bind to different environments. This is\nnot perfect (neither is anything in this post) and criticism is welcome. Pull\nrequests too.</p>\n<p>I don’t use virt-manager or libvirt because</p>\n<ul>\n<li>I don’t want another layer of abstraction</li>\n<li>XML makes life difficult and there are still parameters that can’t be passed\nin via the configuration file</li>\n<li>XML</li>\n<li>Did I mention XML?</li>\n</ul>\n<p>My scripts are <code>sh</code> compatible and do not require any special shell.</p>\n<p>This part prepares the drivers and binding to vfio-pci as required. I don’t\nthink that the rebinding of vtconsole is required.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PCIe device ids</span></span><br><span class=\"line\">GPU=0000:01:00.0</span><br><span class=\"line\">GPU_SND=0000:01:00.1</span><br><span class=\"line\">PCI_BRIDGE=0000:00:01.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># this script is intended to be run as root</span></span><br><span class=\"line\"><span class=\"comment\"># @TODO put in a check against whoami or $USER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">perror</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 1&gt;&amp;2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bus_rescan</span></span>() &#123;</span><br><span class=\"line\">  perror <span class=\"string\">\"[*] rescaning pci bus\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/bus/pci/rescan</span><br><span class=\"line\">  sleep 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># usage</span></span><br><span class=\"line\"><span class=\"comment\"># vfio-bind $GPU vfio-bind</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">driver_bind</span></span>() &#123;</span><br><span class=\"line\">  DEV=<span class=\"string\">\"<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\">  DRV=<span class=\"string\">\"<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">  VENDOR=$(&lt; /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/vendor)</span><br><span class=\"line\">  DEVICE=$(&lt; /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/device)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -e /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/driver ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    perror <span class=\"string\">\"[*] unbinding <span class=\"variable\">$DEV</span>\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$DEV</span> &gt; /sys/bus/pci/devices/<span class=\"variable\">$DEV</span>/driver/unbind</span><br><span class=\"line\">    sleep 1</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    perror <span class=\"string\">\"[!] existing driver for <span class=\"variable\">$DEV</span> not found\"</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  perror <span class=\"string\">\"[*] binding <span class=\"variable\">$DEV</span> to <span class=\"variable\">$DRV</span>\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$VENDOR</span> <span class=\"variable\">$DEVICE</span> &gt; /sys/bus/pci/drivers/<span class=\"variable\">$DRV</span>/new_id</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">remove_pci_bridge</span></span>() &#123;</span><br><span class=\"line\">  perror <span class=\"string\">\"[*] removing pci bridge\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/bus/pci/devices/<span class=\"variable\">$PCI_BRIDGE</span>/remove</span><br><span class=\"line\">  bus_rescan</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">unbind_fb_vtconsole</span></span>() &#123;</span><br><span class=\"line\">  perror <span class=\"string\">\"[*] removing efifb and vtconsole binding\"</span></span><br><span class=\"line\">  perror <span class=\"string\">\"[!!] you WILL lose console\"</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"efi-framebuffer.0\"</span> &gt; /sys/bus/platform/drivers/efi-framebuffer/unbind</span><br><span class=\"line\">  sleep .5</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 0 &gt; /sys/class/vtconsole/vtcon0/<span class=\"built_in\">bind</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 0 &gt; /sys/class/vtconsole/vtcon1/<span class=\"built_in\">bind</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">rebind_fb_vtconsole</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"efi-framebuffer.0\"</span> &gt; /sys/bus/platform/drivers/efi-framebuffer/<span class=\"built_in\">bind</span></span><br><span class=\"line\">  sleep .5</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/class/vtconsole/vtcon0/<span class=\"built_in\">bind</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> 1 &gt; /sys/class/vtconsole/vtcon1/<span class=\"built_in\">bind</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>And then for the X server</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall X</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#unbind_fb_vtconsole</span></span><br><span class=\"line\"></span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU</span> vfio-pci</span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU_SND</span> vfio-pci</span><br><span class=\"line\">remove_pci_bridge</span><br><span class=\"line\"></span><br><span class=\"line\">perror <span class=\"string\">\"[*] switching monitor 1 to mDP\"</span></span><br><span class=\"line\">ddccontrol -r 0x60 -w 16 dev:/dev/i2c-3</span><br><span class=\"line\"></span><br><span class=\"line\">touch /tmp/vm.lock</span><br><span class=\"line\">su alex -c startx</span><br><span class=\"line\"></span><br><span class=\"line\">rebind_fb_vtconsole</span><br></pre></td></tr></table></figure>\n<p>And for when I’m done with the VM:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall X</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU</span> nvidia</span><br><span class=\"line\">driver_bind <span class=\"variable\">$GPU_SND</span> snd_hda_intel</span><br><span class=\"line\">bus_rescan</span><br><span class=\"line\"></span><br><span class=\"line\">rm /tmp/vm.lock</span><br><span class=\"line\">ddccontrol -r 0x60 -w 15 dev:/dev/i2c-3</span><br><span class=\"line\"><span class=\"comment\">#rebind_fb_vtconsole</span></span><br><span class=\"line\">su alex -c startx</span><br></pre></td></tr></table></figure>\n<h1 id=\"QEMU-parameters\"><a href=\"#QEMU-parameters\" class=\"headerlink\" title=\"QEMU parameters\"></a>QEMU parameters</h1><p>I’m using Qemu 3.1.0 at the time of updating this article.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export QEMU_AUDIO_DRV=pa</span><br><span class=\"line\">qemu-system-x86_64 -enable-kvm -m 8G \\</span><br><span class=\"line\">  -machine pc-q35-3.0,accel=kvm \\</span><br><span class=\"line\">  -cpu host,kvm=off,hv_relaxed,hv_spinlocks=0x1fff,hv_time,hv_vapic,hv_vendor_id=0xDEADBEEFFF \\</span><br><span class=\"line\">  -rtc clock=host,base=localtime \\</span><br><span class=\"line\">  -smp 4,sockets=1,cores=2,threads=2 \\</span><br><span class=\"line\">  -vga none \\</span><br><span class=\"line\">  -soundhw ac97 \\</span><br><span class=\"line\">  -device vfio-pci,host=01:00.0,multifunction=on,x-vga=on \\</span><br><span class=\"line\">  -device vfio-pci,host=01:00.1 \\</span><br><span class=\"line\">  -drive if=pflash,format=raw,file=/usr/share/edk2-ovmf/OVMF_CODE.fd \\</span><br><span class=\"line\">  -device ide-cd,bus=ide.1,drive=virtiocd1 \\</span><br><span class=\"line\">  -drive media=cdrom,file=/tank/vm/win10.iso,id=virtiocd1,if=none \\</span><br><span class=\"line\">  -object input-linux,id=kbd,evdev=/dev/input/by-id/usb-04d9_USB-HID_Keyboard-event-kbd,grab_all=on,repeat=on \\</span><br><span class=\"line\">  -object input-linux,id=mouse,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-event-mouse \\</span><br><span class=\"line\">  -object input-linux,id=kbd2,evdev=/dev/input/by-id/usb-Logitech_G102_Prodigy_Gaming_Mouse_017F36743435-if01-event-kbd,grab_all=on,repeat=on \\</span><br><span class=\"line\">  -device virtio-scsi-pci,id=scsi0 \\</span><br><span class=\"line\">  -device scsi-hd,bus=scsi0.0,drive=rootfs \\</span><br><span class=\"line\">  -drive id=rootfs,file=/tank/vm/photog.qcow2,id=disk,format=qcow2,if=none \\</span><br></pre></td></tr></table></figure>\n"},{"title":"WhatsApp chat backup getting stuck/no progress","date":"2017-10-29T11:57:45.000Z","_content":"\nSometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.\n\nInstead, head on over to `Settings > iCloud > iCloud Drive` and turn that off.\nIt'll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.\n\nJust turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.\n","source":"_posts/whatsapp-chat-backup-getting-stuck.md","raw":"---\ntitle: WhatsApp chat backup getting stuck/no progress\ndate: 2017-10-29 19:57:45\ntags: ios\n---\n\nSometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.\n\nInstead, head on over to `Settings > iCloud > iCloud Drive` and turn that off.\nIt'll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.\n\nJust turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.\n","slug":"whatsapp-chat-backup-getting-stuck","published":1,"updated":"2019-03-18T11:18:23.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjveat000xgs5nmlanl0kw","content":"<p>Sometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.</p>\n<p>Instead, head on over to <code>Settings &gt; iCloud &gt; iCloud Drive</code> and turn that off.\nIt’ll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.</p>\n<p>Just turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes the iOS WhatsApp application refuses to perform its chat backup\nproperly. Yesterday, my backup was stuck at 152kB/couple of GB for the better\npart of the day. Restarting your phone, restarting the app, toggling cellular\nand airplane modes will not fix the issue.</p>\n<p>Instead, head on over to <code>Settings &gt; iCloud &gt; iCloud Drive</code> and turn that off.\nIt’ll warn that there is some data from WhatsApp that is not saved yet, but\nyou can turn it off anyway. No data was lost on my end.</p>\n<p>Just turn it back on, head on over to WhatsApp and restart the backup process\nmanually. This fixes the issue.</p>\n"},{"title":"Bootstrap sane defaults for sshd and ipfw","date":"2017-03-09T09:34:54.000Z","author":"alex","_content":"\nI often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here's a short script\nthat sets up `sshd` as well as initializes the `ipfw` firewall.\n\nFor AWS instances we're better off using VPC with sane security groups to do our\nfirewalling for us.\n\nIt can be run using\n\n```sh\nssh user@host 'sh -s' < script\n```\n\nIt disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. \n\n```sh\n#!/bin/sh\n\nhead -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - > /dev/null 2>&1\n\nif [ $? != 0 ];\nthen\n  echo \"invalid public key found in authorized_keys, exiting..\"\n  exit\nfi\n\ncp /etc/ssh/sshd_config ~/sshd_config.bak\n\nsudo tee /etc/ssh/sshd_config <<EOF\nPort 22\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 2m\nStrictModes yes\nMaxAuthTries 6\nMaxSessions 10\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\nPasswordAuthentication no\nPermitEmptyPasswords no\nSubsystem       sftp    /usr/libexec/sftp-server\nPermitRootLogin no\nEOF\n\nsudo tee -a /etc/rc.conf <<EOF\nfirewall_enable=\"YES\"\nfirewall_quiet=\"YES\"\nfirewall_type=\"workstation\"\nfirewall_myservices=\"22/tcp\"\nfirewall_allowservices=\"any\"\nfirewall_logdeny=\"YES\"\nEOF\n\nsudo service sshd restart\nsudo service ipfw start\n```\n\nA maintained version of this script can be found on\n[gist](https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5).\n\nThe blog syntax highlighter seems to remove newlines from the source.\n","source":"_posts/sane-sshd-ipfw-defaults.md","raw":"---\ntitle: Bootstrap sane defaults for sshd and ipfw\ndate: 2017-03-09 17:34:54\ntags: freebsd\nauthor: alex\n---\n\nI often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here's a short script\nthat sets up `sshd` as well as initializes the `ipfw` firewall.\n\nFor AWS instances we're better off using VPC with sane security groups to do our\nfirewalling for us.\n\nIt can be run using\n\n```sh\nssh user@host 'sh -s' < script\n```\n\nIt disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. \n\n```sh\n#!/bin/sh\n\nhead -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - > /dev/null 2>&1\n\nif [ $? != 0 ];\nthen\n  echo \"invalid public key found in authorized_keys, exiting..\"\n  exit\nfi\n\ncp /etc/ssh/sshd_config ~/sshd_config.bak\n\nsudo tee /etc/ssh/sshd_config <<EOF\nPort 22\nSyslogFacility AUTH\nLogLevel INFO\nLoginGraceTime 2m\nStrictModes yes\nMaxAuthTries 6\nMaxSessions 10\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2\nPasswordAuthentication no\nPermitEmptyPasswords no\nSubsystem       sftp    /usr/libexec/sftp-server\nPermitRootLogin no\nEOF\n\nsudo tee -a /etc/rc.conf <<EOF\nfirewall_enable=\"YES\"\nfirewall_quiet=\"YES\"\nfirewall_type=\"workstation\"\nfirewall_myservices=\"22/tcp\"\nfirewall_allowservices=\"any\"\nfirewall_logdeny=\"YES\"\nEOF\n\nsudo service sshd restart\nsudo service ipfw start\n```\n\nA maintained version of this script can be found on\n[gist](https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5).\n\nThe blog syntax highlighter seems to remove newlines from the source.\n","slug":"sane-sshd-ipfw-defaults","published":1,"updated":"2019-03-18T11:18:23.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjuxjveau000zgs5n5cwur787","content":"<p>I often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here’s a short script\nthat sets up <code>sshd</code> as well as initializes the <code>ipfw</code> firewall.</p>\n<p>For AWS instances we’re better off using VPC with sane security groups to do our\nfirewalling for us.</p>\n<p>It can be run using</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host <span class=\"string\">'sh -s'</span> &lt; script</span><br></pre></td></tr></table></figure>\n<p>It disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">head -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid public key found in authorized_keys, exiting..\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">cp /etc/ssh/sshd_config ~/sshd_config.bak</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/ssh/sshd_config &lt;&lt;EOF</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">SyslogFacility AUTH</span><br><span class=\"line\">LogLevel INFO</span><br><span class=\"line\">LoginGraceTime 2m</span><br><span class=\"line\">StrictModes yes</span><br><span class=\"line\">MaxAuthTries 6</span><br><span class=\"line\">MaxSessions 10</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">PermitEmptyPasswords no</span><br><span class=\"line\">Subsystem       sftp    /usr/libexec/sftp-server</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee -a /etc/rc.conf &lt;&lt;EOF</span><br><span class=\"line\">firewall_enable=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_quiet=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_type=<span class=\"string\">\"workstation\"</span></span><br><span class=\"line\">firewall_myservices=<span class=\"string\">\"22/tcp\"</span></span><br><span class=\"line\">firewall_allowservices=<span class=\"string\">\"any\"</span></span><br><span class=\"line\">firewall_logdeny=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sshd restart</span><br><span class=\"line\">sudo service ipfw start</span><br></pre></td></tr></table></figure>\n<p>A maintained version of this script can be found on\n<a href=\"https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n<p>The blog syntax highlighter seems to remove newlines from the source.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I often find myself spawning random DigitalOcean FreeBSD\ndroplets for prototyping web services. Just because they are temporary does not\nmean that they should not have secure defaults however. Here’s a short script\nthat sets up <code>sshd</code> as well as initializes the <code>ipfw</code> firewall.</p>\n<p>For AWS instances we’re better off using VPC with sane security groups to do our\nfirewalling for us.</p>\n<p>It can be run using</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user@host <span class=\"string\">'sh -s'</span> &lt; script</span><br></pre></td></tr></table></figure>\n<p>It disables password authentication and allows only public key based\nauthentication, disables root login, limits retries. As for ipfw, it only allows\ntcp in on port 22 by default. </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">head -1 ~/.ssh/authorized_keys | ssh-keygen -l -f - &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? != 0 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"invalid public key found in authorized_keys, exiting..\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">cp /etc/ssh/sshd_config ~/sshd_config.bak</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee /etc/ssh/sshd_config &lt;&lt;EOF</span><br><span class=\"line\">Port 22</span><br><span class=\"line\">SyslogFacility AUTH</span><br><span class=\"line\">LogLevel INFO</span><br><span class=\"line\">LoginGraceTime 2m</span><br><span class=\"line\">StrictModes yes</span><br><span class=\"line\">MaxAuthTries 6</span><br><span class=\"line\">MaxSessions 10</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2</span><br><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">PermitEmptyPasswords no</span><br><span class=\"line\">Subsystem       sftp    /usr/libexec/sftp-server</span><br><span class=\"line\">PermitRootLogin no</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo tee -a /etc/rc.conf &lt;&lt;EOF</span><br><span class=\"line\">firewall_enable=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_quiet=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">firewall_type=<span class=\"string\">\"workstation\"</span></span><br><span class=\"line\">firewall_myservices=<span class=\"string\">\"22/tcp\"</span></span><br><span class=\"line\">firewall_allowservices=<span class=\"string\">\"any\"</span></span><br><span class=\"line\">firewall_logdeny=<span class=\"string\">\"YES\"</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">sudo service sshd restart</span><br><span class=\"line\">sudo service ipfw start</span><br></pre></td></tr></table></figure>\n<p>A maintained version of this script can be found on\n<a href=\"https://gist.github.com/spaghetti-/40896fb8f6cdc56851f894291d149ae5\" target=\"_blank\" rel=\"noopener\">gist</a>.</p>\n<p>The blog syntax highlighter seems to remove newlines from the source.</p>\n"},{"title":"Rustcon Asia 2019 - Beijing","date":"2019-04-25T08:01:13.000Z","_content":"\nI recently attended [Rustcon Asia 2019](https://rustcon.asia) in Beijing, China\nand these are my thoughts on the experience as a whole from the point of view of\na\n\n* newbie to Rust\n* non Chinese speaker\n\nthe latter of which is not really important.\n\n## TL;DR/Summary\n\nThe conference was a great opportunity to learn more about Rust in the\nworkplaces and the kind of workloads it was being put through. Custom derives\nand higher order concepts that I am not familiar with were broken in (just on\nthe top).\n\nMajority of the talks were in Chinese but it was very follow-able for a non\nChinese speaker because of the live translation. The live translation does of\ncourse lose a lot of the tone and humor, but it got the job done. When the\nspeakers were using slides in Chinese, it was *very very* hard to follow along\neven with the translation. I'd like to have been provided with an\nEnglish copy of the slides that I can refer to, at the very least.\n\nI appreciated the helpful and kind nature of everyone at the conference and it\nwas very welcoming. A small improvement that I'd like to suggest for future\norganizers is to start maybe an hour later (10 AM local time) and to provide\ncoffee at the venue!\n\n## Rust\n\nI'm new to Rust but I come from a C++ and Python and (naively) Haskell\nbackground which makes the language sufficiently interesting to follow. It\ncombines some of the best features that I like, is a statically typed, compiled\nlanguage that *I* can grok in my head. I am highlighting it because there are\neasier to grok languages that I can't get my head around because it's different\nfrom the *way I think*.\n\nI also come from a Robotics background doing underwater and surface robotics,\nwhich is an area in which C++ is king. Rust can (and should) be the default\nchoice for the safety it provides (critical when working around people and\nexpensive installations such as oil and gas pipelines) and performance.\n\nArmed with my curiosity and interest to learn more applications and ideas from\nfellow Rust developers, I left for Beijing.\n\n## Conference\n\nThe conference had talks for two days which began at 8 AM (first talk being at\n9 AM) which is kinda *really* early. Nick Cameron's talk on making rust\nergonomic gave an insight to what the core team thinks and was a great starter\ntalk. Some of the other talks that I found really interesting was\n\n### Implementing a secp256k1 library in pure Rust\n\nWhich gave an introduction to elliptic curves: in math, and then in Rust. Math\nbeing an universal language gives the audience a way to relate quickly to what's\nhappening in the Rust code even if you're not familiar with the higher level\nconcepts in the language.\n\n### How Rust taught me to think about systems\n\nEntertaining - makes you think back to when you were struggling with the borrow\nchecker (not that I'm not right now but to a lesser degree) and the language in\ngeneral. For the new-er folks, the speakers adventures give a solid start on how\nto reference library files, check for types and trace lifetimes.\n\n### Improving web app with Rust and WASM\n\nAn introduction to plugging in Rust compiled down to WASM for web developers and\na case study in which it was immediately useful to a client. The speaker used\nwasm to program a real time renderer for dentists to showcase teeth\nmodifications based on parameters provided from the JS layer.\n\nThe talk could have been improved a bit by providing absolute reference times\nwhen comparing performance across JS and WASM and by providing a debugging\nmethodology.\n\n### Cargo meets Autotools\n\nI'm interested in build systems and package managers and I'm opinionated about\nthem. I use portage as a daily driver and I'm familiar with CMake and autotools.\nHaving autotools is a godsend for deployments that don't need cargo installed\n(not distributed by default by distributions amongst other issues) and so is\nCMake. There are folks who are about to distribute libraries with deb and rpm.\n\nSome specifics about LTO, and differences mentioned in the talk between the\nfinal product with autotools vs CMake was not very clear to me though.\n\n### Distributed Actor System in Rust\n\nA very well done talk with a real world use case that I'm tackling as well. A\ndistributed actor system that's not Akka and is build in-house by Alibaba for\ntheir use case. Preserving types when sending messages and ensuring consistency\nwhen compiling and rolling out were some of the topics that was talked\nabout. The speaker was eloquent (even to a non Chinese speaker) and the talk was\nunderstandable even to a newbie. Awesome!\n\n### Be Fearless Using Rust in Production\n\nA talk about using Rust to replace an in house image stitcher from NodeJS. The\nslides gave a clear idea of the kind of workload that was implemented and it's\nsomething that I myself will first prototype in ImageMagick and then dump on C++\n(OpenCV3). Using Rust seemed to have paid off, with impressive QPS being handled\nby the same set of servers.\n\nThe talk also spoke about how difficult it was to get the company to approve\nusing Rust (at all) but they came around after an engineer used his own time to\nprototype the solution.\n\nAddition stuff that I'd have liked from the talk\n\n* Rust bindings for OpenCV\n* Benchmarks with an implementation in C++\n\n### Misc\n\nI wasn't too impressed with the talk about _how to learn rust efficiently_\nbecause it was more about learning than it was about learning Rust. I suppose\njust a mistmatch on expectations and style of learning.\n\n## Workshops\n\nI did not attend the workshops because I had to get an expensive visa to enter\nChina and the time was better spent exploring the wonderful city of Beijing and\nits delicious food.\n","source":"_posts/rustcon-beijing.md","raw":"---\ntitle: Rustcon Asia 2019 - Beijing\ndate: 2019-04-25 16:01:13\ntags:\n - rust\n - conference\n---\n\nI recently attended [Rustcon Asia 2019](https://rustcon.asia) in Beijing, China\nand these are my thoughts on the experience as a whole from the point of view of\na\n\n* newbie to Rust\n* non Chinese speaker\n\nthe latter of which is not really important.\n\n## TL;DR/Summary\n\nThe conference was a great opportunity to learn more about Rust in the\nworkplaces and the kind of workloads it was being put through. Custom derives\nand higher order concepts that I am not familiar with were broken in (just on\nthe top).\n\nMajority of the talks were in Chinese but it was very follow-able for a non\nChinese speaker because of the live translation. The live translation does of\ncourse lose a lot of the tone and humor, but it got the job done. When the\nspeakers were using slides in Chinese, it was *very very* hard to follow along\neven with the translation. I'd like to have been provided with an\nEnglish copy of the slides that I can refer to, at the very least.\n\nI appreciated the helpful and kind nature of everyone at the conference and it\nwas very welcoming. A small improvement that I'd like to suggest for future\norganizers is to start maybe an hour later (10 AM local time) and to provide\ncoffee at the venue!\n\n## Rust\n\nI'm new to Rust but I come from a C++ and Python and (naively) Haskell\nbackground which makes the language sufficiently interesting to follow. It\ncombines some of the best features that I like, is a statically typed, compiled\nlanguage that *I* can grok in my head. I am highlighting it because there are\neasier to grok languages that I can't get my head around because it's different\nfrom the *way I think*.\n\nI also come from a Robotics background doing underwater and surface robotics,\nwhich is an area in which C++ is king. Rust can (and should) be the default\nchoice for the safety it provides (critical when working around people and\nexpensive installations such as oil and gas pipelines) and performance.\n\nArmed with my curiosity and interest to learn more applications and ideas from\nfellow Rust developers, I left for Beijing.\n\n## Conference\n\nThe conference had talks for two days which began at 8 AM (first talk being at\n9 AM) which is kinda *really* early. Nick Cameron's talk on making rust\nergonomic gave an insight to what the core team thinks and was a great starter\ntalk. Some of the other talks that I found really interesting was\n\n### Implementing a secp256k1 library in pure Rust\n\nWhich gave an introduction to elliptic curves: in math, and then in Rust. Math\nbeing an universal language gives the audience a way to relate quickly to what's\nhappening in the Rust code even if you're not familiar with the higher level\nconcepts in the language.\n\n### How Rust taught me to think about systems\n\nEntertaining - makes you think back to when you were struggling with the borrow\nchecker (not that I'm not right now but to a lesser degree) and the language in\ngeneral. For the new-er folks, the speakers adventures give a solid start on how\nto reference library files, check for types and trace lifetimes.\n\n### Improving web app with Rust and WASM\n\nAn introduction to plugging in Rust compiled down to WASM for web developers and\na case study in which it was immediately useful to a client. The speaker used\nwasm to program a real time renderer for dentists to showcase teeth\nmodifications based on parameters provided from the JS layer.\n\nThe talk could have been improved a bit by providing absolute reference times\nwhen comparing performance across JS and WASM and by providing a debugging\nmethodology.\n\n### Cargo meets Autotools\n\nI'm interested in build systems and package managers and I'm opinionated about\nthem. I use portage as a daily driver and I'm familiar with CMake and autotools.\nHaving autotools is a godsend for deployments that don't need cargo installed\n(not distributed by default by distributions amongst other issues) and so is\nCMake. There are folks who are about to distribute libraries with deb and rpm.\n\nSome specifics about LTO, and differences mentioned in the talk between the\nfinal product with autotools vs CMake was not very clear to me though.\n\n### Distributed Actor System in Rust\n\nA very well done talk with a real world use case that I'm tackling as well. A\ndistributed actor system that's not Akka and is build in-house by Alibaba for\ntheir use case. Preserving types when sending messages and ensuring consistency\nwhen compiling and rolling out were some of the topics that was talked\nabout. The speaker was eloquent (even to a non Chinese speaker) and the talk was\nunderstandable even to a newbie. Awesome!\n\n### Be Fearless Using Rust in Production\n\nA talk about using Rust to replace an in house image stitcher from NodeJS. The\nslides gave a clear idea of the kind of workload that was implemented and it's\nsomething that I myself will first prototype in ImageMagick and then dump on C++\n(OpenCV3). Using Rust seemed to have paid off, with impressive QPS being handled\nby the same set of servers.\n\nThe talk also spoke about how difficult it was to get the company to approve\nusing Rust (at all) but they came around after an engineer used his own time to\nprototype the solution.\n\nAddition stuff that I'd have liked from the talk\n\n* Rust bindings for OpenCV\n* Benchmarks with an implementation in C++\n\n### Misc\n\nI wasn't too impressed with the talk about _how to learn rust efficiently_\nbecause it was more about learning than it was about learning Rust. I suppose\njust a mistmatch on expectations and style of learning.\n\n## Workshops\n\nI did not attend the workshops because I had to get an expensive visa to enter\nChina and the time was better spent exploring the wonderful city of Beijing and\nits delicious food.\n","slug":"rustcon-beijing","published":1,"updated":"2019-04-26T06:54:56.482Z","_id":"cjuxpz49a0000i75nosoquwsx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I recently attended <a href=\"https://rustcon.asia\" target=\"_blank\" rel=\"noopener\">Rustcon Asia 2019</a> in Beijing, China\nand these are my thoughts on the experience as a whole from the point of view of\na</p>\n<ul>\n<li>newbie to Rust</li>\n<li>non Chinese speaker</li>\n</ul>\n<p>the latter of which is not really important.</p>\n<h2 id=\"TL-DR-Summary\"><a href=\"#TL-DR-Summary\" class=\"headerlink\" title=\"TL;DR/Summary\"></a>TL;DR/Summary</h2><p>The conference was a great opportunity to learn more about Rust in the\nworkplaces and the kind of workloads it was being put through. Custom derives\nand higher order concepts that I am not familiar with were broken in (just on\nthe top).</p>\n<p>Majority of the talks were in Chinese but it was very follow-able for a non\nChinese speaker because of the live translation. The live translation does of\ncourse lose a lot of the tone and humor, but it got the job done. When the\nspeakers were using slides in Chinese, it was <em>very very</em> hard to follow along\neven with the translation. I’d like to have been provided with an\nEnglish copy of the slides that I can refer to, at the very least.</p>\n<p>I appreciated the helpful and kind nature of everyone at the conference and it\nwas very welcoming. A small improvement that I’d like to suggest for future\norganizers is to start maybe an hour later (10 AM local time) and to provide\ncoffee at the venue!</p>\n<h2 id=\"Rust\"><a href=\"#Rust\" class=\"headerlink\" title=\"Rust\"></a>Rust</h2><p>I’m new to Rust but I come from a C++ and Python and (naively) Haskell\nbackground which makes the language sufficiently interesting to follow. It\ncombines some of the best features that I like, is a statically typed, compiled\nlanguage that <em>I</em> can grok in my head. I am highlighting it because there are\neasier to grok languages that I can’t get my head around because it’s different\nfrom the <em>way I think</em>.</p>\n<p>I also come from a Robotics background doing underwater and surface robotics,\nwhich is an area in which C++ is king. Rust can (and should) be the default\nchoice for the safety it provides (critical when working around people and\nexpensive installations such as oil and gas pipelines) and performance.</p>\n<p>Armed with my curiosity and interest to learn more applications and ideas from\nfellow Rust developers, I left for Beijing.</p>\n<h2 id=\"Conference\"><a href=\"#Conference\" class=\"headerlink\" title=\"Conference\"></a>Conference</h2><p>The conference had talks for two days which began at 8 AM (first talk being at\n9 AM) which is kinda <em>really</em> early. Nick Cameron’s talk on making rust\nergonomic gave an insight to what the core team thinks and was a great starter\ntalk. Some of the other talks that I found really interesting was</p>\n<h3 id=\"Implementing-a-secp256k1-library-in-pure-Rust\"><a href=\"#Implementing-a-secp256k1-library-in-pure-Rust\" class=\"headerlink\" title=\"Implementing a secp256k1 library in pure Rust\"></a>Implementing a secp256k1 library in pure Rust</h3><p>Which gave an introduction to elliptic curves: in math, and then in Rust. Math\nbeing an universal language gives the audience a way to relate quickly to what’s\nhappening in the Rust code even if you’re not familiar with the higher level\nconcepts in the language.</p>\n<h3 id=\"How-Rust-taught-me-to-think-about-systems\"><a href=\"#How-Rust-taught-me-to-think-about-systems\" class=\"headerlink\" title=\"How Rust taught me to think about systems\"></a>How Rust taught me to think about systems</h3><p>Entertaining - makes you think back to when you were struggling with the borrow\nchecker (not that I’m not right now but to a lesser degree) and the language in\ngeneral. For the new-er folks, the speakers adventures give a solid start on how\nto reference library files, check for types and trace lifetimes.</p>\n<h3 id=\"Improving-web-app-with-Rust-and-WASM\"><a href=\"#Improving-web-app-with-Rust-and-WASM\" class=\"headerlink\" title=\"Improving web app with Rust and WASM\"></a>Improving web app with Rust and WASM</h3><p>An introduction to plugging in Rust compiled down to WASM for web developers and\na case study in which it was immediately useful to a client. The speaker used\nwasm to program a real time renderer for dentists to showcase teeth\nmodifications based on parameters provided from the JS layer.</p>\n<p>The talk could have been improved a bit by providing absolute reference times\nwhen comparing performance across JS and WASM and by providing a debugging\nmethodology.</p>\n<h3 id=\"Cargo-meets-Autotools\"><a href=\"#Cargo-meets-Autotools\" class=\"headerlink\" title=\"Cargo meets Autotools\"></a>Cargo meets Autotools</h3><p>I’m interested in build systems and package managers and I’m opinionated about\nthem. I use portage as a daily driver and I’m familiar with CMake and autotools.\nHaving autotools is a godsend for deployments that don’t need cargo installed\n(not distributed by default by distributions amongst other issues) and so is\nCMake. There are folks who are about to distribute libraries with deb and rpm.</p>\n<p>Some specifics about LTO, and differences mentioned in the talk between the\nfinal product with autotools vs CMake was not very clear to me though.</p>\n<h3 id=\"Distributed-Actor-System-in-Rust\"><a href=\"#Distributed-Actor-System-in-Rust\" class=\"headerlink\" title=\"Distributed Actor System in Rust\"></a>Distributed Actor System in Rust</h3><p>A very well done talk with a real world use case that I’m tackling as well. A\ndistributed actor system that’s not Akka and is build in-house by Alibaba for\ntheir use case. Preserving types when sending messages and ensuring consistency\nwhen compiling and rolling out were some of the topics that was talked\nabout. The speaker was eloquent (even to a non Chinese speaker) and the talk was\nunderstandable even to a newbie. Awesome!</p>\n<h3 id=\"Be-Fearless-Using-Rust-in-Production\"><a href=\"#Be-Fearless-Using-Rust-in-Production\" class=\"headerlink\" title=\"Be Fearless Using Rust in Production\"></a>Be Fearless Using Rust in Production</h3><p>A talk about using Rust to replace an in house image stitcher from NodeJS. The\nslides gave a clear idea of the kind of workload that was implemented and it’s\nsomething that I myself will first prototype in ImageMagick and then dump on C++\n(OpenCV3). Using Rust seemed to have paid off, with impressive QPS being handled\nby the same set of servers.</p>\n<p>The talk also spoke about how difficult it was to get the company to approve\nusing Rust (at all) but they came around after an engineer used his own time to\nprototype the solution.</p>\n<p>Addition stuff that I’d have liked from the talk</p>\n<ul>\n<li>Rust bindings for OpenCV</li>\n<li>Benchmarks with an implementation in C++</li>\n</ul>\n<h3 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h3><p>I wasn’t too impressed with the talk about <em>how to learn rust efficiently</em>\nbecause it was more about learning than it was about learning Rust. I suppose\njust a mistmatch on expectations and style of learning.</p>\n<h2 id=\"Workshops\"><a href=\"#Workshops\" class=\"headerlink\" title=\"Workshops\"></a>Workshops</h2><p>I did not attend the workshops because I had to get an expensive visa to enter\nChina and the time was better spent exploring the wonderful city of Beijing and\nits delicious food.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I recently attended <a href=\"https://rustcon.asia\" target=\"_blank\" rel=\"noopener\">Rustcon Asia 2019</a> in Beijing, China\nand these are my thoughts on the experience as a whole from the point of view of\na</p>\n<ul>\n<li>newbie to Rust</li>\n<li>non Chinese speaker</li>\n</ul>\n<p>the latter of which is not really important.</p>\n<h2 id=\"TL-DR-Summary\"><a href=\"#TL-DR-Summary\" class=\"headerlink\" title=\"TL;DR/Summary\"></a>TL;DR/Summary</h2><p>The conference was a great opportunity to learn more about Rust in the\nworkplaces and the kind of workloads it was being put through. Custom derives\nand higher order concepts that I am not familiar with were broken in (just on\nthe top).</p>\n<p>Majority of the talks were in Chinese but it was very follow-able for a non\nChinese speaker because of the live translation. The live translation does of\ncourse lose a lot of the tone and humor, but it got the job done. When the\nspeakers were using slides in Chinese, it was <em>very very</em> hard to follow along\neven with the translation. I’d like to have been provided with an\nEnglish copy of the slides that I can refer to, at the very least.</p>\n<p>I appreciated the helpful and kind nature of everyone at the conference and it\nwas very welcoming. A small improvement that I’d like to suggest for future\norganizers is to start maybe an hour later (10 AM local time) and to provide\ncoffee at the venue!</p>\n<h2 id=\"Rust\"><a href=\"#Rust\" class=\"headerlink\" title=\"Rust\"></a>Rust</h2><p>I’m new to Rust but I come from a C++ and Python and (naively) Haskell\nbackground which makes the language sufficiently interesting to follow. It\ncombines some of the best features that I like, is a statically typed, compiled\nlanguage that <em>I</em> can grok in my head. I am highlighting it because there are\neasier to grok languages that I can’t get my head around because it’s different\nfrom the <em>way I think</em>.</p>\n<p>I also come from a Robotics background doing underwater and surface robotics,\nwhich is an area in which C++ is king. Rust can (and should) be the default\nchoice for the safety it provides (critical when working around people and\nexpensive installations such as oil and gas pipelines) and performance.</p>\n<p>Armed with my curiosity and interest to learn more applications and ideas from\nfellow Rust developers, I left for Beijing.</p>\n<h2 id=\"Conference\"><a href=\"#Conference\" class=\"headerlink\" title=\"Conference\"></a>Conference</h2><p>The conference had talks for two days which began at 8 AM (first talk being at\n9 AM) which is kinda <em>really</em> early. Nick Cameron’s talk on making rust\nergonomic gave an insight to what the core team thinks and was a great starter\ntalk. Some of the other talks that I found really interesting was</p>\n<h3 id=\"Implementing-a-secp256k1-library-in-pure-Rust\"><a href=\"#Implementing-a-secp256k1-library-in-pure-Rust\" class=\"headerlink\" title=\"Implementing a secp256k1 library in pure Rust\"></a>Implementing a secp256k1 library in pure Rust</h3><p>Which gave an introduction to elliptic curves: in math, and then in Rust. Math\nbeing an universal language gives the audience a way to relate quickly to what’s\nhappening in the Rust code even if you’re not familiar with the higher level\nconcepts in the language.</p>\n<h3 id=\"How-Rust-taught-me-to-think-about-systems\"><a href=\"#How-Rust-taught-me-to-think-about-systems\" class=\"headerlink\" title=\"How Rust taught me to think about systems\"></a>How Rust taught me to think about systems</h3><p>Entertaining - makes you think back to when you were struggling with the borrow\nchecker (not that I’m not right now but to a lesser degree) and the language in\ngeneral. For the new-er folks, the speakers adventures give a solid start on how\nto reference library files, check for types and trace lifetimes.</p>\n<h3 id=\"Improving-web-app-with-Rust-and-WASM\"><a href=\"#Improving-web-app-with-Rust-and-WASM\" class=\"headerlink\" title=\"Improving web app with Rust and WASM\"></a>Improving web app with Rust and WASM</h3><p>An introduction to plugging in Rust compiled down to WASM for web developers and\na case study in which it was immediately useful to a client. The speaker used\nwasm to program a real time renderer for dentists to showcase teeth\nmodifications based on parameters provided from the JS layer.</p>\n<p>The talk could have been improved a bit by providing absolute reference times\nwhen comparing performance across JS and WASM and by providing a debugging\nmethodology.</p>\n<h3 id=\"Cargo-meets-Autotools\"><a href=\"#Cargo-meets-Autotools\" class=\"headerlink\" title=\"Cargo meets Autotools\"></a>Cargo meets Autotools</h3><p>I’m interested in build systems and package managers and I’m opinionated about\nthem. I use portage as a daily driver and I’m familiar with CMake and autotools.\nHaving autotools is a godsend for deployments that don’t need cargo installed\n(not distributed by default by distributions amongst other issues) and so is\nCMake. There are folks who are about to distribute libraries with deb and rpm.</p>\n<p>Some specifics about LTO, and differences mentioned in the talk between the\nfinal product with autotools vs CMake was not very clear to me though.</p>\n<h3 id=\"Distributed-Actor-System-in-Rust\"><a href=\"#Distributed-Actor-System-in-Rust\" class=\"headerlink\" title=\"Distributed Actor System in Rust\"></a>Distributed Actor System in Rust</h3><p>A very well done talk with a real world use case that I’m tackling as well. A\ndistributed actor system that’s not Akka and is build in-house by Alibaba for\ntheir use case. Preserving types when sending messages and ensuring consistency\nwhen compiling and rolling out were some of the topics that was talked\nabout. The speaker was eloquent (even to a non Chinese speaker) and the talk was\nunderstandable even to a newbie. Awesome!</p>\n<h3 id=\"Be-Fearless-Using-Rust-in-Production\"><a href=\"#Be-Fearless-Using-Rust-in-Production\" class=\"headerlink\" title=\"Be Fearless Using Rust in Production\"></a>Be Fearless Using Rust in Production</h3><p>A talk about using Rust to replace an in house image stitcher from NodeJS. The\nslides gave a clear idea of the kind of workload that was implemented and it’s\nsomething that I myself will first prototype in ImageMagick and then dump on C++\n(OpenCV3). Using Rust seemed to have paid off, with impressive QPS being handled\nby the same set of servers.</p>\n<p>The talk also spoke about how difficult it was to get the company to approve\nusing Rust (at all) but they came around after an engineer used his own time to\nprototype the solution.</p>\n<p>Addition stuff that I’d have liked from the talk</p>\n<ul>\n<li>Rust bindings for OpenCV</li>\n<li>Benchmarks with an implementation in C++</li>\n</ul>\n<h3 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h3><p>I wasn’t too impressed with the talk about <em>how to learn rust efficiently</em>\nbecause it was more about learning than it was about learning Rust. I suppose\njust a mistmatch on expectations and style of learning.</p>\n<h2 id=\"Workshops\"><a href=\"#Workshops\" class=\"headerlink\" title=\"Workshops\"></a>Workshops</h2><p>I did not attend the workshops because I had to get an expensive visa to enter\nChina and the time was better spent exploring the wonderful city of Beijing and\nits delicious food.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjuxjve9s0000gs5nru4ur89b","tag_id":"cjuxjvea10002gs5ni3vvjihs","_id":"cjuxjvea50007gs5nsnvuoa6r"},{"post_id":"cjuxjve9z0001gs5n3j72f4r8","tag_id":"cjuxjvea50006gs5nn775z4h6","_id":"cjuxjvead000fgs5n4w6h51qs"},{"post_id":"cjuxjve9z0001gs5n3j72f4r8","tag_id":"cjuxjvea7000ags5nf30949gz","_id":"cjuxjvead000ggs5nqf1jgu75"},{"post_id":"cjuxjvea20003gs5n5lft4tkh","tag_id":"cjuxjvea9000dgs5nps74okwo","_id":"cjuxjveae000kgs5nyjbppcp6"},{"post_id":"cjuxjvea20003gs5n5lft4tkh","tag_id":"cjuxjvead000hgs5nreqga624","_id":"cjuxjveae000lgs5npdjqujo9"},{"post_id":"cjuxjvea20003gs5n5lft4tkh","tag_id":"cjuxjveae000igs5nhaudab0f","_id":"cjuxjveaf000ngs5neef80wxj"},{"post_id":"cjuxjvea50008gs5n70ktrgdv","tag_id":"cjuxjveae000jgs5ngsadc8oo","_id":"cjuxjveaf000ogs5n1u2d8nn3"},{"post_id":"cjuxjvea60009gs5nf2pq20cp","tag_id":"cjuxjveaf000mgs5nbxvlc9gp","_id":"cjuxjveag000qgs5ngb1gy0m0"},{"post_id":"cjuxjvea8000bgs5nqyv6ulel","tag_id":"cjuxjveaf000pgs5nyr0n2uio","_id":"cjuxjveag000sgs5njvfmf134"},{"post_id":"cjuxjvea9000cgs5nmrx3mjl2","tag_id":"cjuxjveag000rgs5nqaljt9ng","_id":"cjuxjveaj000ugs5nxkh9co6u"},{"post_id":"cjuxjveaa000egs5nuguznnrw","tag_id":"cjuxjveaf000pgs5nyr0n2uio","_id":"cjuxjveaj000vgs5n1441u3l2"},{"post_id":"cjuxjveau000zgs5n5cwur787","tag_id":"cjuxjvead000hgs5nreqga624","_id":"cjuxjveav0010gs5nn3h4ju1f"},{"post_id":"cjuxjveas000wgs5naqf8x6hq","tag_id":"cjuxjvea50006gs5nn775z4h6","_id":"cjuxjveax0015gs5n1shgxkno"},{"post_id":"cjuxjveas000wgs5naqf8x6hq","tag_id":"cjuxjveat000ygs5nyob7d14m","_id":"cjuxjveax0016gs5ncbxi0l3j"},{"post_id":"cjuxjveas000wgs5naqf8x6hq","tag_id":"cjuxjveav0011gs5n73s073uj","_id":"cjuxjveax0017gs5nbjtpkk6d"},{"post_id":"cjuxjveas000wgs5naqf8x6hq","tag_id":"cjuxjveav0012gs5nncr6j3p8","_id":"cjuxjveay0018gs5nmzim6aab"},{"post_id":"cjuxjveas000wgs5naqf8x6hq","tag_id":"cjuxjveaw0013gs5nundsnzr4","_id":"cjuxjveay0019gs5n5ildds0w"},{"post_id":"cjuxjveat000xgs5nmlanl0kw","tag_id":"cjuxjveaw0014gs5nxd8upgab","_id":"cjuxjveay001ags5ntic9oyne"},{"post_id":"cjuxpz49a0000i75nosoquwsx","tag_id":"cjuxq1dw80000ze5n4cd8w9it","_id":"cjuxq1dwb0002ze5npexail93"},{"post_id":"cjuxpz49a0000i75nosoquwsx","tag_id":"cjuxq1dwa0001ze5n97oqnm5q","_id":"cjuxq1dwb0003ze5np199e6jm"}],"Tag":[{"name":"shell, scripting","_id":"cjuxjvea10002gs5ni3vvjihs"},{"name":"linux","_id":"cjuxjvea50006gs5nn775z4h6"},{"name":"kernel","_id":"cjuxjvea7000ags5nf30949gz"},{"name":"ezjail","_id":"cjuxjvea9000dgs5nps74okwo"},{"name":"freebsd","_id":"cjuxjvead000hgs5nreqga624"},{"name":"networking","_id":"cjuxjveae000igs5nhaudab0f"},{"name":"esp8266","_id":"cjuxjveae000jgs5ngsadc8oo"},{"name":"ios, openvpn","_id":"cjuxjveaf000mgs5nbxvlc9gp"},{"name":"ros","_id":"cjuxjveaf000pgs5nyr0n2uio"},{"name":"weechat","_id":"cjuxjveag000rgs5nqaljt9ng"},{"name":"gentoo","_id":"cjuxjveat000ygs5nyob7d14m"},{"name":"nvidia","_id":"cjuxjveav0011gs5n73s073uj"},{"name":"pci-passthrough","_id":"cjuxjveav0012gs5nncr6j3p8"},{"name":"qemu","_id":"cjuxjveaw0013gs5nundsnzr4"},{"name":"ios","_id":"cjuxjveaw0014gs5nxd8upgab"},{"name":"rust","_id":"cjuxq1dw80000ze5n4cd8w9it"},{"name":"conference","_id":"cjuxq1dwa0001ze5n97oqnm5q"}]}}